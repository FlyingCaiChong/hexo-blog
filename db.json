{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/addtoany.js","path":"js/third-party/addtoany.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/wavedrom.js","path":"js/third-party/tags/wavedrom.js","modified":1,"renderable":1},{"_id":"source/images/avatar.jpeg","path":"images/avatar.jpeg","modified":1,"renderable":0},{"_id":"source/images/beian.png","path":"images/beian.png","modified":1,"renderable":0},{"_id":"source/images/aliyun-server-res/7B4DB7D5-2F36-4242-99E6-B959F73C28EE.png","path":"images/aliyun-server-res/7B4DB7D5-2F36-4242-99E6-B959F73C28EE.png","modified":1,"renderable":0},{"_id":"source/images/aliyun-server-res/37670519-FA8B-4062-BCFE-130FB5F41509.png","path":"images/aliyun-server-res/37670519-FA8B-4062-BCFE-130FB5F41509.png","modified":1,"renderable":0},{"_id":"source/images/aliyun-server-res/948EED37-A2B2-4BB1-9B22-C58B5451604C.png","path":"images/aliyun-server-res/948EED37-A2B2-4BB1-9B22-C58B5451604C.png","modified":1,"renderable":0},{"_id":"source/images/aliyun-server-res/9C92FAF6-1284-4027-939A-C66FF14B0BAD.png","path":"images/aliyun-server-res/9C92FAF6-1284-4027-939A-C66FF14B0BAD.png","modified":1,"renderable":0},{"_id":"source/images/aliyun-server-res/1E5521D7-A26F-4767-B79F-8E245EB2DA90.png","path":"images/aliyun-server-res/1E5521D7-A26F-4767-B79F-8E245EB2DA90.png","modified":1,"renderable":0},{"_id":"source/images/aliyun-server-res/AFB10CB6-2C19-4640-A395-F5D0E56ECBB0.png","path":"images/aliyun-server-res/AFB10CB6-2C19-4640-A395-F5D0E56ECBB0.png","modified":1,"renderable":0},{"_id":"source/images/aliyun-server-res/E2863A55-75F7-4242-99C2-3AF7792A0972.png","path":"images/aliyun-server-res/E2863A55-75F7-4242-99C2-3AF7792A0972.png","modified":1,"renderable":0},{"_id":"source/images/aliyun-server-res/C52A3D7C-1B05-4EB1-8883-202ACBB12DE4.png","path":"images/aliyun-server-res/C52A3D7C-1B05-4EB1-8883-202ACBB12DE4.png","modified":1,"renderable":0},{"_id":"source/images/aliyun-server-res/FEB1DEDE-A737-4713-BD84-32AAF99E1220.png","path":"images/aliyun-server-res/FEB1DEDE-A737-4713-BD84-32AAF99E1220.png","modified":1,"renderable":0},{"_id":"source/images/aliyun-server-res/E1035F5C-8438-4517-8DD5-5487B6B9A487.png","path":"images/aliyun-server-res/E1035F5C-8438-4517-8DD5-5487B6B9A487.png","modified":1,"renderable":0},{"_id":"source/images/aliyun-server-res/F5AC47B0-C347-4D4C-940E-B178AF6E770C.png","path":"images/aliyun-server-res/F5AC47B0-C347-4D4C-940E-B178AF6E770C.png","modified":1,"renderable":0},{"_id":"source/images/data-structures/binary-search-tree.jpg","path":"images/data-structures/binary-search-tree.jpg","modified":1,"renderable":0},{"_id":"source/images/data-structures/array-representation.jpeg","path":"images/data-structures/array-representation.jpeg","modified":1,"renderable":0},{"_id":"source/images/data-structures/collision-resolution.jpeg","path":"images/data-structures/collision-resolution.jpeg","modified":1,"renderable":0},{"_id":"source/images/data-structures/doubly-linked-list.jpeg","path":"images/data-structures/doubly-linked-list.jpeg","modified":1,"renderable":0},{"_id":"source/images/data-structures/hash-table.jpeg","path":"images/data-structures/hash-table.jpeg","modified":1,"renderable":0},{"_id":"source/images/css-flip-res/css-flip.gif","path":"images/css-flip-res/css-flip.gif","modified":1,"renderable":0},{"_id":"source/images/data-structures/max-heap.jpeg","path":"images/data-structures/max-heap.jpeg","modified":1,"renderable":0},{"_id":"source/images/data-structures/queue.jpeg","path":"images/data-structures/queue.jpeg","modified":1,"renderable":0},{"_id":"source/images/data-structures/linked-list.jpeg","path":"images/data-structures/linked-list.jpeg","modified":1,"renderable":0},{"_id":"source/images/data-structures/stack.jpeg","path":"images/data-structures/stack.jpeg","modified":1,"renderable":0},{"_id":"source/images/data-structures/min-heap.jpeg","path":"images/data-structures/min-heap.jpeg","modified":1,"renderable":0},{"_id":"source/images/data-structures/trie.jpg","path":"images/data-structures/trie.jpg","modified":1,"renderable":0},{"_id":"source/images/data-structures/tree.jpeg","path":"images/data-structures/tree.jpeg","modified":1,"renderable":0}],"Cache":[{"_id":"source/images/avatar.jpeg","hash":"80a6c43aef8f2a82237991c8a57528d1ab7c1384","modified":1693638593722},{"_id":"source/about/index.md","hash":"d266ca481552c9c2da400451c2b5c7df1a3ddee4","modified":1693641995466},{"_id":"source/_posts/css-flip.md","hash":"7e6366d8e5ab6ae1f3a784570e376eadfb8deced","modified":1698568712423},{"_id":"source/images/beian.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1695204603546},{"_id":"source/_posts/WebViewJavascriptBridge-use.md","hash":"753a1d00375da1af8fcfb33b882aa4772155cb5b","modified":1693968545621},{"_id":"source/categories/index.md","hash":"798dbb34ce91f129c8a60e3a306ffb9d9d6d2b5e","modified":1693640465802},{"_id":"source/_posts/aliyun-server.md","hash":"315aa06625deb534e54236af3a7367da6f3d1921","modified":1696844622566},{"_id":"source/_posts/data-structures-001-comparator.md","hash":"7a73f4fc258a957f58a4cca18206480e34ece052","modified":1698573062227},{"_id":"source/_posts/data-structures-008-PriorityQueue.md","hash":"626ff14f7ee9465970ade7525801af362f39abbc","modified":1702533326494},{"_id":"source/_posts/data-structures-002-LinkedList.md","hash":"9954baba2a15a8c1756d7f2d6dbd1d40ae5c473b","modified":1698834602363},{"_id":"source/_posts/data-structures-009-Trie.md","hash":"a93bccd2dc4154a5c49d863e53b07a7d45ce14a7","modified":1702533688240},{"_id":"source/_posts/data-structures-006-HashTable.md","hash":"8ad3b9a497e1c5a96bc480287b45c50ec578f057","modified":1700812951377},{"_id":"source/_posts/data-structures-003-DoublyLinkedList.md","hash":"b58d2710beb1b4390685b19a17363035059712b6","modified":1698903133561},{"_id":"source/_posts/data-structures-005-Stack.md","hash":"c5c765913fb110327e8ff6b64ea1dd454445c279","modified":1700812975028},{"_id":"source/_posts/data-structures-012-AvlTree.md","hash":"0b39f321c63040733039f6c6bd2f9590395c5edf","modified":1702535950622},{"_id":"source/_posts/data-structures-004-queue.md","hash":"7942fd6bca73b54fb0e562e5d745c66294b95efa","modified":1698834674042},{"_id":"source/_posts/data-structures-011-BinarySearchTree.md","hash":"cecdfe70d72131e5bbfd17059a46c1e8ed17416a","modified":1702535759558},{"_id":"source/_posts/data-structures-013-RedBlackTree.md","hash":"52654eb4a0439c817746b021f3a24fa946873337","modified":1702536316149},{"_id":"source/_posts/data-structures-007-Heap.md","hash":"230548b94bc5521dc2f6f7385b655c40537506e6","modified":1700813241625},{"_id":"source/_posts/data-structures-014-SegmentTree.md","hash":"8214c76f4370b7232a9ba6e65563ba9e553bbf1b","modified":1702536495310},{"_id":"source/_posts/data-structures-015-FenwickTree.md","hash":"baa06b9bf836cbf3d08e0c358cf95832f44c208a","modified":1702536697690},{"_id":"source/_posts/express-docker.md","hash":"635b2793f70ca99a31ca6697c3e10203cd0f99c2","modified":1695026561438},{"_id":"source/_posts/data-structures-010-Tree.md","hash":"6cf67b8263d17b569fa261dc7c8a971fe23aab2e","modified":1702535468483},{"_id":"source/tags/index.md","hash":"613d32801510cd0f95c7654aa93de9d3da34bb37","modified":1693641071872},{"_id":"source/_posts/hexo-use.md","hash":"8e14200f622b1f3d7cdef356f70769dc656d2494","modified":1693745429010},{"_id":"source/_posts/wkwebview-back.md","hash":"1bb790341e60b1bc3006cb681e219c32f19640e4","modified":1693910675394},{"_id":"source/images/aliyun-server-res/AFB10CB6-2C19-4640-A395-F5D0E56ECBB0.png","hash":"86d33ad5f903df4cd63949a693a493bac7d02e53","modified":1694069943313},{"_id":"source/journal/index.md","hash":"0683f2b54213560843c14ef0aa2eb8f8d6b26961","modified":1693741702541},{"_id":"source/journal/journal-2011-11-18.md","hash":"7ed02193097adddf571e400c1f45550d5d65191b","modified":1693740462297},{"_id":"source/journal/journal-2011-10-25.md","hash":"7864f8062d9bb39f46cce040eb6d8d981ee71fda","modified":1693740583909},{"_id":"source/journal/journal-2011-10-05.md","hash":"415abcb74ac9caaace6e30df742958d07268b1d5","modified":1693740684019},{"_id":"source/journal/journal-2011-08-06.md","hash":"9098be087de6eddbe764897f5b4b6c46fded9653","modified":1693741711263},{"_id":"source/journal/journal-2011-12-12.md","hash":"6c72f5f6420bc2c1449fa119c199685e9e8fd863","modified":1693740148352},{"_id":"source/journal/journal-2011-12-25.md","hash":"8deadf414c70a122653962eb221bbfed7d15bd6c","modified":1693736856289},{"_id":"source/journal/journal-2012-01-21.md","hash":"53b31268e726f68cc02b774d4e120df76a7b1f6a","modified":1693736545692},{"_id":"source/journal/journal-2012-06-16.md","hash":"54af6372474784ac89e570639b9f1c1e31670f38","modified":1693725813512},{"_id":"source/journal/journal-2014-08-12.md","hash":"41f117c1948a99d008cde4a6871a5903c98ef572","modified":1693724851848},{"_id":"source/journal/journal-2012-09-18.md","hash":"d4c116f0bddbf7478fca3156b5b0001fc2670c91","modified":1693725716413},{"_id":"source/journal/journal-2013-01-07.md","hash":"9684242c607f695d5493eee1c53ff8eff401d30e","modified":1693725436744},{"_id":"source/journal/journal-2014-04-20.md","hash":"a69118f586f0ecceee18f1f378ea3af3a1c33671","modified":1693725046165},{"_id":"source/journal/journal-2012-01-02.md","hash":"159e48d5a387bd0a7dc1a58f9342e324aa726312","modified":1693736922297},{"_id":"source/journal/journal-2013-08-07.md","hash":"62a1aeffc3b11fed6cc3de21166f855259e6f628","modified":1693725276597},{"_id":"source/journal/journal-2012-12-17.md","hash":"62ded9ffba8a0165f56cb909baf349208eb7a0c4","modified":1693725560272},{"_id":"source/images/aliyun-server-res/9C92FAF6-1284-4027-939A-C66FF14B0BAD.png","hash":"7a9b36d427cad43cd0fec8882f9c51e619bd75e4","modified":1694069943294},{"_id":"source/images/aliyun-server-res/E1035F5C-8438-4517-8DD5-5487B6B9A487.png","hash":"de88710c67e00d2d054ea46137eceff60989d415","modified":1694069943324},{"_id":"source/images/aliyun-server-res/1E5521D7-A26F-4767-B79F-8E245EB2DA90.png","hash":"d64af8d54b44d5236db148ecec018f9d57cbc33f","modified":1694069943289},{"_id":"source/images/aliyun-server-res/E2863A55-75F7-4242-99C2-3AF7792A0972.png","hash":"33385d5d1355c81abe81094d75c66b6b6fdf373b","modified":1694069943329},{"_id":"source/images/aliyun-server-res/FEB1DEDE-A737-4713-BD84-32AAF99E1220.png","hash":"cc29b1bed32de1ad54ee88c2466e3fc2272a8aa6","modified":1694069943336},{"_id":"source/images/data-structures/array-representation.jpeg","hash":"3780825acfb58839053532f626de23369a236c25","modified":1700813128084},{"_id":"source/images/data-structures/max-heap.jpeg","hash":"32cfe0cf1c3bf98ebe867e02a7c13f8c164d31f8","modified":1700813128114},{"_id":"source/images/data-structures/hash-table.jpeg","hash":"3bc45b97527ca3e0fa206d5cf4410f7cadde0f3a","modified":1700812829248},{"_id":"source/images/data-structures/linked-list.jpeg","hash":"1bb4b973dcbbc63172c1672cdb8e4db02fde3687","modified":1698740618679},{"_id":"source/images/data-structures/min-heap.jpeg","hash":"28622dce9436cda9aa4d758a889b0594c086bff6","modified":1700813128118},{"_id":"source/images/data-structures/queue.jpeg","hash":"43f367e6739999824e2d92a23c842adca006f66e","modified":1698740668018},{"_id":"source/images/data-structures/stack.jpeg","hash":"2a86b92522bfb1e485d55facc68c4bb83b6b10ec","modified":1698740898527},{"_id":"source/images/data-structures/doubly-linked-list.jpeg","hash":"fa10e8e99c7f3e0e70dbfdf576512a0e25f1dd10","modified":1698740640052},{"_id":"source/images/data-structures/binary-search-tree.jpg","hash":"f0b2a6604c16405b5692d6a15900caa69c1385df","modified":1702535728625},{"_id":"source/images/data-structures/tree.jpeg","hash":"27d3f735f546a3f5791af0437cc7a0f8ba469fee","modified":1702533858562},{"_id":"source/images/aliyun-server-res/37670519-FA8B-4062-BCFE-130FB5F41509.png","hash":"d98d801f2c5d6fca49160979421fe07e9f421533","modified":1694069943302},{"_id":"source/images/data-structures/collision-resolution.jpeg","hash":"e05bd78a425fca2eb9f0c195dc06ad06a53a9a2e","modified":1700812829242},{"_id":"source/images/data-structures/trie.jpg","hash":"555fd22340baf77e9491e2caab2770b4462b7d8d","modified":1702533651276},{"_id":"source/images/aliyun-server-res/948EED37-A2B2-4BB1-9B22-C58B5451604C.png","hash":"71ebd527807f3fc50a1f2e8e6389744e003618f3","modified":1694069943298},{"_id":"source/images/aliyun-server-res/F5AC47B0-C347-4D4C-940E-B178AF6E770C.png","hash":"990925aa01f8f1076480edf023135106d600899d","modified":1694069943333},{"_id":"source/images/aliyun-server-res/7B4DB7D5-2F36-4242-99E6-B959F73C28EE.png","hash":"a1ecd0e94541a130bb28bc8328585660931a7bc3","modified":1694069943292},{"_id":"source/images/aliyun-server-res/C52A3D7C-1B05-4EB1-8883-202ACBB12DE4.png","hash":"4218e4e4efe44aeeae532c7f234b1e7c50b1c98b","modified":1694069943317},{"_id":"node_modules/hexo-theme-next/_vendors.yml","hash":"7fa5fce5ae11760a636213044d42be17a47fbc0e","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/package.json","hash":"287b491c45d35075f57d3f8caae5f0937265c8aa","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/_config.yml","hash":"dae3faa04648aeb0fd91961843a15122dcc73299","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/README.md","hash":"7dfee02792f98c73ff0da7e8efc9a7c55ef52fa0","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/languages/bn.yml","hash":"9f791494afa263c3e31f14b8a5fa2996dfc834c0","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/languages/ar.yml","hash":"7d0f39e8684284a04bb9808521c87fecda8bd131","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/languages/de.yml","hash":"79b37df731c29665dee6cd7c90d278e1edfb6e24","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/languages/fa.yml","hash":"f3ffc444599f4ac92d62e9ed00a1490ebc277d70","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/languages/es.yml","hash":"dffc63ef42e1266b88e0acf08994fd17a9908d53","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/languages/eo.yml","hash":"e34bb33ae827bf2f0727088599a73bc64bdad1b0","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/languages/en.yml","hash":"ba0fd79a2b1d8db01a034180556061745965ff05","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/languages/id.yml","hash":"929df147f4f17d638b07de5fe52ca13e2549ab1c","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/languages/ja.yml","hash":"543222bfc516aab6c33e8534f807972ecb8943a9","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/languages/it.yml","hash":"16d716ecfd748def2f6486ef5a82d0ab7ceb4890","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/languages/ko.yml","hash":"d345a303310c8a5f4836c3683f3580f861ebd1b4","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/languages/nl.yml","hash":"3cb3687696635ec71b4ca40c5fc43b56acc8843e","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/languages/pt.yml","hash":"70de366e10ea584ba039d40d6b35ac97f93454ad","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/languages/fr.yml","hash":"44cd26479f503751329f6da2ed80cce1bbf18117","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/languages/ru.yml","hash":"c6d8de0ff7d8148d09993257cfd3b7aca755696c","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/languages/pt-BR.yml","hash":"76b8576ce228d540a16b1f0af5af2cce20923194","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/languages/si.yml","hash":"2d712eedf3f60d04d36c3108cf5a12e2a52e875c","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/languages/tr.yml","hash":"a57e4ed089b893a95f5e1ecff17ce625165f4d46","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/languages/tk.yml","hash":"511726054873f6f8d7ce0d2e803f6731de0ddbe7","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/languages/uk.yml","hash":"ff537047b4b4c3ca9a7b64fa7f428a9942751eeb","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/languages/zh-CN.yml","hash":"741d7efe0262c9cdc2c648014b55599665d90f6b","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/languages/zh-HK.yml","hash":"88ea50eeb9097ab4a87a44981a102d8594feb064","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/languages/zh-TW.yml","hash":"4695c87d6b81b3a23d16ad6513d9eaa925f8d8ad","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/languages/th.yml","hash":"6829e998b39f8f143e20b276bb1f62d95a29de58","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_layout.njk","hash":"fc0a45112f2dcfc2642404e8934ea32a793c3bd7","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/languages/vi.yml","hash":"7ebcba5e1128784195e4681dffc9d34c4e873fec","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/post.njk","hash":"0bfce9f133f501a9a4837257e3b862b3bbca15be","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/page.njk","hash":"b0660b2af0ac7d3fda14ca4d9f2c9e79ef06c6f9","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/docs/ru/README.md","hash":"ca3088a27b9890402ffb18c4b6c4bedaff8d575b","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/README.md","hash":"8ae85453051faa7ed3b332ee488ff5eea8ddaa08","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_macro/post.njk","hash":"65e9112fb7eb26d2880db624554a99aca028140b","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"12a6631617695504d5cf2a94b57d87bd331bef6f","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_macro/sidebar.njk","hash":"547c62ab14d9e05d2d9116db9048a677fbe1fb6d","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"abda600685ee972e1f6b7a2dcc56f13e2daa6263","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_partials/pagination.njk","hash":"bc719473ed5948ab6859449d60b8d36cfc1542b4","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_partials/widgets.njk","hash":"e7f988ecddb2159313699a00827a45eca5622bd4","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/scripts/events/index.js","hash":"bd9ea82376cd87df611ea3ae077875c7c595a3df","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/scripts/filters/post.js","hash":"fdc8a0af90035e89c3fcb754a0eb189b8951a2bc","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/scripts/filters/minify.js","hash":"447db39d17775b2bd18d8af9c9d65b7b8449f751","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_partials/footer.njk","hash":"6fca18ed4234cf54146c2b3b97b0a6a3606ab33d","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-paginator.js","hash":"e86c764b546e4fbb87970cabc4135a56f9ef9fe1","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"957241c28796ff352de7f4cffba7bb289b043586","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/scripts/helpers/engine.js","hash":"d292b78485e8e8055712b0ed6de7cf559c5fbdcd","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-config.js","hash":"ead37e9167b682f1fa34b5401c3050e18c7ee4a3","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-url.js","hash":"6281d47c1de98eb38f3aa0f6df29bbb19d412173","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/scripts/tags/group-pictures.js","hash":"9ed799c329abf830f623689d7e136991256a24ca","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_third-party/addtoany.njk","hash":"ef64c6bfb8540cd874701236b9be47db2496e98e","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/scripts/tags/index.js","hash":"1f6aba7820f1fb58b61969485148db21846e1aa9","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/scripts/tags/wavedrom.js","hash":"b44dfeeb58b41945d469141787f3dbce4b117d08","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_third-party/index.njk","hash":"dfd7cdd6ba89f8c3deabc27726c7a350cadafd11","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_mixins.styl","hash":"83647a6207333b9609ba90b0946b3fa9548e6381","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","hash":"921a58577f411cf4eb5cfd66db0a241f8f88578c","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","hash":"dadc81256afb127b77eac6763d5ee0ec9c77f0a3","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","hash":"770d63c26f22705311028a36b52e999cc8a2da82","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","hash":"b03ba78c6916ad2f390d55bc1bc18fafb64b0ebf","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","hash":"f5db08098c7b7942bd5d18203751d64c2110fab0","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"8da52a144060db1a0a088ccb2e6cc8376d1fce70","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","hash":"64cea5c05465b0809170f34f19a28a4b666991a8","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/brand.njk","hash":"dd9c4c03e99dfde0dfb8edefcb2c933f2f560efc","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head.njk","hash":"5388b157bba4a40b9312f4a45c6678974ccf0837","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"bfff923526d6800218f08dba6ce0bbf5c17755fd","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"c1e33b4889f75acc490af3c8bde0ec56c518ff41","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"e8b8a7c41e9ec612d0c0c73419529d55d1c16256","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-share.njk","hash":"16696990e4ce65fc8db18c4635082a5d5d06ff07","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/config.js","hash":"9ec51eb61f7fee612ffc5252f489003a0fa301fc","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/utils.js","hash":"6853e5433e3eaa19ea43fa20b08d956ba4cec4ac","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/vendors.js","hash":"464db1e7182e5b9cdbd32e8b5368d5e683b1d9c7","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"5798cfc8f63665031dd3e01debed051628cec319","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"e0986db00a0201dd3c60570f964829c84ba5bc68","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"a600a98e7436edeb31e291abca359885567df3c9","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"bc5708e38b6070dff0cab6bf9480971017ce4dda","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"a5b8297c2c383124dd6a56e256ecc0c0dcf489be","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/matomo.njk","hash":"4e89648a8ec8194c5823064cbca39c938a799006","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"f900306497b133e8b098bd9f4b96b93d1d96c185","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/umami.njk","hash":"3343750682fbd8535e50f8129be3003ad26015b4","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/plausible.njk","hash":"ef9f2bb7110507f1c4336800af9157d5fa9765bd","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"9dc00fcb0a05899f048eace9f9160b78956655d5","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"1ebf658690468ea197bdd0416eb7cfa4bd0b083a","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/wavedrom.njk","hash":"02202bf563fb5eedde2ccad4d6c5b9109d30a703","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Mist.styl","hash":"a1418c9dc8c0f1a0ad4ded0f4627c45bf0db1a10","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"48f4f277946a168d0db1ea02804e85c22ca2c7db","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","hash":"ba7ba2c129d1f240c6a22cec3e53f3f22af64b6b","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"7664491542046df9a3887cf40a06e00c0b4086a9","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/index.styl","hash":"2298e521253b3bf376a2412271bc2a7d305051f3","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"1dbf2c339adcd27026c3a2ded32ee91ce08cea26","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_variables/base.styl","hash":"c4fc4e862d09221265ab1466085f057be2ad2e4d","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"f4228c759db4a650c8d38745c2edd1dc83c45687","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"ac2dc0ce9c775a83ef7132ae957b54539366ac9c","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"782ee1fc5e669d3ddbfeb82b73ad7fe561f1a4fb","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"26a0cba1eee5de45a45a5e14e17707f905390512","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"91dbf3ca5c3a613d4e30618c120da535bf2d0336","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"dafc6d23c80d6fe3e55a7711e94210d2479b629a","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"fa4fd8f76464e214fb7318f325b13c2b62f4b478","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"485d23ccb42c0d0c8ead7ea8930dd3e06d79a285","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"fb550935d374e0bdf1097fce187337dc05cad3e1","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"6569a6640f79d247a8235b3914772c0e2f99ead2","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"82cda756f5b7092df2eee6641b9786df71623bdb","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"9dfe853c901bdc52fc950bacdf15484dbb9bf140","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"547c0b5cd5e7ea10d21863d13a6b16579a49396c","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"3fbfab591f280e2e7f3b0265901c93bc4bd137ed","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"6bf821310342c5b87a631873e7650a475a0765f1","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"54d12e2c5d9982f7b9e5b23be5133954a8514e9d","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"8f094c4ac17e2ab45569b12d157747f9c7333c12","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/disqusjs.styl","hash":"877a537d5b95beb048142e4fdee6f17e6ef9c7bb","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"e72799ce3f9b79753e365b2f8c8ef6c310668d4a","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"4e967702cf4c637132346bc74ec8854426f1a68c","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"7369928305330c73ae0b3f063a681a8384d8fde4","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"1ecfd64507954810b07a9d21fb5305b5378feda0","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"56d5b7ff73f466c9ae54f7204ae899281295d749","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"098d4bd034e986fcf7e443eac4fc2193935461b7","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"11497388f124bfbb4001495a67d3629a9f618405","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"1191f1bfa5c43e54be8e5b3cc0d802984e161747","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"ebfba158a0a4af3d1dabcacbc58986664de52140","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"04cf4a69537fc14d3b8904f965d283356853847f","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"da5e88f8debd5ac8d7af5c6ba6240df66104955f","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"6e0d0796ef7fbbb62ffdfb448753a850de82c74f","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"bbbc40b03cb299d2a6a568f329b2ce98e1cdc430","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"a851e9d5aefcd027c95eeb323860b6da70f202d1","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/related-posts.styl","hash":"b05908f04ef95f2d91e6eba89b12411c378d050f","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"0847400d8579b0a2dd1bf662c78954c10adf2680","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"46eece42510c2c89bb9209afb0262ad76a4b0b36","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"24752d145c6fb8f5344dca9c7b9640839c02e009","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"c6a27beb3f741211a14576026f3b4cfc44cc6407","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"c2e354a565c8c1b32bd0ceacc972b17982758b67","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f634f94828620e88c3f5a8db56f7944f6ba232b0","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"138f78147bc6bd6005f329ada34dc79b7625542d","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/fold.styl","hash":"42a0b65491ad85438596b3fe0b7f23973e4cef34","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"9a7c71560fbdc936ad4e736fe15063ea3e8a644b","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"22cd37bd5df9972d5074710896aba4424ad5161c","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"98d4c20aff0f0fcfe1824017fb06ab21ef0d218e","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"33dd6ad015dde65fd46f34961655442e8e82b52e","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1693576543207},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/wavedrom.styl","hash":"af113411ad9cca7674177be36af8dd399680834d","modified":1693576543207},{"_id":"source/images/css-flip-res/css-flip.gif","hash":"3b3fa00781cf32cd04c61767254e6d45380ff46c","modified":1695345918394},{"_id":"public/search.xml","hash":"b4009c105900033844c6eab7be3f0f415d9ac90f","modified":1702541733360},{"_id":"public/about/index.html","hash":"8861d255e8a22bd0b557d3f1efa5fea1f016492e","modified":1702541733360},{"_id":"public/tags/index.html","hash":"b25c34fa546dcffbad2e456d041534155666cdd8","modified":1702541733360},{"_id":"public/categories/index.html","hash":"90fa39689133a0ec7c6a5ab3a7ea00fe34bd4d61","modified":1702541733360},{"_id":"public/journal/journal-2011-11-18.html","hash":"3d62aad49bb966edac77054ba5c0ce9e5e3aa49a","modified":1702541733360},{"_id":"public/journal/index.html","hash":"a9a60fe56098ad9111ef281a0dfe4e0ed6bb8990","modified":1702541733360},{"_id":"public/journal/journal-2012-12-17.html","hash":"0ea05421dc0b26fc924fd368504ea864edfc3b05","modified":1702541733360},{"_id":"public/journal/journal-2012-01-02.html","hash":"5f277fedc776e04de58887868bf6db5b7f7a8069","modified":1702541733360},{"_id":"public/categories/前端/index.html","hash":"7d6cff4783c1cdc65020841f84793089af5de96a","modified":1702541733360},{"_id":"public/categories/iOS/index.html","hash":"50ef41d6ed3eb202f0ee494c6220e812e4db4762","modified":1702541733360},{"_id":"public/categories/其它技术/index.html","hash":"1e650dd9271fd9a69ff5d2257fe93fb8472344a0","modified":1702541733360},{"_id":"public/tags/server/index.html","hash":"98d8be7474e80c859f127f656080ab3289a841c5","modified":1702541733360},{"_id":"public/tags/hexo/index.html","hash":"fd42480d57ca2a715690dec9df369f9ae6e95e3c","modified":1702541733360},{"_id":"public/tags/WKWebView/index.html","hash":"43f4ab8cc89a3bbcd32e097181ff9883d641280c","modified":1702541733360},{"_id":"public/tags/docker/index.html","hash":"7627f707ea609c78ce90f7bb4bf26f26e5461d88","modified":1702541733360},{"_id":"public/tags/express/index.html","hash":"6cf109f3e6c195b8875d22ec930e493000bedf36","modified":1702541733360},{"_id":"public/tags/css/index.html","hash":"581c7ff1ee252d94869457eff6cc4ba1923baf78","modified":1702541733360},{"_id":"public/tags/javascript/index.html","hash":"bcc3b557a4aa2361c0736458f62b95a48fab0d12","modified":1702541733360},{"_id":"public/archives/page/3/index.html","hash":"a5afb5e22814d8b851857feabfe948ada4acf4f3","modified":1702541733360},{"_id":"public/archives/2023/page/3/index.html","hash":"3219dc0760a56f2ba21d368119eb01ff772438ae","modified":1702541733360},{"_id":"public/archives/2023/10/index.html","hash":"817df31399aa0fa8be3aee96a6087d0b8fbfe671","modified":1702541733360},{"_id":"public/journal/journal-2011-08-06.html","hash":"1f89b09f942b011a6441fa70fa55ce4cd0fcb613","modified":1702541733360},{"_id":"public/journal/journal-2011-10-05.html","hash":"effc89e76e9a494a8fda82cf3f0989935caf5506","modified":1702541733360},{"_id":"public/journal/journal-2011-10-25.html","hash":"39ae36893029c54fbd4e1c2d1c1cad4860fd1bc3","modified":1702541733360},{"_id":"public/journal/journal-2011-12-12.html","hash":"84b0b219566f3aab9c4cbab8f8d2913b0733d996","modified":1702541733360},{"_id":"public/journal/journal-2011-12-25.html","hash":"7254d1ecf5b34993b77d20b97490e3dfb5a914d3","modified":1702541733360},{"_id":"public/journal/journal-2012-06-16.html","hash":"5d47b4a2fc110244b1e52d53345ddd8ce9aff4f8","modified":1702541733360},{"_id":"public/journal/journal-2013-01-07.html","hash":"0685e995e8ee3020a822296e52e7ff715ec67beb","modified":1702541733360},{"_id":"public/journal/journal-2013-08-07.html","hash":"bfe260404d6e04aa91ccf09db080f2bdc7598530","modified":1702541733360},{"_id":"public/journal/journal-2012-01-21.html","hash":"e93c45596e05095ee044cdb52636588edcea0a17","modified":1702541733360},{"_id":"public/journal/journal-2014-04-20.html","hash":"441f5789a8bfa20c8198b9de18ee1128ad136973","modified":1702541733360},{"_id":"public/journal/journal-2014-08-12.html","hash":"8d82f177f154bd5441097bd6fbf50c3b832da696","modified":1702541733360},{"_id":"public/journal/journal-2012-09-18.html","hash":"ddef37ecb5f7f8b3883d619c51052fc878f7be7c","modified":1702541733360},{"_id":"public/2023/12/14/data-structures-014-SegmentTree/index.html","hash":"83184a9d503b2e86340dc59b44d08fa2d874342b","modified":1702541733360},{"_id":"public/2023/12/14/data-structures-013-RedBlackTree/index.html","hash":"f098430e89382e64a1f4ad38e3707ccb595e39fa","modified":1702541733360},{"_id":"public/2023/12/14/data-structures-012-AvlTree/index.html","hash":"00878b9b69ec6180b89f0690e61b16a9bdd7c706","modified":1702541733360},{"_id":"public/2023/12/14/data-structures-015-FenwickTree/index.html","hash":"964d15a0162677b4532c36af3a703d939ccd2beb","modified":1702541733360},{"_id":"public/2023/12/14/data-structures-010-Tree/index.html","hash":"6da3decd1b0de2585be5960767b58984c0211047","modified":1702541733360},{"_id":"public/2023/12/14/data-structures-011-BinarySearchTree/index.html","hash":"861efe078facd6f797eadc3192a8918ed2ec88d9","modified":1702541733360},{"_id":"public/2023/12/14/data-structures-009-Trie/index.html","hash":"9ac9b3a63790bdceaf10242e951e18a48ee777c4","modified":1702541733360},{"_id":"public/2023/12/14/data-structures-008-PriorityQueue/index.html","hash":"5644fbc2dee35871e6223a45413692f9ac683e6c","modified":1702541733360},{"_id":"public/2023/11/24/data-structures-007-Heap/index.html","hash":"76b2302b0ace00ba965b15afebc4884e666f7487","modified":1702541733360},{"_id":"public/2023/11/24/data-structures-006-HashTable/index.html","hash":"6bde498987dcea2d4c0a4960cebbce3024c85bd1","modified":1702541733360},{"_id":"public/2023/11/02/data-structures-005-Stack/index.html","hash":"415b83e37eca516d918bce9c583a7bf0b11bc163","modified":1702541733360},{"_id":"public/2023/11/01/data-structures-004-queue/index.html","hash":"757e7d03892a9ba15102a651213b52ac24f2f5a6","modified":1702541733360},{"_id":"public/2023/10/31/data-structures-003-DoublyLinkedList/index.html","hash":"20e476ac9d125db03263c7e792801ec41d578764","modified":1702541733360},{"_id":"public/2023/10/29/data-structures-002-LinkedList/index.html","hash":"b1961f84a522b1345c898984d544c37a4b58b6e0","modified":1702541733360},{"_id":"public/2023/10/29/data-structures-001-comparator/index.html","hash":"79f4d71e1a3b0432e69a0aa96252217c9ee71a17","modified":1702541733360},{"_id":"public/2023/09/22/css-flip/index.html","hash":"3dbea8119f3dd65fc17b08499b9f61db4c032eda","modified":1702541733360},{"_id":"public/2023/09/18/express-docker/index.html","hash":"346fcf1d2917d81bc92daf71c61081900cf78750","modified":1702541733360},{"_id":"public/2023/09/06/WebViewJavascriptBridge-use/index.html","hash":"bf16955aa3268cf0953432adac62db0d44106340","modified":1702541733360},{"_id":"public/2023/09/05/wkwebview-back/index.html","hash":"f443d4f104c5ae29e31d542b48496855bc344290","modified":1702541733360},{"_id":"public/2023/09/01/hexo-use/index.html","hash":"96c5add895c2a44d91945b0108ec8718751e141a","modified":1702541733360},{"_id":"public/2023/09/07/aliyun-server/index.html","hash":"bb87213a595933d34a19e634195185d64528e10b","modified":1702541733360},{"_id":"public/categories/数据结构与算法/index.html","hash":"d82077520b0493e173ec4e0fb1216754750d3c85","modified":1702541733360},{"_id":"public/categories/数据结构与算法/page/2/index.html","hash":"c8c6324981662e1b2334333d2419cd5d84c4b5ba","modified":1702541733360},{"_id":"public/tags/data-structures/index.html","hash":"e92098326d6bdf0839b2ce36ed9ecc42df8fe6e7","modified":1702541733360},{"_id":"public/tags/data-structures/page/2/index.html","hash":"ea752c207e48ef5d12fdc8197952ffb46c11f28c","modified":1702541733360},{"_id":"public/archives/index.html","hash":"56351ee36f3e5ada1898bfdfba51fcdc498c2780","modified":1702541733360},{"_id":"public/archives/page/2/index.html","hash":"40e157bdc2b23606cce660adf3ba1a83c88abaca","modified":1702541733360},{"_id":"public/archives/2023/index.html","hash":"0f2ef9bf0b5f9ad73bd011b6bfec1cfb075fdd31","modified":1702541733360},{"_id":"public/archives/2023/page/2/index.html","hash":"97fdc4312a350bb40a70eb0f4de95a6e1bf13309","modified":1702541733360},{"_id":"public/archives/2023/09/index.html","hash":"c842d25806a048873d9a9f20aaa62d80aa2d99f6","modified":1702541733360},{"_id":"public/archives/2023/11/index.html","hash":"2057c218fe8ba5cabe2c075fbfeff89ca305a99e","modified":1702541733360},{"_id":"public/archives/2023/12/index.html","hash":"ef463a70fb035686fcbe1a6b8c5879c4e2d77b32","modified":1702541733360},{"_id":"public/index.html","hash":"1636210aedc58e03538dd558628132accc9a1ff6","modified":1702541733360},{"_id":"public/page/2/index.html","hash":"407a47f57284f0ccd0654189f91f973cec839a6c","modified":1702541733360},{"_id":"public/page/3/index.html","hash":"d777b01ea755b2689c4b8fc58c201e7a0cf6bbdd","modified":1702541733360},{"_id":"public/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1702541733360},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1702541733360},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1702541733360},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1702541733360},{"_id":"public/images/beian.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1702541733360},{"_id":"public/images/avatar.jpeg","hash":"80a6c43aef8f2a82237991c8a57528d1ab7c1384","modified":1702541733360},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1702541733360},{"_id":"public/images/aliyun-server-res/AFB10CB6-2C19-4640-A395-F5D0E56ECBB0.png","hash":"86d33ad5f903df4cd63949a693a493bac7d02e53","modified":1702541733360},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1702541733360},{"_id":"public/images/aliyun-server-res/9C92FAF6-1284-4027-939A-C66FF14B0BAD.png","hash":"7a9b36d427cad43cd0fec8882f9c51e619bd75e4","modified":1702541733360},{"_id":"public/images/aliyun-server-res/E1035F5C-8438-4517-8DD5-5487B6B9A487.png","hash":"de88710c67e00d2d054ea46137eceff60989d415","modified":1702541733360},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1702541733360},{"_id":"public/js/pjax.js","hash":"b03ba78c6916ad2f390d55bc1bc18fafb64b0ebf","modified":1702541733360},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1702541733360},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1702541733360},{"_id":"public/css/noscript.css","hash":"4cd5301e478e0e0d4b176740ec314087ec5cb707","modified":1702541733360},{"_id":"public/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1702541733360},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1702541733360},{"_id":"public/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1702541733360},{"_id":"public/js/motion.js","hash":"770d63c26f22705311028a36b52e999cc8a2da82","modified":1702541733360},{"_id":"public/js/next-boot.js","hash":"f5db08098c7b7942bd5d18203751d64c2110fab0","modified":1702541733360},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1702541733360},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1702541733360},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1702541733360},{"_id":"public/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1702541733360},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1702541733360},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1702541733360},{"_id":"public/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1702541733360},{"_id":"public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1702541733360},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1702541733360},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1702541733360},{"_id":"public/js/schemes/muse.js","hash":"ba7ba2c129d1f240c6a22cec3e53f3f22af64b6b","modified":1702541733360},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1702541733360},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1702541733360},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1702541733360},{"_id":"public/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1702541733360},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1702541733360},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1702541733360},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1702541733360},{"_id":"public/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1702541733360},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1702541733360},{"_id":"public/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1702541733360},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1702541733360},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1702541733360},{"_id":"public/js/third-party/tags/mermaid.js","hash":"6bf821310342c5b87a631873e7650a475a0765f1","modified":1702541733360},{"_id":"public/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1702541733360},{"_id":"public/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1702541733360},{"_id":"public/css/main.css","hash":"2f76e9e76284cdcbd0cab8926683bceee566b078","modified":1702541733360},{"_id":"public/js/utils.js","hash":"64cea5c05465b0809170f34f19a28a4b666991a8","modified":1702541733360},{"_id":"public/images/aliyun-server-res/E2863A55-75F7-4242-99C2-3AF7792A0972.png","hash":"33385d5d1355c81abe81094d75c66b6b6fdf373b","modified":1702541733360},{"_id":"public/images/aliyun-server-res/1E5521D7-A26F-4767-B79F-8E245EB2DA90.png","hash":"d64af8d54b44d5236db148ecec018f9d57cbc33f","modified":1702541733360},{"_id":"public/images/aliyun-server-res/FEB1DEDE-A737-4713-BD84-32AAF99E1220.png","hash":"cc29b1bed32de1ad54ee88c2466e3fc2272a8aa6","modified":1702541733360},{"_id":"public/images/data-structures/array-representation.jpeg","hash":"3780825acfb58839053532f626de23369a236c25","modified":1702541733360},{"_id":"public/images/data-structures/hash-table.jpeg","hash":"3bc45b97527ca3e0fa206d5cf4410f7cadde0f3a","modified":1702541733360},{"_id":"public/images/data-structures/queue.jpeg","hash":"43f367e6739999824e2d92a23c842adca006f66e","modified":1702541733360},{"_id":"public/images/data-structures/max-heap.jpeg","hash":"32cfe0cf1c3bf98ebe867e02a7c13f8c164d31f8","modified":1702541733360},{"_id":"public/images/data-structures/linked-list.jpeg","hash":"1bb4b973dcbbc63172c1672cdb8e4db02fde3687","modified":1702541733360},{"_id":"public/images/data-structures/stack.jpeg","hash":"2a86b92522bfb1e485d55facc68c4bb83b6b10ec","modified":1702541733360},{"_id":"public/images/data-structures/min-heap.jpeg","hash":"28622dce9436cda9aa4d758a889b0594c086bff6","modified":1702541733360},{"_id":"public/images/data-structures/binary-search-tree.jpg","hash":"f0b2a6604c16405b5692d6a15900caa69c1385df","modified":1702541733360},{"_id":"public/images/data-structures/doubly-linked-list.jpeg","hash":"fa10e8e99c7f3e0e70dbfdf576512a0e25f1dd10","modified":1702541733360},{"_id":"public/images/data-structures/tree.jpeg","hash":"27d3f735f546a3f5791af0437cc7a0f8ba469fee","modified":1702541733360},{"_id":"public/images/aliyun-server-res/37670519-FA8B-4062-BCFE-130FB5F41509.png","hash":"d98d801f2c5d6fca49160979421fe07e9f421533","modified":1702541733360},{"_id":"public/images/data-structures/collision-resolution.jpeg","hash":"e05bd78a425fca2eb9f0c195dc06ad06a53a9a2e","modified":1702541733360},{"_id":"public/images/data-structures/trie.jpg","hash":"555fd22340baf77e9491e2caab2770b4462b7d8d","modified":1702541733360},{"_id":"public/images/aliyun-server-res/948EED37-A2B2-4BB1-9B22-C58B5451604C.png","hash":"71ebd527807f3fc50a1f2e8e6389744e003618f3","modified":1702541733360},{"_id":"public/images/aliyun-server-res/F5AC47B0-C347-4D4C-940E-B178AF6E770C.png","hash":"990925aa01f8f1076480edf023135106d600899d","modified":1702541733360},{"_id":"public/images/aliyun-server-res/7B4DB7D5-2F36-4242-99E6-B959F73C28EE.png","hash":"a1ecd0e94541a130bb28bc8328585660931a7bc3","modified":1702541733360},{"_id":"public/images/aliyun-server-res/C52A3D7C-1B05-4EB1-8883-202ACBB12DE4.png","hash":"4218e4e4efe44aeeae532c7f234b1e7c50b1c98b","modified":1702541733360},{"_id":"public/images/css-flip-res/css-flip.gif","hash":"3b3fa00781cf32cd04c61767254e6d45380ff46c","modified":1702541733360}],"Category":[{"name":"前端","_id":"clq4xe1d50007tz2h9ad0dcd6"},{"name":"数据结构与算法","_id":"clq4xe1d6000gtz2h0rshftt5"},{"name":"iOS","_id":"clq4xe1d9000vtz2hc2deh1p9"},{"name":"其它技术","_id":"clq4xe1df0029tz2hatr20u73"}],"Data":[],"Page":[{"title":"关于我","date":"2023-09-02T08:04:00.000Z","_content":"\n喜欢阅读、音乐、代码.\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2023-09-02 16:04:00\n---\n\n喜欢阅读、音乐、代码.\n","updated":"2023-09-02T08:06:35.466Z","path":"about/index.html","comments":1,"layout":"page","_id":"clq4xe1d00000tz2h2jst4f6y","content":"<p>喜欢阅读、音乐、代码.</p>\n","site":{"data":{}},"related_posts":[],"length":8,"excerpt":"","more":"<p>喜欢阅读、音乐、代码.</p>\n"},{"title":"tags","date":"2023-09-02T07:50:52.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2023-09-02 15:50:52\ntype: \"tags\"\n---\n","updated":"2023-09-02T07:51:11.872Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clq4xe1d30002tz2h4w97emhm","content":"","site":{"data":{}},"related_posts":[],"length":0,"excerpt":"","more":""},{"title":"分类","date":"2023-09-02T07:36:39.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2023-09-02 15:36:39\ntype: \"categories\"\n---\n","updated":"2023-09-02T07:41:05.802Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clq4xe1d40005tz2hf5iqfbuw","content":"","site":{"data":{}},"related_posts":[],"length":0,"excerpt":"","more":""},{"title":"日志-2011-08-06","date":"2011-08-06T11:32:48.000Z","tags":null,"categories":["日志","journal"],"_content":"\n（因徘徊在梦与醒的边缘，故一下文字纯属虚构，无意识，无逻辑，不解释）。有人说：“上帝给我们的每一天都蕴含着浓浓的暗示，只是常常被我们错过而已。”今天，这个特殊又不特殊的日子，究竟暗示着什么？我本不想错过，可那神秘的面纱，在这个伸手不见五指的黑夜，散发着一种怪异的气息，思维被窒息，或许当黎明到来之时，便是黑暗的末日吧，神秘的面纱究竟包裹着什么呢？面纱会不会被清晨的第一缕阳光蒸发呢？可那样又有什么意义呢？毕竟那以是第二天了，昨天的暗示在今天来临之时就烟消云散了吧，今天又有着今天的暗示，明天又会继续，我们总是跟不上时间的步伐，因而会错过那么多本可以不错过的暗示吧。时间，是我无法理解的东西，就像灵魂一般，怪怪的，我甚至感觉世上应该没有什么可以去衡量时间的，像什么时钟之类的，都是那些保守者用来规矩人类的工具，于是我们从出生以来就被这些用来衡量时间的工具禁锢了一般，没有了自己对时间的主观意识，我们很难逃出保留在脑海里的固有观念，那就像一张巨大的魔爪，死死地牢笼着我们的每一根神经。越想越乱！不想了，睡觉！\n","source":"journal/journal-2011-08-06.md","raw":"---\ntitle: 日志-2011-08-06\ndate: 2011-08-06 19:32:48\ntags:\ncategories:\n  - 日志\n  - journal\n---\n\n（因徘徊在梦与醒的边缘，故一下文字纯属虚构，无意识，无逻辑，不解释）。有人说：“上帝给我们的每一天都蕴含着浓浓的暗示，只是常常被我们错过而已。”今天，这个特殊又不特殊的日子，究竟暗示着什么？我本不想错过，可那神秘的面纱，在这个伸手不见五指的黑夜，散发着一种怪异的气息，思维被窒息，或许当黎明到来之时，便是黑暗的末日吧，神秘的面纱究竟包裹着什么呢？面纱会不会被清晨的第一缕阳光蒸发呢？可那样又有什么意义呢？毕竟那以是第二天了，昨天的暗示在今天来临之时就烟消云散了吧，今天又有着今天的暗示，明天又会继续，我们总是跟不上时间的步伐，因而会错过那么多本可以不错过的暗示吧。时间，是我无法理解的东西，就像灵魂一般，怪怪的，我甚至感觉世上应该没有什么可以去衡量时间的，像什么时钟之类的，都是那些保守者用来规矩人类的工具，于是我们从出生以来就被这些用来衡量时间的工具禁锢了一般，没有了自己对时间的主观意识，我们很难逃出保留在脑海里的固有观念，那就像一张巨大的魔爪，死死地牢笼着我们的每一根神经。越想越乱！不想了，睡觉！\n","updated":"2023-09-03T11:48:31.263Z","path":"journal/journal-2011-08-06.html","comments":1,"layout":"page","_id":"clq4xe1d50008tz2hf0jtd8ax","content":"<p>（因徘徊在梦与醒的边缘，故一下文字纯属虚构，无意识，无逻辑，不解释）。有人说：“上帝给我们的每一天都蕴含着浓浓的暗示，只是常常被我们错过而已。”今天，这个特殊又不特殊的日子，究竟暗示着什么？我本不想错过，可那神秘的面纱，在这个伸手不见五指的黑夜，散发着一种怪异的气息，思维被窒息，或许当黎明到来之时，便是黑暗的末日吧，神秘的面纱究竟包裹着什么呢？面纱会不会被清晨的第一缕阳光蒸发呢？可那样又有什么意义呢？毕竟那以是第二天了，昨天的暗示在今天来临之时就烟消云散了吧，今天又有着今天的暗示，明天又会继续，我们总是跟不上时间的步伐，因而会错过那么多本可以不错过的暗示吧。时间，是我无法理解的东西，就像灵魂一般，怪怪的，我甚至感觉世上应该没有什么可以去衡量时间的，像什么时钟之类的，都是那些保守者用来规矩人类的工具，于是我们从出生以来就被这些用来衡量时间的工具禁锢了一般，没有了自己对时间的主观意识，我们很难逃出保留在脑海里的固有观念，那就像一张巨大的魔爪，死死地牢笼着我们的每一根神经。越想越乱！不想了，睡觉！</p>\n","site":{"data":{}},"related_posts":[],"length":406,"excerpt":"","more":"<p>（因徘徊在梦与醒的边缘，故一下文字纯属虚构，无意识，无逻辑，不解释）。有人说：“上帝给我们的每一天都蕴含着浓浓的暗示，只是常常被我们错过而已。”今天，这个特殊又不特殊的日子，究竟暗示着什么？我本不想错过，可那神秘的面纱，在这个伸手不见五指的黑夜，散发着一种怪异的气息，思维被窒息，或许当黎明到来之时，便是黑暗的末日吧，神秘的面纱究竟包裹着什么呢？面纱会不会被清晨的第一缕阳光蒸发呢？可那样又有什么意义呢？毕竟那以是第二天了，昨天的暗示在今天来临之时就烟消云散了吧，今天又有着今天的暗示，明天又会继续，我们总是跟不上时间的步伐，因而会错过那么多本可以不错过的暗示吧。时间，是我无法理解的东西，就像灵魂一般，怪怪的，我甚至感觉世上应该没有什么可以去衡量时间的，像什么时钟之类的，都是那些保守者用来规矩人类的工具，于是我们从出生以来就被这些用来衡量时间的工具禁锢了一般，没有了自己对时间的主观意识，我们很难逃出保留在脑海里的固有观念，那就像一张巨大的魔爪，死死地牢笼着我们的每一根神经。越想越乱！不想了，睡觉！</p>\n"},{"title":"日志-2011-10-05","date":"2011-10-05T11:31:04.000Z","tags":null,"categories":["日志"],"_content":"\n这是一个特殊的日子，岁岁重阳，今又重阳，淡不去的风俗，散不掉的情愫，在这一天尽情地展露。就在几十年前，地下的人还在地上，地上的人还在未来；再过几十年，地上的人就在地下，未来的人来到了地上。而几十年只不过亿万光年里的一个瞬间，就像你刚刚从我的眼前走过，一分钟之后，谁都不记得彼此。但就在那一分钟里，我的眼里有你的身影，那一分钟的记忆，就是我人生里的一个瞬间。人生如斯，算来一梦浮生。但即使如此，我还是希望那是一个好梦，一个有意义的梦。时间如过眼云烟，稍纵即逝，为了不留遗憾，必须有所改变。将昨天的懒惰幻化成明天的勤奋，把昨天的迷茫幻化成明天的坚定…………\n","source":"journal/journal-2011-10-05.md","raw":"---\ntitle: 日志-2011-10-05\ndate: 2011-10-05 19:31:04\ntags:\ncategories:\n  - 日志\n---\n\n这是一个特殊的日子，岁岁重阳，今又重阳，淡不去的风俗，散不掉的情愫，在这一天尽情地展露。就在几十年前，地下的人还在地上，地上的人还在未来；再过几十年，地上的人就在地下，未来的人来到了地上。而几十年只不过亿万光年里的一个瞬间，就像你刚刚从我的眼前走过，一分钟之后，谁都不记得彼此。但就在那一分钟里，我的眼里有你的身影，那一分钟的记忆，就是我人生里的一个瞬间。人生如斯，算来一梦浮生。但即使如此，我还是希望那是一个好梦，一个有意义的梦。时间如过眼云烟，稍纵即逝，为了不留遗憾，必须有所改变。将昨天的懒惰幻化成明天的勤奋，把昨天的迷茫幻化成明天的坚定…………\n","updated":"2023-09-03T11:31:24.019Z","path":"journal/journal-2011-10-05.html","comments":1,"layout":"page","_id":"clq4xe1d6000atz2h16412zwg","content":"<p>这是一个特殊的日子，岁岁重阳，今又重阳，淡不去的风俗，散不掉的情愫，在这一天尽情地展露。就在几十年前，地下的人还在地上，地上的人还在未来；再过几十年，地上的人就在地下，未来的人来到了地上。而几十年只不过亿万光年里的一个瞬间，就像你刚刚从我的眼前走过，一分钟之后，谁都不记得彼此。但就在那一分钟里，我的眼里有你的身影，那一分钟的记忆，就是我人生里的一个瞬间。人生如斯，算来一梦浮生。但即使如此，我还是希望那是一个好梦，一个有意义的梦。时间如过眼云烟，稍纵即逝，为了不留遗憾，必须有所改变。将昨天的懒惰幻化成明天的勤奋，把昨天的迷茫幻化成明天的坚定…………</p>\n","site":{"data":{}},"related_posts":[],"length":242,"excerpt":"","more":"<p>这是一个特殊的日子，岁岁重阳，今又重阳，淡不去的风俗，散不掉的情愫，在这一天尽情地展露。就在几十年前，地下的人还在地上，地上的人还在未来；再过几十年，地上的人就在地下，未来的人来到了地上。而几十年只不过亿万光年里的一个瞬间，就像你刚刚从我的眼前走过，一分钟之后，谁都不记得彼此。但就在那一分钟里，我的眼里有你的身影，那一分钟的记忆，就是我人生里的一个瞬间。人生如斯，算来一梦浮生。但即使如此，我还是希望那是一个好梦，一个有意义的梦。时间如过眼云烟，稍纵即逝，为了不留遗憾，必须有所改变。将昨天的懒惰幻化成明天的勤奋，把昨天的迷茫幻化成明天的坚定…………</p>\n"},{"title":"日志-2011-10-25","date":"2011-10-25T11:29:15.000Z","tags":null,"categories":["日志"],"_content":"\n清晨，风凉，枫叶丹，霜花零散。也许这样的季节，才能弥补这个世界的清静。远离喧豗的地方，才是思考的殿堂。昨夜，看了很久，一个陌生人的日志，想了很多。首先，我愿意花两个小时的时间去感受别人的感情经历和心思，而且是一个与我无关的人，我想从某些人的角度看，我确实很无聊，或许是相当无聊。\n\n<!-- more -->\n\n可我不这样认为，在别人的故事里，我看到了另外一个世界，世界有点大，还是用梦来表示合理点，因为在这个感觉里，和梦境一样翻滚着朦胧，只能想象一个轮廓，却不能真正遇见。有这样的梦，是一种幸运。在别人的世界里，虽然找不到自己的身影，却在自己的幻梦里，可以发现别人的脚印。其次，别人的故事里，有那么多感情的纠葛，忧伤，欣喜，失落，孤寂……而转念一想，自己的故事，从高中之后就那么地单调，乏味。于是，我觉得我错过了一种感情。但在那四年里，唯有游戏和学习在有生命的活着，于是，时间的雨露只够维持他们的生长，其他的种子，也只能被我遗落，但在未来，我会慢慢拾起，因为那些必不可少。我不后悔我走过的路，因为都是值得的。突然有一种感想：生活很充实，感情很空虚！呵呵。最后，我觉得简单是一种快乐，因为我很少悲伤；复杂才是现实，因为我脱离现实很久了；原来，我只是个孩子……\n","source":"journal/journal-2011-10-25.md","raw":"---\ntitle: 日志-2011-10-25\ndate: 2011-10-25 19:29:15\ntags:\ncategories:\n  - 日志\n---\n\n清晨，风凉，枫叶丹，霜花零散。也许这样的季节，才能弥补这个世界的清静。远离喧豗的地方，才是思考的殿堂。昨夜，看了很久，一个陌生人的日志，想了很多。首先，我愿意花两个小时的时间去感受别人的感情经历和心思，而且是一个与我无关的人，我想从某些人的角度看，我确实很无聊，或许是相当无聊。\n\n<!-- more -->\n\n可我不这样认为，在别人的故事里，我看到了另外一个世界，世界有点大，还是用梦来表示合理点，因为在这个感觉里，和梦境一样翻滚着朦胧，只能想象一个轮廓，却不能真正遇见。有这样的梦，是一种幸运。在别人的世界里，虽然找不到自己的身影，却在自己的幻梦里，可以发现别人的脚印。其次，别人的故事里，有那么多感情的纠葛，忧伤，欣喜，失落，孤寂……而转念一想，自己的故事，从高中之后就那么地单调，乏味。于是，我觉得我错过了一种感情。但在那四年里，唯有游戏和学习在有生命的活着，于是，时间的雨露只够维持他们的生长，其他的种子，也只能被我遗落，但在未来，我会慢慢拾起，因为那些必不可少。我不后悔我走过的路，因为都是值得的。突然有一种感想：生活很充实，感情很空虚！呵呵。最后，我觉得简单是一种快乐，因为我很少悲伤；复杂才是现实，因为我脱离现实很久了；原来，我只是个孩子……\n","updated":"2023-09-03T11:29:43.909Z","path":"journal/journal-2011-10-25.html","comments":1,"layout":"page","_id":"clq4xe1d6000etz2hfydqei2y","content":"<p>清晨，风凉，枫叶丹，霜花零散。也许这样的季节，才能弥补这个世界的清静。远离喧豗的地方，才是思考的殿堂。昨夜，看了很久，一个陌生人的日志，想了很多。首先，我愿意花两个小时的时间去感受别人的感情经历和心思，而且是一个与我无关的人，我想从某些人的角度看，我确实很无聊，或许是相当无聊。</p>\n<span id=\"more\"></span>\n\n<p>可我不这样认为，在别人的故事里，我看到了另外一个世界，世界有点大，还是用梦来表示合理点，因为在这个感觉里，和梦境一样翻滚着朦胧，只能想象一个轮廓，却不能真正遇见。有这样的梦，是一种幸运。在别人的世界里，虽然找不到自己的身影，却在自己的幻梦里，可以发现别人的脚印。其次，别人的故事里，有那么多感情的纠葛，忧伤，欣喜，失落，孤寂……而转念一想，自己的故事，从高中之后就那么地单调，乏味。于是，我觉得我错过了一种感情。但在那四年里，唯有游戏和学习在有生命的活着，于是，时间的雨露只够维持他们的生长，其他的种子，也只能被我遗落，但在未来，我会慢慢拾起，因为那些必不可少。我不后悔我走过的路，因为都是值得的。突然有一种感想：生活很充实，感情很空虚！呵呵。最后，我觉得简单是一种快乐，因为我很少悲伤；复杂才是现实，因为我脱离现实很久了；原来，我只是个孩子……</p>\n","site":{"data":{}},"related_posts":[],"length":443,"excerpt":"<p>清晨，风凉，枫叶丹，霜花零散。也许这样的季节，才能弥补这个世界的清静。远离喧豗的地方，才是思考的殿堂。昨夜，看了很久，一个陌生人的日志，想了很多。首先，我愿意花两个小时的时间去感受别人的感情经历和心思，而且是一个与我无关的人，我想从某些人的角度看，我确实很无聊，或许是相当无聊。</p>","more":"<p>可我不这样认为，在别人的故事里，我看到了另外一个世界，世界有点大，还是用梦来表示合理点，因为在这个感觉里，和梦境一样翻滚着朦胧，只能想象一个轮廓，却不能真正遇见。有这样的梦，是一种幸运。在别人的世界里，虽然找不到自己的身影，却在自己的幻梦里，可以发现别人的脚印。其次，别人的故事里，有那么多感情的纠葛，忧伤，欣喜，失落，孤寂……而转念一想，自己的故事，从高中之后就那么地单调，乏味。于是，我觉得我错过了一种感情。但在那四年里，唯有游戏和学习在有生命的活着，于是，时间的雨露只够维持他们的生长，其他的种子，也只能被我遗落，但在未来，我会慢慢拾起，因为那些必不可少。我不后悔我走过的路，因为都是值得的。突然有一种感想：生活很充实，感情很空虚！呵呵。最后，我觉得简单是一种快乐，因为我很少悲伤；复杂才是现实，因为我脱离现实很久了；原来，我只是个孩子……</p>"},{"title":"日志-2011-11-18","date":"2011-11-18T11:25:10.000Z","tags":null,"categories":["日志"],"_content":"\n苍白的灯光\n落在心上\n比月光低一度的温暖\n捧不开一朵雪莲\n被禁锢的玻璃窗\n冷冷地靠在身旁\n没有一丝丝血脉\n或许她死去了很久\n只是被尘世遗忘\n无人为她埋葬\n左转，凝眸\n我似乎看到了我的身影\n淡淡地覆盖住窗外的景\n没有战栗尽管外面很冷\n却不知是她冰凉的泪痕\n搁浅了冬季忘我的痴情\n","source":"journal/journal-2011-11-18.md","raw":"---\ntitle: 日志-2011-11-18\ndate: 2011-11-18 19:25:10\ntags:\ncategories:\n  - 日志\n---\n\n苍白的灯光\n落在心上\n比月光低一度的温暖\n捧不开一朵雪莲\n被禁锢的玻璃窗\n冷冷地靠在身旁\n没有一丝丝血脉\n或许她死去了很久\n只是被尘世遗忘\n无人为她埋葬\n左转，凝眸\n我似乎看到了我的身影\n淡淡地覆盖住窗外的景\n没有战栗尽管外面很冷\n却不知是她冰凉的泪痕\n搁浅了冬季忘我的痴情\n","updated":"2023-09-03T11:27:42.297Z","path":"journal/journal-2011-11-18.html","comments":1,"layout":"page","_id":"clq4xe1d7000htz2h7jmfb48z","content":"<p>苍白的灯光<br>落在心上<br>比月光低一度的温暖<br>捧不开一朵雪莲<br>被禁锢的玻璃窗<br>冷冷地靠在身旁<br>没有一丝丝血脉<br>或许她死去了很久<br>只是被尘世遗忘<br>无人为她埋葬<br>左转，凝眸<br>我似乎看到了我的身影<br>淡淡地覆盖住窗外的景<br>没有战栗尽管外面很冷<br>却不知是她冰凉的泪痕<br>搁浅了冬季忘我的痴情</p>\n","site":{"data":{}},"related_posts":[],"length":121,"excerpt":"","more":"<p>苍白的灯光<br>落在心上<br>比月光低一度的温暖<br>捧不开一朵雪莲<br>被禁锢的玻璃窗<br>冷冷地靠在身旁<br>没有一丝丝血脉<br>或许她死去了很久<br>只是被尘世遗忘<br>无人为她埋葬<br>左转，凝眸<br>我似乎看到了我的身影<br>淡淡地覆盖住窗外的景<br>没有战栗尽管外面很冷<br>却不知是她冰凉的泪痕<br>搁浅了冬季忘我的痴情</p>\n"},{"title":"journal","date":"2023-09-03T11:36:17.000Z","type":"journal","_content":"","source":"journal/index.md","raw":"---\ntitle: journal\ndate: 2023-09-03 19:36:17\ntype: \"journal\"\n---\n","updated":"2023-09-03T11:48:22.541Z","path":"journal/index.html","comments":1,"layout":"page","_id":"clq4xe1d7000ktz2hb2wl5lyr","content":"","site":{"data":{}},"related_posts":[],"length":0,"excerpt":"","more":""},{"title":"日志-2011-12-12","date":"2011-12-12T11:21:49.000Z","tags":null,"categories":["日志"],"_content":"\n睁开睡眼，寝室里已经很亮了，苍白的墙壁，抹上一层淡淡的光辉，明暗的错落有致凸显出和谐的氛围。没有喧嚣，一位室友在很认真很认真的写作业，另外两位和我一样还躺在床上，唯一不同的是他们还未醒，或许他们在做梦吧，或许做梦是最好的享受，或许他们真的累了，好吧，就让他们多睡会儿呗，反正今天上午没课，貌似下午也没，所以，想怎么睡就怎么睡吧，我不打扰。\n\n<!-- more -->\n\n如果窗外的阳光能直接的照到他们的床上，那么，呵呵。不会的，谁叫你们是上帝的宠儿。貌似人类都是上帝的宠儿，这个不解释，大家都懂得。可我不懂的是，在这么温馨的环境里，我竟然睡不着了，一点都不困，一点都不！那么，我该干点什么呢？这个真不好回答，不是因为没事做，而是要做的事太多。呵呵，或许好多人都会和我一样，当要处理的事情多了之后，便一头雾水，不知道该干啥了，于是索性什么都不做，只是静静地等待，等待着时间的流逝，当快要上交任务时，便忙碌了起来，一点都不像蜜蜂，蜜蜂总是该干嘛时干嘛，我们却是该干嘛的时候不干，到万不得已的时候再干，人终究不是蜜蜂。我来我们学校这么长时间了，还真没看到过蜜蜂，我想想，在恒清湖里，有好多鱼，红的、白的、黑的、花的……好多好多，额，在某个下午，阳光明媚，我看到了一只乌龟，正奋力地爬上湖岸，可是，每当它爬到一半的时候就滑下去了，我很想帮它一把，可是，力不从心啊，无奈，只好痛惜走过，好像没有看到一样，这是冷漠吗？有点。当之后我和同学讲起这件事时，他们总是不相信，不是不相信我就这样走了，而是不相信湖里有乌龟，于是，我为了证明我没有看花眼，便把他们拉到上次看乌龟的地方，可是，等了很久，我心爱的乌龟啊！还是没有出现，之后，大家都可以想象，便不多说了。从那之后，我就再也没有看到它了，虽然每次经过那里，我总会刻意地看看，每次，都带着失望而去。学校里还有一只老鼠，不对，我只看到过一只，应该有很多只吧，只是我没遇上而已，不然怎么繁衍后代啊，看到最多的，除了鱼之外，就是狗了，不知道学校里哪来的那么多狗，几乎每天都能遇上一群，我们的导学员还被狗咬过呢，是学校的狗，太强悍了，是什么时候，狗不在怕人了？有过那个时候吗？额，这个我还真不知道。学校的动物好像就那么多吧，至少我遇到的就那么多，至树上的鸟，我不太确定它是不是学校里的，因为有时候它们也会飞出学校，至于有没有飞回来，那就真不知道了，鬼才晓得它去哪儿了。额，那两位睡将快起床了，我也起床吧！嘿嘿……\n","source":"journal/journal-2011-12-12.md","raw":"---\ntitle: 日志-2011-12-12\ndate: 2011-12-12 19:21:49\ntags:\ncategories:\n  - 日志\n---\n\n睁开睡眼，寝室里已经很亮了，苍白的墙壁，抹上一层淡淡的光辉，明暗的错落有致凸显出和谐的氛围。没有喧嚣，一位室友在很认真很认真的写作业，另外两位和我一样还躺在床上，唯一不同的是他们还未醒，或许他们在做梦吧，或许做梦是最好的享受，或许他们真的累了，好吧，就让他们多睡会儿呗，反正今天上午没课，貌似下午也没，所以，想怎么睡就怎么睡吧，我不打扰。\n\n<!-- more -->\n\n如果窗外的阳光能直接的照到他们的床上，那么，呵呵。不会的，谁叫你们是上帝的宠儿。貌似人类都是上帝的宠儿，这个不解释，大家都懂得。可我不懂的是，在这么温馨的环境里，我竟然睡不着了，一点都不困，一点都不！那么，我该干点什么呢？这个真不好回答，不是因为没事做，而是要做的事太多。呵呵，或许好多人都会和我一样，当要处理的事情多了之后，便一头雾水，不知道该干啥了，于是索性什么都不做，只是静静地等待，等待着时间的流逝，当快要上交任务时，便忙碌了起来，一点都不像蜜蜂，蜜蜂总是该干嘛时干嘛，我们却是该干嘛的时候不干，到万不得已的时候再干，人终究不是蜜蜂。我来我们学校这么长时间了，还真没看到过蜜蜂，我想想，在恒清湖里，有好多鱼，红的、白的、黑的、花的……好多好多，额，在某个下午，阳光明媚，我看到了一只乌龟，正奋力地爬上湖岸，可是，每当它爬到一半的时候就滑下去了，我很想帮它一把，可是，力不从心啊，无奈，只好痛惜走过，好像没有看到一样，这是冷漠吗？有点。当之后我和同学讲起这件事时，他们总是不相信，不是不相信我就这样走了，而是不相信湖里有乌龟，于是，我为了证明我没有看花眼，便把他们拉到上次看乌龟的地方，可是，等了很久，我心爱的乌龟啊！还是没有出现，之后，大家都可以想象，便不多说了。从那之后，我就再也没有看到它了，虽然每次经过那里，我总会刻意地看看，每次，都带着失望而去。学校里还有一只老鼠，不对，我只看到过一只，应该有很多只吧，只是我没遇上而已，不然怎么繁衍后代啊，看到最多的，除了鱼之外，就是狗了，不知道学校里哪来的那么多狗，几乎每天都能遇上一群，我们的导学员还被狗咬过呢，是学校的狗，太强悍了，是什么时候，狗不在怕人了？有过那个时候吗？额，这个我还真不知道。学校的动物好像就那么多吧，至少我遇到的就那么多，至树上的鸟，我不太确定它是不是学校里的，因为有时候它们也会飞出学校，至于有没有飞回来，那就真不知道了，鬼才晓得它去哪儿了。额，那两位睡将快起床了，我也起床吧！嘿嘿……\n","updated":"2023-09-03T11:22:28.352Z","path":"journal/journal-2011-12-12.html","comments":1,"layout":"page","_id":"clq4xe1d8000ptz2h2okf009u","content":"<p>睁开睡眼，寝室里已经很亮了，苍白的墙壁，抹上一层淡淡的光辉，明暗的错落有致凸显出和谐的氛围。没有喧嚣，一位室友在很认真很认真的写作业，另外两位和我一样还躺在床上，唯一不同的是他们还未醒，或许他们在做梦吧，或许做梦是最好的享受，或许他们真的累了，好吧，就让他们多睡会儿呗，反正今天上午没课，貌似下午也没，所以，想怎么睡就怎么睡吧，我不打扰。</p>\n<span id=\"more\"></span>\n\n<p>如果窗外的阳光能直接的照到他们的床上，那么，呵呵。不会的，谁叫你们是上帝的宠儿。貌似人类都是上帝的宠儿，这个不解释，大家都懂得。可我不懂的是，在这么温馨的环境里，我竟然睡不着了，一点都不困，一点都不！那么，我该干点什么呢？这个真不好回答，不是因为没事做，而是要做的事太多。呵呵，或许好多人都会和我一样，当要处理的事情多了之后，便一头雾水，不知道该干啥了，于是索性什么都不做，只是静静地等待，等待着时间的流逝，当快要上交任务时，便忙碌了起来，一点都不像蜜蜂，蜜蜂总是该干嘛时干嘛，我们却是该干嘛的时候不干，到万不得已的时候再干，人终究不是蜜蜂。我来我们学校这么长时间了，还真没看到过蜜蜂，我想想，在恒清湖里，有好多鱼，红的、白的、黑的、花的……好多好多，额，在某个下午，阳光明媚，我看到了一只乌龟，正奋力地爬上湖岸，可是，每当它爬到一半的时候就滑下去了，我很想帮它一把，可是，力不从心啊，无奈，只好痛惜走过，好像没有看到一样，这是冷漠吗？有点。当之后我和同学讲起这件事时，他们总是不相信，不是不相信我就这样走了，而是不相信湖里有乌龟，于是，我为了证明我没有看花眼，便把他们拉到上次看乌龟的地方，可是，等了很久，我心爱的乌龟啊！还是没有出现，之后，大家都可以想象，便不多说了。从那之后，我就再也没有看到它了，虽然每次经过那里，我总会刻意地看看，每次，都带着失望而去。学校里还有一只老鼠，不对，我只看到过一只，应该有很多只吧，只是我没遇上而已，不然怎么繁衍后代啊，看到最多的，除了鱼之外，就是狗了，不知道学校里哪来的那么多狗，几乎每天都能遇上一群，我们的导学员还被狗咬过呢，是学校的狗，太强悍了，是什么时候，狗不在怕人了？有过那个时候吗？额，这个我还真不知道。学校的动物好像就那么多吧，至少我遇到的就那么多，至树上的鸟，我不太确定它是不是学校里的，因为有时候它们也会飞出学校，至于有没有飞回来，那就真不知道了，鬼才晓得它去哪儿了。额，那两位睡将快起床了，我也起床吧！嘿嘿……</p>\n","site":{"data":{}},"related_posts":[],"length":874,"excerpt":"<p>睁开睡眼，寝室里已经很亮了，苍白的墙壁，抹上一层淡淡的光辉，明暗的错落有致凸显出和谐的氛围。没有喧嚣，一位室友在很认真很认真的写作业，另外两位和我一样还躺在床上，唯一不同的是他们还未醒，或许他们在做梦吧，或许做梦是最好的享受，或许他们真的累了，好吧，就让他们多睡会儿呗，反正今天上午没课，貌似下午也没，所以，想怎么睡就怎么睡吧，我不打扰。</p>","more":"<p>如果窗外的阳光能直接的照到他们的床上，那么，呵呵。不会的，谁叫你们是上帝的宠儿。貌似人类都是上帝的宠儿，这个不解释，大家都懂得。可我不懂的是，在这么温馨的环境里，我竟然睡不着了，一点都不困，一点都不！那么，我该干点什么呢？这个真不好回答，不是因为没事做，而是要做的事太多。呵呵，或许好多人都会和我一样，当要处理的事情多了之后，便一头雾水，不知道该干啥了，于是索性什么都不做，只是静静地等待，等待着时间的流逝，当快要上交任务时，便忙碌了起来，一点都不像蜜蜂，蜜蜂总是该干嘛时干嘛，我们却是该干嘛的时候不干，到万不得已的时候再干，人终究不是蜜蜂。我来我们学校这么长时间了，还真没看到过蜜蜂，我想想，在恒清湖里，有好多鱼，红的、白的、黑的、花的……好多好多，额，在某个下午，阳光明媚，我看到了一只乌龟，正奋力地爬上湖岸，可是，每当它爬到一半的时候就滑下去了，我很想帮它一把，可是，力不从心啊，无奈，只好痛惜走过，好像没有看到一样，这是冷漠吗？有点。当之后我和同学讲起这件事时，他们总是不相信，不是不相信我就这样走了，而是不相信湖里有乌龟，于是，我为了证明我没有看花眼，便把他们拉到上次看乌龟的地方，可是，等了很久，我心爱的乌龟啊！还是没有出现，之后，大家都可以想象，便不多说了。从那之后，我就再也没有看到它了，虽然每次经过那里，我总会刻意地看看，每次，都带着失望而去。学校里还有一只老鼠，不对，我只看到过一只，应该有很多只吧，只是我没遇上而已，不然怎么繁衍后代啊，看到最多的，除了鱼之外，就是狗了，不知道学校里哪来的那么多狗，几乎每天都能遇上一群，我们的导学员还被狗咬过呢，是学校的狗，太强悍了，是什么时候，狗不在怕人了？有过那个时候吗？额，这个我还真不知道。学校的动物好像就那么多吧，至少我遇到的就那么多，至树上的鸟，我不太确定它是不是学校里的，因为有时候它们也会飞出学校，至于有没有飞回来，那就真不知道了，鬼才晓得它去哪儿了。额，那两位睡将快起床了，我也起床吧！嘿嘿……</p>"},{"title":"日志-2012-12-17","date":"2012-12-17T07:18:58.000Z","tags":null,"categories":["日志"],"_content":"\n心情，就像一个平放在桌面的杯子，本来是装满了水，不论是白开水，还是咖啡，当再加点盐水时，最后都是咸的，本来水面是平稳的，却也会在加了盐水之后激起涟漪，无法平静。除非我已经熟睡，盖上了杯盖，一切又都回归安稳，平淡，寂寥。思念了谁，催了心肝，与窗外的雨无关。陌生的，熟悉了；熟悉的，安静了；安静的，离开了；离开的，陌路了。最后的最后，谁又能猜中结局。\n","source":"journal/journal-2012-12-17.md","raw":"---\ntitle: 日志-2012-12-17\ndate: 2012-12-17 15:18:58\ntags:\ncategories:\n  - 日志\n---\n\n心情，就像一个平放在桌面的杯子，本来是装满了水，不论是白开水，还是咖啡，当再加点盐水时，最后都是咸的，本来水面是平稳的，却也会在加了盐水之后激起涟漪，无法平静。除非我已经熟睡，盖上了杯盖，一切又都回归安稳，平淡，寂寥。思念了谁，催了心肝，与窗外的雨无关。陌生的，熟悉了；熟悉的，安静了；安静的，离开了；离开的，陌路了。最后的最后，谁又能猜中结局。\n","updated":"2023-09-03T07:19:20.272Z","path":"journal/journal-2012-12-17.html","comments":1,"layout":"page","_id":"clq4xe1d9000ttz2h7s5qezh7","content":"<p>心情，就像一个平放在桌面的杯子，本来是装满了水，不论是白开水，还是咖啡，当再加点盐水时，最后都是咸的，本来水面是平稳的，却也会在加了盐水之后激起涟漪，无法平静。除非我已经熟睡，盖上了杯盖，一切又都回归安稳，平淡，寂寥。思念了谁，催了心肝，与窗外的雨无关。陌生的，熟悉了；熟悉的，安静了；安静的，离开了；离开的，陌路了。最后的最后，谁又能猜中结局。</p>\n","site":{"data":{}},"related_posts":[],"length":145,"excerpt":"","more":"<p>心情，就像一个平放在桌面的杯子，本来是装满了水，不论是白开水，还是咖啡，当再加点盐水时，最后都是咸的，本来水面是平稳的，却也会在加了盐水之后激起涟漪，无法平静。除非我已经熟睡，盖上了杯盖，一切又都回归安稳，平淡，寂寥。思念了谁，催了心肝，与窗外的雨无关。陌生的，熟悉了；熟悉的，安静了；安静的，离开了；离开的，陌路了。最后的最后，谁又能猜中结局。</p>\n"},{"title":"日志-2011-12-25","date":"2011-12-25T10:26:14.000Z","tags":null,"categories":["日志"],"_content":"\n今天是什么节日大家都知道，所以，在这里，祝大家圣诞快乐。由于倍感无聊，我就随便扯扯，只为留给未来一个回忆。因为我相信，那些珍藏在脑海中的记忆，终究会被时间抹淡，褪色，就像小时候陪自己一起玩闹的朋友，如今，在脑海里，不管怎样的挣扎，都被无情的时光淹没，看不清了，真的看不清了。\n\n<!-- more -->\n\n我是一个怀旧的人，所以写着写着总不自觉的会想起过去。过去，就像一首诗，我就像个讲诗的人，因为语文不好，所以我也讲不清楚。只是那些片段，就像秋天里一片一片的枫叶，静静地躺在记忆里，便成为一幅唯美的图画。喜欢小时候一起爬山的日子，我刚来到武汉时，第一印象是武汉没有山的，放眼望去全是楼，感觉很拥挤，染了尘。之后有一次同学聚会，去了落雁岛，在路上看到了一个叫“磨山”的山，我觉得山就是山，不应该取名字，取了名字后就感觉失去了什么，山和它的名字有联系吗？就像我和我的名字也没联系啊，世上叫方恒这个名字的多着呢，这只是一个代号，我觉得和一个人成为朋友，可以不用知道这样一个代号的，我们总有那么一些同学是我们叫不出名字来的，可是，他们依旧存活在我们的记忆里，身边，或者未来的故事里。感觉貌似跑题喽，好吧，就这样跑下去吧，不想被束缚，不想像以前写作文一样默守陈规，让自己的思想舒畅的游会儿，也算是圣诞老人给我的快乐吧。既然今天是圣诞节，那我就记下今天的事吧。我开始记流水账了，早晨，没有太阳，不对，有太阳，只是被云遮住了，所以铺在寝室地面上的，没有那一层层银辉，也感觉不到一丝的温暖，有点冷，喉咙有点不爽，我确定我感冒了，好吧，上帝给我开了一个玩笑，让我在这一天感冒，我又能说些什么呢？不过还好啊，我们寝室的四个人，我是最后一个感冒的，呵呵。刚才被打扰了一下，思绪有点乱。下午，我又去上网了，为什么有个“又”呢？因为我昨天也上了，本打算昨晚通宵的，但想想还是算了，因为瞌睡来了，于是我果断的离开了网吧，出来时正巧碰到东哥和他女朋友，呵呵，真有缘分啊（和东哥），为了对得起这份缘分，我就祝他们白头偕老吧，嘿嘿。下午本打算和我哥还有方荆一起玩 dota 的，可是网速不给力啊，于是有一种难于言说的失落。不过还好吧，因为之后我看到几个月没见的妹妹，心情就好多了。呵呵，和她聊天虽说总是那些原话，不过还是很开心的。之后，又和一个很久没联系的朋友闲聊，不知道在她眼里我算不算朋友，其实蛮怀念那些日子的，哎，不说这些了，有些东西是语言无法表达的，如果硬要用语言来诉说，就会失去本真。圣诞节，嗯，过得不错，比我想象中的要好，呵呵。晚上，有点闲，上网也没意思了，便邀了几个同学下去打篮球，虽说我不会打，不过还是蛮有兴趣的，呵呵，怎么以前就没发现呢？八点多，帮老乡借的军训服给老。今天，就这么多吧！再扯就到明天了。最后，祝所有人圣诞快乐！\n","source":"journal/journal-2011-12-25.md","raw":"---\ntitle: 日志-2011-12-25\ndate: 2011-12-25 18:26:14\ntags:\ncategories:\n  - 日志\n---\n\n今天是什么节日大家都知道，所以，在这里，祝大家圣诞快乐。由于倍感无聊，我就随便扯扯，只为留给未来一个回忆。因为我相信，那些珍藏在脑海中的记忆，终究会被时间抹淡，褪色，就像小时候陪自己一起玩闹的朋友，如今，在脑海里，不管怎样的挣扎，都被无情的时光淹没，看不清了，真的看不清了。\n\n<!-- more -->\n\n我是一个怀旧的人，所以写着写着总不自觉的会想起过去。过去，就像一首诗，我就像个讲诗的人，因为语文不好，所以我也讲不清楚。只是那些片段，就像秋天里一片一片的枫叶，静静地躺在记忆里，便成为一幅唯美的图画。喜欢小时候一起爬山的日子，我刚来到武汉时，第一印象是武汉没有山的，放眼望去全是楼，感觉很拥挤，染了尘。之后有一次同学聚会，去了落雁岛，在路上看到了一个叫“磨山”的山，我觉得山就是山，不应该取名字，取了名字后就感觉失去了什么，山和它的名字有联系吗？就像我和我的名字也没联系啊，世上叫方恒这个名字的多着呢，这只是一个代号，我觉得和一个人成为朋友，可以不用知道这样一个代号的，我们总有那么一些同学是我们叫不出名字来的，可是，他们依旧存活在我们的记忆里，身边，或者未来的故事里。感觉貌似跑题喽，好吧，就这样跑下去吧，不想被束缚，不想像以前写作文一样默守陈规，让自己的思想舒畅的游会儿，也算是圣诞老人给我的快乐吧。既然今天是圣诞节，那我就记下今天的事吧。我开始记流水账了，早晨，没有太阳，不对，有太阳，只是被云遮住了，所以铺在寝室地面上的，没有那一层层银辉，也感觉不到一丝的温暖，有点冷，喉咙有点不爽，我确定我感冒了，好吧，上帝给我开了一个玩笑，让我在这一天感冒，我又能说些什么呢？不过还好啊，我们寝室的四个人，我是最后一个感冒的，呵呵。刚才被打扰了一下，思绪有点乱。下午，我又去上网了，为什么有个“又”呢？因为我昨天也上了，本打算昨晚通宵的，但想想还是算了，因为瞌睡来了，于是我果断的离开了网吧，出来时正巧碰到东哥和他女朋友，呵呵，真有缘分啊（和东哥），为了对得起这份缘分，我就祝他们白头偕老吧，嘿嘿。下午本打算和我哥还有方荆一起玩 dota 的，可是网速不给力啊，于是有一种难于言说的失落。不过还好吧，因为之后我看到几个月没见的妹妹，心情就好多了。呵呵，和她聊天虽说总是那些原话，不过还是很开心的。之后，又和一个很久没联系的朋友闲聊，不知道在她眼里我算不算朋友，其实蛮怀念那些日子的，哎，不说这些了，有些东西是语言无法表达的，如果硬要用语言来诉说，就会失去本真。圣诞节，嗯，过得不错，比我想象中的要好，呵呵。晚上，有点闲，上网也没意思了，便邀了几个同学下去打篮球，虽说我不会打，不过还是蛮有兴趣的，呵呵，怎么以前就没发现呢？八点多，帮老乡借的军训服给老。今天，就这么多吧！再扯就到明天了。最后，祝所有人圣诞快乐！\n","updated":"2023-09-03T10:27:36.289Z","path":"journal/journal-2011-12-25.html","comments":1,"layout":"page","_id":"clq4xe1da000ytz2h1buxcuoy","content":"<p>今天是什么节日大家都知道，所以，在这里，祝大家圣诞快乐。由于倍感无聊，我就随便扯扯，只为留给未来一个回忆。因为我相信，那些珍藏在脑海中的记忆，终究会被时间抹淡，褪色，就像小时候陪自己一起玩闹的朋友，如今，在脑海里，不管怎样的挣扎，都被无情的时光淹没，看不清了，真的看不清了。</p>\n<span id=\"more\"></span>\n\n<p>我是一个怀旧的人，所以写着写着总不自觉的会想起过去。过去，就像一首诗，我就像个讲诗的人，因为语文不好，所以我也讲不清楚。只是那些片段，就像秋天里一片一片的枫叶，静静地躺在记忆里，便成为一幅唯美的图画。喜欢小时候一起爬山的日子，我刚来到武汉时，第一印象是武汉没有山的，放眼望去全是楼，感觉很拥挤，染了尘。之后有一次同学聚会，去了落雁岛，在路上看到了一个叫“磨山”的山，我觉得山就是山，不应该取名字，取了名字后就感觉失去了什么，山和它的名字有联系吗？就像我和我的名字也没联系啊，世上叫方恒这个名字的多着呢，这只是一个代号，我觉得和一个人成为朋友，可以不用知道这样一个代号的，我们总有那么一些同学是我们叫不出名字来的，可是，他们依旧存活在我们的记忆里，身边，或者未来的故事里。感觉貌似跑题喽，好吧，就这样跑下去吧，不想被束缚，不想像以前写作文一样默守陈规，让自己的思想舒畅的游会儿，也算是圣诞老人给我的快乐吧。既然今天是圣诞节，那我就记下今天的事吧。我开始记流水账了，早晨，没有太阳，不对，有太阳，只是被云遮住了，所以铺在寝室地面上的，没有那一层层银辉，也感觉不到一丝的温暖，有点冷，喉咙有点不爽，我确定我感冒了，好吧，上帝给我开了一个玩笑，让我在这一天感冒，我又能说些什么呢？不过还好啊，我们寝室的四个人，我是最后一个感冒的，呵呵。刚才被打扰了一下，思绪有点乱。下午，我又去上网了，为什么有个“又”呢？因为我昨天也上了，本打算昨晚通宵的，但想想还是算了，因为瞌睡来了，于是我果断的离开了网吧，出来时正巧碰到东哥和他女朋友，呵呵，真有缘分啊（和东哥），为了对得起这份缘分，我就祝他们白头偕老吧，嘿嘿。下午本打算和我哥还有方荆一起玩 dota 的，可是网速不给力啊，于是有一种难于言说的失落。不过还好吧，因为之后我看到几个月没见的妹妹，心情就好多了。呵呵，和她聊天虽说总是那些原话，不过还是很开心的。之后，又和一个很久没联系的朋友闲聊，不知道在她眼里我算不算朋友，其实蛮怀念那些日子的，哎，不说这些了，有些东西是语言无法表达的，如果硬要用语言来诉说，就会失去本真。圣诞节，嗯，过得不错，比我想象中的要好，呵呵。晚上，有点闲，上网也没意思了，便邀了几个同学下去打篮球，虽说我不会打，不过还是蛮有兴趣的，呵呵，怎么以前就没发现呢？八点多，帮老乡借的军训服给老。今天，就这么多吧！再扯就到明天了。最后，祝所有人圣诞快乐！</p>\n","site":{"data":{}},"related_posts":[],"length":995,"excerpt":"<p>今天是什么节日大家都知道，所以，在这里，祝大家圣诞快乐。由于倍感无聊，我就随便扯扯，只为留给未来一个回忆。因为我相信，那些珍藏在脑海中的记忆，终究会被时间抹淡，褪色，就像小时候陪自己一起玩闹的朋友，如今，在脑海里，不管怎样的挣扎，都被无情的时光淹没，看不清了，真的看不清了。</p>","more":"<p>我是一个怀旧的人，所以写着写着总不自觉的会想起过去。过去，就像一首诗，我就像个讲诗的人，因为语文不好，所以我也讲不清楚。只是那些片段，就像秋天里一片一片的枫叶，静静地躺在记忆里，便成为一幅唯美的图画。喜欢小时候一起爬山的日子，我刚来到武汉时，第一印象是武汉没有山的，放眼望去全是楼，感觉很拥挤，染了尘。之后有一次同学聚会，去了落雁岛，在路上看到了一个叫“磨山”的山，我觉得山就是山，不应该取名字，取了名字后就感觉失去了什么，山和它的名字有联系吗？就像我和我的名字也没联系啊，世上叫方恒这个名字的多着呢，这只是一个代号，我觉得和一个人成为朋友，可以不用知道这样一个代号的，我们总有那么一些同学是我们叫不出名字来的，可是，他们依旧存活在我们的记忆里，身边，或者未来的故事里。感觉貌似跑题喽，好吧，就这样跑下去吧，不想被束缚，不想像以前写作文一样默守陈规，让自己的思想舒畅的游会儿，也算是圣诞老人给我的快乐吧。既然今天是圣诞节，那我就记下今天的事吧。我开始记流水账了，早晨，没有太阳，不对，有太阳，只是被云遮住了，所以铺在寝室地面上的，没有那一层层银辉，也感觉不到一丝的温暖，有点冷，喉咙有点不爽，我确定我感冒了，好吧，上帝给我开了一个玩笑，让我在这一天感冒，我又能说些什么呢？不过还好啊，我们寝室的四个人，我是最后一个感冒的，呵呵。刚才被打扰了一下，思绪有点乱。下午，我又去上网了，为什么有个“又”呢？因为我昨天也上了，本打算昨晚通宵的，但想想还是算了，因为瞌睡来了，于是我果断的离开了网吧，出来时正巧碰到东哥和他女朋友，呵呵，真有缘分啊（和东哥），为了对得起这份缘分，我就祝他们白头偕老吧，嘿嘿。下午本打算和我哥还有方荆一起玩 dota 的，可是网速不给力啊，于是有一种难于言说的失落。不过还好吧，因为之后我看到几个月没见的妹妹，心情就好多了。呵呵，和她聊天虽说总是那些原话，不过还是很开心的。之后，又和一个很久没联系的朋友闲聊，不知道在她眼里我算不算朋友，其实蛮怀念那些日子的，哎，不说这些了，有些东西是语言无法表达的，如果硬要用语言来诉说，就会失去本真。圣诞节，嗯，过得不错，比我想象中的要好，呵呵。晚上，有点闲，上网也没意思了，便邀了几个同学下去打篮球，虽说我不会打，不过还是蛮有兴趣的，呵呵，怎么以前就没发现呢？八点多，帮老乡借的军训服给老。今天，就这么多吧！再扯就到明天了。最后，祝所有人圣诞快乐！</p>"},{"title":"日志-2012-06-16","date":"2012-06-16T07:23:04.000Z","tags":null,"categories":["日志"],"_content":"\n好久没写东西了。我的性格是无聊的时候总会想去做些什么来打发时间。比如打多塔，比如写一些文字垃圾。当是打多塔还是写东西这个问题摆在我面前时，我会毫不犹豫的选择多塔。可是当夜黑人静时，这个抉择显得有些苍白无力了。所以我才会无聊的写这些来打发时间。不，不是打发，应该说是收留。如果时间是一个孩子，那么他一定很落寞，因为每当漫漫长夜降临时，他总是很容易被人们遗忘，难怪我也总觉得睡觉的时候时间是过得最快的，当然不包括睡不着觉的情况，因为时间这孩子总会找睡不着的作伴。\n\n<!-- more -->\n\n不然岂不无聊死。我意识到我又胡思乱想了，哎，不知道是怎么地。我深刻地认识到在写东西的时候，我总会胡思乱想，胡思乱想的时候我会发呆，发呆的时候时间会过得很快，可我还是没把时间忘记，反而刻意地去提起。为了什么呢？难道是潜意识里时间的紧迫感？后天又要考试了，时间真的很紧额，明天开始，要好好的，认认真真的复习了，有的还得抓紧预习。。。不写了，脑子里波涛汹涌，再写下去就真的得陪时间作伴了。我的特点就是无聊的时候偶尔会写些东西，写东西的时候我会胡思乱想，胡思乱想的时候我会写不出东西，因为我会发呆，发呆的时候感觉脑子里满是东西，可我又没时间把它写出来，有时间的时候又会把那时脑子里的想法忘了。总而言之，我是写不出东西的。纵观全文，都是废话，所以我又制造了一篇文字垃圾。。。\n","source":"journal/journal-2012-06-16.md","raw":"---\ntitle: 日志-2012-06-16\ndate: 2012-06-16 15:23:04\ntags:\ncategories:\n  - 日志\n---\n\n好久没写东西了。我的性格是无聊的时候总会想去做些什么来打发时间。比如打多塔，比如写一些文字垃圾。当是打多塔还是写东西这个问题摆在我面前时，我会毫不犹豫的选择多塔。可是当夜黑人静时，这个抉择显得有些苍白无力了。所以我才会无聊的写这些来打发时间。不，不是打发，应该说是收留。如果时间是一个孩子，那么他一定很落寞，因为每当漫漫长夜降临时，他总是很容易被人们遗忘，难怪我也总觉得睡觉的时候时间是过得最快的，当然不包括睡不着觉的情况，因为时间这孩子总会找睡不着的作伴。\n\n<!-- more -->\n\n不然岂不无聊死。我意识到我又胡思乱想了，哎，不知道是怎么地。我深刻地认识到在写东西的时候，我总会胡思乱想，胡思乱想的时候我会发呆，发呆的时候时间会过得很快，可我还是没把时间忘记，反而刻意地去提起。为了什么呢？难道是潜意识里时间的紧迫感？后天又要考试了，时间真的很紧额，明天开始，要好好的，认认真真的复习了，有的还得抓紧预习。。。不写了，脑子里波涛汹涌，再写下去就真的得陪时间作伴了。我的特点就是无聊的时候偶尔会写些东西，写东西的时候我会胡思乱想，胡思乱想的时候我会写不出东西，因为我会发呆，发呆的时候感觉脑子里满是东西，可我又没时间把它写出来，有时间的时候又会把那时脑子里的想法忘了。总而言之，我是写不出东西的。纵观全文，都是废话，所以我又制造了一篇文字垃圾。。。\n","updated":"2023-09-03T07:23:33.512Z","path":"journal/journal-2012-06-16.html","comments":1,"layout":"page","_id":"clq4xe1da0013tz2h4kvvcck9","content":"<p>好久没写东西了。我的性格是无聊的时候总会想去做些什么来打发时间。比如打多塔，比如写一些文字垃圾。当是打多塔还是写东西这个问题摆在我面前时，我会毫不犹豫的选择多塔。可是当夜黑人静时，这个抉择显得有些苍白无力了。所以我才会无聊的写这些来打发时间。不，不是打发，应该说是收留。如果时间是一个孩子，那么他一定很落寞，因为每当漫漫长夜降临时，他总是很容易被人们遗忘，难怪我也总觉得睡觉的时候时间是过得最快的，当然不包括睡不着觉的情况，因为时间这孩子总会找睡不着的作伴。</p>\n<span id=\"more\"></span>\n\n<p>不然岂不无聊死。我意识到我又胡思乱想了，哎，不知道是怎么地。我深刻地认识到在写东西的时候，我总会胡思乱想，胡思乱想的时候我会发呆，发呆的时候时间会过得很快，可我还是没把时间忘记，反而刻意地去提起。为了什么呢？难道是潜意识里时间的紧迫感？后天又要考试了，时间真的很紧额，明天开始，要好好的，认认真真的复习了，有的还得抓紧预习。。。不写了，脑子里波涛汹涌，再写下去就真的得陪时间作伴了。我的特点就是无聊的时候偶尔会写些东西，写东西的时候我会胡思乱想，胡思乱想的时候我会写不出东西，因为我会发呆，发呆的时候感觉脑子里满是东西，可我又没时间把它写出来，有时间的时候又会把那时脑子里的想法忘了。总而言之，我是写不出东西的。纵观全文，都是废话，所以我又制造了一篇文字垃圾。。。</p>\n","site":{"data":{}},"related_posts":[],"length":506,"excerpt":"<p>好久没写东西了。我的性格是无聊的时候总会想去做些什么来打发时间。比如打多塔，比如写一些文字垃圾。当是打多塔还是写东西这个问题摆在我面前时，我会毫不犹豫的选择多塔。可是当夜黑人静时，这个抉择显得有些苍白无力了。所以我才会无聊的写这些来打发时间。不，不是打发，应该说是收留。如果时间是一个孩子，那么他一定很落寞，因为每当漫漫长夜降临时，他总是很容易被人们遗忘，难怪我也总觉得睡觉的时候时间是过得最快的，当然不包括睡不着觉的情况，因为时间这孩子总会找睡不着的作伴。</p>","more":"<p>不然岂不无聊死。我意识到我又胡思乱想了，哎，不知道是怎么地。我深刻地认识到在写东西的时候，我总会胡思乱想，胡思乱想的时候我会发呆，发呆的时候时间会过得很快，可我还是没把时间忘记，反而刻意地去提起。为了什么呢？难道是潜意识里时间的紧迫感？后天又要考试了，时间真的很紧额，明天开始，要好好的，认认真真的复习了，有的还得抓紧预习。。。不写了，脑子里波涛汹涌，再写下去就真的得陪时间作伴了。我的特点就是无聊的时候偶尔会写些东西，写东西的时候我会胡思乱想，胡思乱想的时候我会写不出东西，因为我会发呆，发呆的时候感觉脑子里满是东西，可我又没时间把它写出来，有时间的时候又会把那时脑子里的想法忘了。总而言之，我是写不出东西的。纵观全文，都是废话，所以我又制造了一篇文字垃圾。。。</p>"},{"title":"日志-2013-01-07","date":"2013-01-07T07:16:10.000Z","tags":null,"categories":["日志"],"_content":"\n2013 年 1 月 7 号，时间就这样随心所欲地定格在刚刚醒来的指尖，释放出可见度一千米朦胧又朦胧夹杂着阴霾的空间，在霜花还未凋零的时候，看到刚刚在你眼里像孤魂野鬼样完全忽略了万有引力定律迅速飘过的文字的朋友，一定想吐槽我吧，这一点关系都没有，是谁都会蔑视这些写白烂又扯瞎毫无意义不尊重文学甚至见光死的文字的主人，但请不要吐槽这些被我弄得乱七八糟词不达意语无伦次的文字，我对文字表示深深的歉意并对自己表示浓浓的遗憾。无法控制自己的胡思乱想和向往自由的神经，后面不带“病”字，因为我的字典里已经没有了“控制”一词，所以逻辑思维像先打雷后下雨一样正常，所以后面不带“病”字像一加一等于二一样是对的。\n\n<!-- more -->\n\n这是一个寒冷少有阳光提醒学生睡懒觉的冬天，面临着即将到来令人提心吊胆亚历山大有挂科节奏的考试曲调，我依然处变不惊面不改色沉着冷静地面对着，不依不饶不烦不躁不悲不喜，它如果长了眼睛看到我如此淡定从容的态度一定对我望而生畏凌乱了挂科节奏像武侠人物一样双腿颤抖四肢无力轻袖一拂瘫软在地吧，可是这些都是我虚无缥缈幻梦泡影般不切实际的想象，就像一串漂浮在空气里无法脚踏实地一点即破的炫彩泡泡样。时间肯定是一个睡眠质量很差的孩纸，在听到外面嘈杂的喧哗之后便突然惊醒准时告诉我该起床吃饭复习了，我又有何徳何能反抗这随波逐流随遇而安的时间呢！……………\n","source":"journal/journal-2013-01-07.md","raw":"---\ntitle: 日志-2013-01-07\ndate: 2013-01-07 15:16:10\ntags:\ncategories:\n  - 日志\n---\n\n2013 年 1 月 7 号，时间就这样随心所欲地定格在刚刚醒来的指尖，释放出可见度一千米朦胧又朦胧夹杂着阴霾的空间，在霜花还未凋零的时候，看到刚刚在你眼里像孤魂野鬼样完全忽略了万有引力定律迅速飘过的文字的朋友，一定想吐槽我吧，这一点关系都没有，是谁都会蔑视这些写白烂又扯瞎毫无意义不尊重文学甚至见光死的文字的主人，但请不要吐槽这些被我弄得乱七八糟词不达意语无伦次的文字，我对文字表示深深的歉意并对自己表示浓浓的遗憾。无法控制自己的胡思乱想和向往自由的神经，后面不带“病”字，因为我的字典里已经没有了“控制”一词，所以逻辑思维像先打雷后下雨一样正常，所以后面不带“病”字像一加一等于二一样是对的。\n\n<!-- more -->\n\n这是一个寒冷少有阳光提醒学生睡懒觉的冬天，面临着即将到来令人提心吊胆亚历山大有挂科节奏的考试曲调，我依然处变不惊面不改色沉着冷静地面对着，不依不饶不烦不躁不悲不喜，它如果长了眼睛看到我如此淡定从容的态度一定对我望而生畏凌乱了挂科节奏像武侠人物一样双腿颤抖四肢无力轻袖一拂瘫软在地吧，可是这些都是我虚无缥缈幻梦泡影般不切实际的想象，就像一串漂浮在空气里无法脚踏实地一点即破的炫彩泡泡样。时间肯定是一个睡眠质量很差的孩纸，在听到外面嘈杂的喧哗之后便突然惊醒准时告诉我该起床吃饭复习了，我又有何徳何能反抗这随波逐流随遇而安的时间呢！……………\n","updated":"2023-09-03T07:17:16.744Z","path":"journal/journal-2013-01-07.html","comments":1,"layout":"page","_id":"clq4xe1db0018tz2hhlk5cjdy","content":"<p>2013 年 1 月 7 号，时间就这样随心所欲地定格在刚刚醒来的指尖，释放出可见度一千米朦胧又朦胧夹杂着阴霾的空间，在霜花还未凋零的时候，看到刚刚在你眼里像孤魂野鬼样完全忽略了万有引力定律迅速飘过的文字的朋友，一定想吐槽我吧，这一点关系都没有，是谁都会蔑视这些写白烂又扯瞎毫无意义不尊重文学甚至见光死的文字的主人，但请不要吐槽这些被我弄得乱七八糟词不达意语无伦次的文字，我对文字表示深深的歉意并对自己表示浓浓的遗憾。无法控制自己的胡思乱想和向往自由的神经，后面不带“病”字，因为我的字典里已经没有了“控制”一词，所以逻辑思维像先打雷后下雨一样正常，所以后面不带“病”字像一加一等于二一样是对的。</p>\n<span id=\"more\"></span>\n\n<p>这是一个寒冷少有阳光提醒学生睡懒觉的冬天，面临着即将到来令人提心吊胆亚历山大有挂科节奏的考试曲调，我依然处变不惊面不改色沉着冷静地面对着，不依不饶不烦不躁不悲不喜，它如果长了眼睛看到我如此淡定从容的态度一定对我望而生畏凌乱了挂科节奏像武侠人物一样双腿颤抖四肢无力轻袖一拂瘫软在地吧，可是这些都是我虚无缥缈幻梦泡影般不切实际的想象，就像一串漂浮在空气里无法脚踏实地一点即破的炫彩泡泡样。时间肯定是一个睡眠质量很差的孩纸，在听到外面嘈杂的喧哗之后便突然惊醒准时告诉我该起床吃饭复习了，我又有何徳何能反抗这随波逐流随遇而安的时间呢！……………</p>\n","site":{"data":{}},"related_posts":[],"length":523,"excerpt":"<p>2013 年 1 月 7 号，时间就这样随心所欲地定格在刚刚醒来的指尖，释放出可见度一千米朦胧又朦胧夹杂着阴霾的空间，在霜花还未凋零的时候，看到刚刚在你眼里像孤魂野鬼样完全忽略了万有引力定律迅速飘过的文字的朋友，一定想吐槽我吧，这一点关系都没有，是谁都会蔑视这些写白烂又扯瞎毫无意义不尊重文学甚至见光死的文字的主人，但请不要吐槽这些被我弄得乱七八糟词不达意语无伦次的文字，我对文字表示深深的歉意并对自己表示浓浓的遗憾。无法控制自己的胡思乱想和向往自由的神经，后面不带“病”字，因为我的字典里已经没有了“控制”一词，所以逻辑思维像先打雷后下雨一样正常，所以后面不带“病”字像一加一等于二一样是对的。</p>","more":"<p>这是一个寒冷少有阳光提醒学生睡懒觉的冬天，面临着即将到来令人提心吊胆亚历山大有挂科节奏的考试曲调，我依然处变不惊面不改色沉着冷静地面对着，不依不饶不烦不躁不悲不喜，它如果长了眼睛看到我如此淡定从容的态度一定对我望而生畏凌乱了挂科节奏像武侠人物一样双腿颤抖四肢无力轻袖一拂瘫软在地吧，可是这些都是我虚无缥缈幻梦泡影般不切实际的想象，就像一串漂浮在空气里无法脚踏实地一点即破的炫彩泡泡样。时间肯定是一个睡眠质量很差的孩纸，在听到外面嘈杂的喧哗之后便突然惊醒准时告诉我该起床吃饭复习了，我又有何徳何能反抗这随波逐流随遇而安的时间呢！……………</p>"},{"title":"日志-2012-01-21","date":"2012-01-21T07:24:44.000Z","tags":null,"categories":["日志"],"_content":"\n（还有一天就迎来了 2012，有点期待被世人称为“世界末日”的来临，因为能亲身经历世界末日也算是一件幸事。以下文字，也算是年终总结吧！）*^o^*十五号的聚会，又让我想起了复读的那些事，首先，要感谢我哥，不是你叫我复读，我当初就会选择了高职，如今也就大二了吧，如果是在武船，我应该去实习了，或许现在还没回家，就像你一样不能回家过年了（一个人在家，真心无聊啊），我也不会认识这所大学里那么多好盆友、好室友。也不会认识复读的那些银：\n\n<!-- more -->\n\n大才子淼哥（我觉得我们的相识貌似有点戏剧化，你说怎么就那么巧，……不解释……下第一节晚自习一起出去散步的片段记忆犹新，喜欢看你写的诗、文章和日志，不知道你有没有继续写下去，真的写得很好，我不知道你语文一百三四十分是怎么考的，只知道这是我亲眼目睹的唯一）；一代歌后老大（老大是你们纸帮的称呼，叫起来还是蛮亲切的哈，在下借用一下这个称谓见谅了，呵呵，很遗憾没来得及加入贵帮啊，为什么说一代歌后呢？因为你唱的歌真的很好听额，听过的人应该都这样认为的吧，喜欢听你讲你的过去、理想，记得你那时有过归隐的想法吧，我也有，不过如今想想，觉得很不现实，人毕竟与这个社会有不可泯灭的联系，割不断的亲情、友情、爱情，时刻羁绊着每一颗归隐的心。你很坚强！）；和我数次同桌的杭哥（强壮高大的外表下却藏着一颗稚嫩的心，不知道那些动漫你看完了没。）；我们敬重的小班长（以后大冷天的还是多穿点，别搞感冒了，对自己好点，因为一辈子不长）；……（此处省略一万字，你们的面容，依旧鲜活地蹲在我的记忆里）→*→ 大学的生活感觉很惬意，一个星期三天假的日子真的令人很舒坦，不过处处暗藏危机，一不小心便会步入颓废的殿堂，突然感觉半年来学得的知识很少很少，大多时间都是在等待中虚度，可就连我究竟在等待着什么都不知道，不可否认这是一杯具，不管我有没有颓废，那都已成过去，来年，我会步入正轨，一直记得那句台词“浪费才华是一种罪过”。大学里的那些事：每一天都有故事发生，每一天都会遇见不同的陌路人，每一天，都是在大飞机底下随波逐流，每一天，都带着一份期待，期待着自己有所改变。忧郁，是一只小小虫，过去总是静静地蹲在我的心峰，现在，我要把它捧出来，轻轻地放在来时的路上。东哥，那 999 个祝福一定不会少的，相信我！另外，除了祝福她，我更要祝福你们！伟哥，我在家有练箫额，会吹两个曲子了，还不错吧，呵呵，收假了要一起打球额，我都好久没摸球了，手有点痒痒滴。飞鸿哥，少玩点 CF，别忘了复习啊，希望你补考过吧。猥哥，收假了教你打 dota，以后就可以一起玩了。小辉辉，你是我们寝室的骄傲，以后要多向你学习额。还有好多同学、益源团队的队友们、老乡们，祝福你们！*^o^*今天，终于盼来了期待多时的雪花，没有想象中的大，不过，那漫天飞舞的姿势，还是很美的，现在的心愿是雪越下越大，希望明天早上能看到一个洁白的世界，喜欢雪，因为雪就像一抹白纱巾，能蒙住世界污秽的眼，也能盖住世界真实的素颜。O(∩*∩)O 最后，祝所有人新春快乐！\n","source":"journal/journal-2012-01-21.md","raw":"---\ntitle: 日志-2012-01-21\ndate: 2012-01-21 15:24:44\ntags:\ncategories:\n  - 日志\n---\n\n（还有一天就迎来了 2012，有点期待被世人称为“世界末日”的来临，因为能亲身经历世界末日也算是一件幸事。以下文字，也算是年终总结吧！）*^o^*十五号的聚会，又让我想起了复读的那些事，首先，要感谢我哥，不是你叫我复读，我当初就会选择了高职，如今也就大二了吧，如果是在武船，我应该去实习了，或许现在还没回家，就像你一样不能回家过年了（一个人在家，真心无聊啊），我也不会认识这所大学里那么多好盆友、好室友。也不会认识复读的那些银：\n\n<!-- more -->\n\n大才子淼哥（我觉得我们的相识貌似有点戏剧化，你说怎么就那么巧，……不解释……下第一节晚自习一起出去散步的片段记忆犹新，喜欢看你写的诗、文章和日志，不知道你有没有继续写下去，真的写得很好，我不知道你语文一百三四十分是怎么考的，只知道这是我亲眼目睹的唯一）；一代歌后老大（老大是你们纸帮的称呼，叫起来还是蛮亲切的哈，在下借用一下这个称谓见谅了，呵呵，很遗憾没来得及加入贵帮啊，为什么说一代歌后呢？因为你唱的歌真的很好听额，听过的人应该都这样认为的吧，喜欢听你讲你的过去、理想，记得你那时有过归隐的想法吧，我也有，不过如今想想，觉得很不现实，人毕竟与这个社会有不可泯灭的联系，割不断的亲情、友情、爱情，时刻羁绊着每一颗归隐的心。你很坚强！）；和我数次同桌的杭哥（强壮高大的外表下却藏着一颗稚嫩的心，不知道那些动漫你看完了没。）；我们敬重的小班长（以后大冷天的还是多穿点，别搞感冒了，对自己好点，因为一辈子不长）；……（此处省略一万字，你们的面容，依旧鲜活地蹲在我的记忆里）→*→ 大学的生活感觉很惬意，一个星期三天假的日子真的令人很舒坦，不过处处暗藏危机，一不小心便会步入颓废的殿堂，突然感觉半年来学得的知识很少很少，大多时间都是在等待中虚度，可就连我究竟在等待着什么都不知道，不可否认这是一杯具，不管我有没有颓废，那都已成过去，来年，我会步入正轨，一直记得那句台词“浪费才华是一种罪过”。大学里的那些事：每一天都有故事发生，每一天都会遇见不同的陌路人，每一天，都是在大飞机底下随波逐流，每一天，都带着一份期待，期待着自己有所改变。忧郁，是一只小小虫，过去总是静静地蹲在我的心峰，现在，我要把它捧出来，轻轻地放在来时的路上。东哥，那 999 个祝福一定不会少的，相信我！另外，除了祝福她，我更要祝福你们！伟哥，我在家有练箫额，会吹两个曲子了，还不错吧，呵呵，收假了要一起打球额，我都好久没摸球了，手有点痒痒滴。飞鸿哥，少玩点 CF，别忘了复习啊，希望你补考过吧。猥哥，收假了教你打 dota，以后就可以一起玩了。小辉辉，你是我们寝室的骄傲，以后要多向你学习额。还有好多同学、益源团队的队友们、老乡们，祝福你们！*^o^*今天，终于盼来了期待多时的雪花，没有想象中的大，不过，那漫天飞舞的姿势，还是很美的，现在的心愿是雪越下越大，希望明天早上能看到一个洁白的世界，喜欢雪，因为雪就像一抹白纱巾，能蒙住世界污秽的眼，也能盖住世界真实的素颜。O(∩*∩)O 最后，祝所有人新春快乐！\n","updated":"2023-09-03T10:22:25.692Z","path":"journal/journal-2012-01-21.html","comments":1,"layout":"page","_id":"clq4xe1db001dtz2h36pmgobi","content":"<p>（还有一天就迎来了 2012，有点期待被世人称为“世界末日”的来临，因为能亲身经历世界末日也算是一件幸事。以下文字，也算是年终总结吧！）<em>^o^</em>十五号的聚会，又让我想起了复读的那些事，首先，要感谢我哥，不是你叫我复读，我当初就会选择了高职，如今也就大二了吧，如果是在武船，我应该去实习了，或许现在还没回家，就像你一样不能回家过年了（一个人在家，真心无聊啊），我也不会认识这所大学里那么多好盆友、好室友。也不会认识复读的那些银：</p>\n<span id=\"more\"></span>\n\n<p>大才子淼哥（我觉得我们的相识貌似有点戏剧化，你说怎么就那么巧，……不解释……下第一节晚自习一起出去散步的片段记忆犹新，喜欢看你写的诗、文章和日志，不知道你有没有继续写下去，真的写得很好，我不知道你语文一百三四十分是怎么考的，只知道这是我亲眼目睹的唯一）；一代歌后老大（老大是你们纸帮的称呼，叫起来还是蛮亲切的哈，在下借用一下这个称谓见谅了，呵呵，很遗憾没来得及加入贵帮啊，为什么说一代歌后呢？因为你唱的歌真的很好听额，听过的人应该都这样认为的吧，喜欢听你讲你的过去、理想，记得你那时有过归隐的想法吧，我也有，不过如今想想，觉得很不现实，人毕竟与这个社会有不可泯灭的联系，割不断的亲情、友情、爱情，时刻羁绊着每一颗归隐的心。你很坚强！）；和我数次同桌的杭哥（强壮高大的外表下却藏着一颗稚嫩的心，不知道那些动漫你看完了没。）；我们敬重的小班长（以后大冷天的还是多穿点，别搞感冒了，对自己好点，因为一辈子不长）；……（此处省略一万字，你们的面容，依旧鲜活地蹲在我的记忆里）→<em>→ 大学的生活感觉很惬意，一个星期三天假的日子真的令人很舒坦，不过处处暗藏危机，一不小心便会步入颓废的殿堂，突然感觉半年来学得的知识很少很少，大多时间都是在等待中虚度，可就连我究竟在等待着什么都不知道，不可否认这是一杯具，不管我有没有颓废，那都已成过去，来年，我会步入正轨，一直记得那句台词“浪费才华是一种罪过”。大学里的那些事：每一天都有故事发生，每一天都会遇见不同的陌路人，每一天，都是在大飞机底下随波逐流，每一天，都带着一份期待，期待着自己有所改变。忧郁，是一只小小虫，过去总是静静地蹲在我的心峰，现在，我要把它捧出来，轻轻地放在来时的路上。东哥，那 999 个祝福一定不会少的，相信我！另外，除了祝福她，我更要祝福你们！伟哥，我在家有练箫额，会吹两个曲子了，还不错吧，呵呵，收假了要一起打球额，我都好久没摸球了，手有点痒痒滴。飞鸿哥，少玩点 CF，别忘了复习啊，希望你补考过吧。猥哥，收假了教你打 dota，以后就可以一起玩了。小辉辉，你是我们寝室的骄傲，以后要多向你学习额。还有好多同学、益源团队的队友们、老乡们，祝福你们！</em>^o^<em>今天，终于盼来了期待多时的雪花，没有想象中的大，不过，那漫天飞舞的姿势，还是很美的，现在的心愿是雪越下越大，希望明天早上能看到一个洁白的世界，喜欢雪，因为雪就像一抹白纱巾，能蒙住世界污秽的眼，也能盖住世界真实的素颜。O(∩</em>∩)O 最后，祝所有人新春快乐！</p>\n","site":{"data":{}},"related_posts":[],"length":1066,"excerpt":"<p>（还有一天就迎来了 2012，有点期待被世人称为“世界末日”的来临，因为能亲身经历世界末日也算是一件幸事。以下文字，也算是年终总结吧！）<em>^o^</em>十五号的聚会，又让我想起了复读的那些事，首先，要感谢我哥，不是你叫我复读，我当初就会选择了高职，如今也就大二了吧，如果是在武船，我应该去实习了，或许现在还没回家，就像你一样不能回家过年了（一个人在家，真心无聊啊），我也不会认识这所大学里那么多好盆友、好室友。也不会认识复读的那些银：</p>","more":"<p>大才子淼哥（我觉得我们的相识貌似有点戏剧化，你说怎么就那么巧，……不解释……下第一节晚自习一起出去散步的片段记忆犹新，喜欢看你写的诗、文章和日志，不知道你有没有继续写下去，真的写得很好，我不知道你语文一百三四十分是怎么考的，只知道这是我亲眼目睹的唯一）；一代歌后老大（老大是你们纸帮的称呼，叫起来还是蛮亲切的哈，在下借用一下这个称谓见谅了，呵呵，很遗憾没来得及加入贵帮啊，为什么说一代歌后呢？因为你唱的歌真的很好听额，听过的人应该都这样认为的吧，喜欢听你讲你的过去、理想，记得你那时有过归隐的想法吧，我也有，不过如今想想，觉得很不现实，人毕竟与这个社会有不可泯灭的联系，割不断的亲情、友情、爱情，时刻羁绊着每一颗归隐的心。你很坚强！）；和我数次同桌的杭哥（强壮高大的外表下却藏着一颗稚嫩的心，不知道那些动漫你看完了没。）；我们敬重的小班长（以后大冷天的还是多穿点，别搞感冒了，对自己好点，因为一辈子不长）；……（此处省略一万字，你们的面容，依旧鲜活地蹲在我的记忆里）→<em>→ 大学的生活感觉很惬意，一个星期三天假的日子真的令人很舒坦，不过处处暗藏危机，一不小心便会步入颓废的殿堂，突然感觉半年来学得的知识很少很少，大多时间都是在等待中虚度，可就连我究竟在等待着什么都不知道，不可否认这是一杯具，不管我有没有颓废，那都已成过去，来年，我会步入正轨，一直记得那句台词“浪费才华是一种罪过”。大学里的那些事：每一天都有故事发生，每一天都会遇见不同的陌路人，每一天，都是在大飞机底下随波逐流，每一天，都带着一份期待，期待着自己有所改变。忧郁，是一只小小虫，过去总是静静地蹲在我的心峰，现在，我要把它捧出来，轻轻地放在来时的路上。东哥，那 999 个祝福一定不会少的，相信我！另外，除了祝福她，我更要祝福你们！伟哥，我在家有练箫额，会吹两个曲子了，还不错吧，呵呵，收假了要一起打球额，我都好久没摸球了，手有点痒痒滴。飞鸿哥，少玩点 CF，别忘了复习啊，希望你补考过吧。猥哥，收假了教你打 dota，以后就可以一起玩了。小辉辉，你是我们寝室的骄傲，以后要多向你学习额。还有好多同学、益源团队的队友们、老乡们，祝福你们！</em>^o^<em>今天，终于盼来了期待多时的雪花，没有想象中的大，不过，那漫天飞舞的姿势，还是很美的，现在的心愿是雪越下越大，希望明天早上能看到一个洁白的世界，喜欢雪，因为雪就像一抹白纱巾，能蒙住世界污秽的眼，也能盖住世界真实的素颜。O(∩</em>∩)O 最后，祝所有人新春快乐！</p>"},{"title":"日志-2013-08-07","date":"2013-08-07T07:13:37.000Z","tags":null,"categories":["日志"],"_content":"\n写这篇日志的时候，是在晚上 23 点，前往武昌的火车上。\n这是第二次坐火车，和二哥一起，下午两点多出发，火车上有三连坐和二连坐，我们正好是二连做，刚刚看了下座位号，44 号，没错，是 22 的二倍，对面坐着两个女孩，今天好像和二结下不解之缘，是不是写这篇文章也是很二的呢？\n很多时候，第一次才是影响最深刻的，可是，没有写下第一次坐火车。\n\n<!-- more -->\n\n原因可能有以下几种，其一，很久没写文章了以致不知道从哪下手，就像很久没玩 DOTA 不知道该玩哪种英雄样，索性不玩。\n其二，没有现在这么无聊以致用写文字的方式来打发时间，因为第一次时是以打牌的方式。\n其三，我没有找到一个很好地理由即使是第一次也不算是一种理由，因为第一次太多太多，任何时刻，任何地点，都可以强词夺理到第一次，比如现在的第二次，却是我第一次在火车上写东西，第一次和二哥坐火车，第一次坐 44 号，第一次......\n甚至会觉得无论何时何地都有其客观意义上的第一次，只是被我们主观意志所强迫，只在乎我们在乎的第一次，而忽视客观存在的第一次，或许是刻意为之，亦或许是不在意。\n所以，以下的内容是第二次坐火车的内容，不是第一次。\n我一直都觉得，二哥是个好人，当然用好人二字形容是远远不够的，为人老实正直谦逊，性格温和，不管是对人对事，或对朋友还是陌生人，都是一种我认为很对的方式。\n现在二哥正在我旁边熟睡着，或许也没有熟睡，因为在火车上想睡得很熟是一种很难完成的事。就像当年听老师说有的人可以站着都睡着一样，我相信那需要一定的本领，可能练成了睡梦罗汉呢，除非他是真的有两天没睡觉了。\n所以我不便写太多关于二哥的事来证明他是一个好人这一真理，我可不想在他想睡觉的时候打扰到他，因为打扰一个人睡觉特别是在他很想睡的时候是罪不可恕的。不愿做罪人的我，只好写些别的了。\n对面睡着两个女孩，或许没睡着，至于到底有没有睡着不能确定，唯一确定的是她们都伏在桌子上了。\n在电影里，经常会遇到有人装死，特别是战争片，装死的目的是想活命，或者有更深层次的使命，其实检查他们有没有真的死去是很简单的，只需要弯下腰拿出食指和中指，最好是食指和中指并在一起，这样看起来更专业点，然后检查他们颈部的脉动，如果没有脉跳的话有百分之九十九的几率是死亡了的，除非他们有特异功能或是世外神功。\n不过我可不会无聊到去检查对面两位女孩有没有睡着，更不想让一句“你神经病啊！！！”来成为陌生人和我的首次问候。\n没错，是首次，你会相信我和对面的女孩从上车到现在还没说过一句话吗?如果你了解我，你就会相信！\n可是我不相信，因为我自己都不了解我。\n在火车驶向黑夜的途中，倒退的除了窗外的风景，还有脑海里渐进的记忆，夹杂着些许思念。\n思念的颜色应该和途中窗外彩虹的颜色一样的吧，而记忆，应该是白色的，因为那是窗外云朵的颜色。\n只有在特定的地点，特定的时间，才会看到彩虹，而云朵，只要是白天，一般都能遇见的吧。\n离开一个城市，只离开了一半，因为是在空间上的离开，而时间上一直都未曾远去，除非我死了，那才算是离开吧。所以除了一丝不舍之外好像没有太多其他的情感。在未来的某一天，请允许我借用一下灰太狼的口头禅，我还会再回来的。\n来深圳唯一的目的，就是看海，那是我小时候的一个心愿。\n当看到海的第一眼，感觉和想象中的有些许不同，想象中的海，除了沙滩，前方便是一望无际的大海，没有岛屿，也没有左右两旁的高山，海的尽头，便是天涯。海水是蓝色的，深蓝，天空也是蓝色的，蔚蓝，虽然我不知道这两中蓝有什么区别，但我相信他们是有区别的，那也是大海和天空的区别。波涛是汹涌的，最少有一米高，浪花拍打着海边的石岸，声音能在贝壳里听到，贝壳就藏在石头下面，像是录音带一样记录着每一次浪花击岸的声音。海水里没有人在游玩，在海的心里是平静的。\n而当我看到真正的海时，发现原来很多时候想象是错误的。\n现实里的海，海水是蓝的，不过不是一成不变的蓝，靠近沙滩的一片和江水的颜色差不多，然后放眼望去，远方的海才有一些想象中的蓝色。\n波涛也没有想象中的高，有个二十厘米高就算是稀有的了。海边也没看到石岸，更不要说是贝壳了，估计都被商人捡完了。\n虽说没有想象中的美。不过这才是现实，这是现实的美，美得真实，不做作。也是极好的，不是么?\n很多时候我们总是期望的太高，当现实中并没有那么高时，我们的心情通常会落得很低，高到太空的期望会得到低到尘埃的失望的，不过上帝在给我们脑海里太空的美时也给了我们身边尘埃的美，只是通常被我们忽略而已。\n这不是重点，重点是我们经常会忽略身边的人。\n所以，写这边文章用意在于告诉自己，借用牛蛙的口头禅，“是时候懂得珍惜了。”\n","source":"journal/journal-2013-08-07.md","raw":"---\ntitle: 日志-2013-08-07\ndate: 2013-08-07 15:13:37\ntags:\ncategories:\n  - 日志\n---\n\n写这篇日志的时候，是在晚上 23 点，前往武昌的火车上。\n这是第二次坐火车，和二哥一起，下午两点多出发，火车上有三连坐和二连坐，我们正好是二连做，刚刚看了下座位号，44 号，没错，是 22 的二倍，对面坐着两个女孩，今天好像和二结下不解之缘，是不是写这篇文章也是很二的呢？\n很多时候，第一次才是影响最深刻的，可是，没有写下第一次坐火车。\n\n<!-- more -->\n\n原因可能有以下几种，其一，很久没写文章了以致不知道从哪下手，就像很久没玩 DOTA 不知道该玩哪种英雄样，索性不玩。\n其二，没有现在这么无聊以致用写文字的方式来打发时间，因为第一次时是以打牌的方式。\n其三，我没有找到一个很好地理由即使是第一次也不算是一种理由，因为第一次太多太多，任何时刻，任何地点，都可以强词夺理到第一次，比如现在的第二次，却是我第一次在火车上写东西，第一次和二哥坐火车，第一次坐 44 号，第一次......\n甚至会觉得无论何时何地都有其客观意义上的第一次，只是被我们主观意志所强迫，只在乎我们在乎的第一次，而忽视客观存在的第一次，或许是刻意为之，亦或许是不在意。\n所以，以下的内容是第二次坐火车的内容，不是第一次。\n我一直都觉得，二哥是个好人，当然用好人二字形容是远远不够的，为人老实正直谦逊，性格温和，不管是对人对事，或对朋友还是陌生人，都是一种我认为很对的方式。\n现在二哥正在我旁边熟睡着，或许也没有熟睡，因为在火车上想睡得很熟是一种很难完成的事。就像当年听老师说有的人可以站着都睡着一样，我相信那需要一定的本领，可能练成了睡梦罗汉呢，除非他是真的有两天没睡觉了。\n所以我不便写太多关于二哥的事来证明他是一个好人这一真理，我可不想在他想睡觉的时候打扰到他，因为打扰一个人睡觉特别是在他很想睡的时候是罪不可恕的。不愿做罪人的我，只好写些别的了。\n对面睡着两个女孩，或许没睡着，至于到底有没有睡着不能确定，唯一确定的是她们都伏在桌子上了。\n在电影里，经常会遇到有人装死，特别是战争片，装死的目的是想活命，或者有更深层次的使命，其实检查他们有没有真的死去是很简单的，只需要弯下腰拿出食指和中指，最好是食指和中指并在一起，这样看起来更专业点，然后检查他们颈部的脉动，如果没有脉跳的话有百分之九十九的几率是死亡了的，除非他们有特异功能或是世外神功。\n不过我可不会无聊到去检查对面两位女孩有没有睡着，更不想让一句“你神经病啊！！！”来成为陌生人和我的首次问候。\n没错，是首次，你会相信我和对面的女孩从上车到现在还没说过一句话吗?如果你了解我，你就会相信！\n可是我不相信，因为我自己都不了解我。\n在火车驶向黑夜的途中，倒退的除了窗外的风景，还有脑海里渐进的记忆，夹杂着些许思念。\n思念的颜色应该和途中窗外彩虹的颜色一样的吧，而记忆，应该是白色的，因为那是窗外云朵的颜色。\n只有在特定的地点，特定的时间，才会看到彩虹，而云朵，只要是白天，一般都能遇见的吧。\n离开一个城市，只离开了一半，因为是在空间上的离开，而时间上一直都未曾远去，除非我死了，那才算是离开吧。所以除了一丝不舍之外好像没有太多其他的情感。在未来的某一天，请允许我借用一下灰太狼的口头禅，我还会再回来的。\n来深圳唯一的目的，就是看海，那是我小时候的一个心愿。\n当看到海的第一眼，感觉和想象中的有些许不同，想象中的海，除了沙滩，前方便是一望无际的大海，没有岛屿，也没有左右两旁的高山，海的尽头，便是天涯。海水是蓝色的，深蓝，天空也是蓝色的，蔚蓝，虽然我不知道这两中蓝有什么区别，但我相信他们是有区别的，那也是大海和天空的区别。波涛是汹涌的，最少有一米高，浪花拍打着海边的石岸，声音能在贝壳里听到，贝壳就藏在石头下面，像是录音带一样记录着每一次浪花击岸的声音。海水里没有人在游玩，在海的心里是平静的。\n而当我看到真正的海时，发现原来很多时候想象是错误的。\n现实里的海，海水是蓝的，不过不是一成不变的蓝，靠近沙滩的一片和江水的颜色差不多，然后放眼望去，远方的海才有一些想象中的蓝色。\n波涛也没有想象中的高，有个二十厘米高就算是稀有的了。海边也没看到石岸，更不要说是贝壳了，估计都被商人捡完了。\n虽说没有想象中的美。不过这才是现实，这是现实的美，美得真实，不做作。也是极好的，不是么?\n很多时候我们总是期望的太高，当现实中并没有那么高时，我们的心情通常会落得很低，高到太空的期望会得到低到尘埃的失望的，不过上帝在给我们脑海里太空的美时也给了我们身边尘埃的美，只是通常被我们忽略而已。\n这不是重点，重点是我们经常会忽略身边的人。\n所以，写这边文章用意在于告诉自己，借用牛蛙的口头禅，“是时候懂得珍惜了。”\n","updated":"2023-09-03T07:14:36.597Z","path":"journal/journal-2013-08-07.html","comments":1,"layout":"page","_id":"clq4xe1db001gtz2h9098gggg","content":"<p>写这篇日志的时候，是在晚上 23 点，前往武昌的火车上。<br>这是第二次坐火车，和二哥一起，下午两点多出发，火车上有三连坐和二连坐，我们正好是二连做，刚刚看了下座位号，44 号，没错，是 22 的二倍，对面坐着两个女孩，今天好像和二结下不解之缘，是不是写这篇文章也是很二的呢？<br>很多时候，第一次才是影响最深刻的，可是，没有写下第一次坐火车。</p>\n<span id=\"more\"></span>\n\n<p>原因可能有以下几种，其一，很久没写文章了以致不知道从哪下手，就像很久没玩 DOTA 不知道该玩哪种英雄样，索性不玩。<br>其二，没有现在这么无聊以致用写文字的方式来打发时间，因为第一次时是以打牌的方式。<br>其三，我没有找到一个很好地理由即使是第一次也不算是一种理由，因为第一次太多太多，任何时刻，任何地点，都可以强词夺理到第一次，比如现在的第二次，却是我第一次在火车上写东西，第一次和二哥坐火车，第一次坐 44 号，第一次……<br>甚至会觉得无论何时何地都有其客观意义上的第一次，只是被我们主观意志所强迫，只在乎我们在乎的第一次，而忽视客观存在的第一次，或许是刻意为之，亦或许是不在意。<br>所以，以下的内容是第二次坐火车的内容，不是第一次。<br>我一直都觉得，二哥是个好人，当然用好人二字形容是远远不够的，为人老实正直谦逊，性格温和，不管是对人对事，或对朋友还是陌生人，都是一种我认为很对的方式。<br>现在二哥正在我旁边熟睡着，或许也没有熟睡，因为在火车上想睡得很熟是一种很难完成的事。就像当年听老师说有的人可以站着都睡着一样，我相信那需要一定的本领，可能练成了睡梦罗汉呢，除非他是真的有两天没睡觉了。<br>所以我不便写太多关于二哥的事来证明他是一个好人这一真理，我可不想在他想睡觉的时候打扰到他，因为打扰一个人睡觉特别是在他很想睡的时候是罪不可恕的。不愿做罪人的我，只好写些别的了。<br>对面睡着两个女孩，或许没睡着，至于到底有没有睡着不能确定，唯一确定的是她们都伏在桌子上了。<br>在电影里，经常会遇到有人装死，特别是战争片，装死的目的是想活命，或者有更深层次的使命，其实检查他们有没有真的死去是很简单的，只需要弯下腰拿出食指和中指，最好是食指和中指并在一起，这样看起来更专业点，然后检查他们颈部的脉动，如果没有脉跳的话有百分之九十九的几率是死亡了的，除非他们有特异功能或是世外神功。<br>不过我可不会无聊到去检查对面两位女孩有没有睡着，更不想让一句“你神经病啊！！！”来成为陌生人和我的首次问候。<br>没错，是首次，你会相信我和对面的女孩从上车到现在还没说过一句话吗?如果你了解我，你就会相信！<br>可是我不相信，因为我自己都不了解我。<br>在火车驶向黑夜的途中，倒退的除了窗外的风景，还有脑海里渐进的记忆，夹杂着些许思念。<br>思念的颜色应该和途中窗外彩虹的颜色一样的吧，而记忆，应该是白色的，因为那是窗外云朵的颜色。<br>只有在特定的地点，特定的时间，才会看到彩虹，而云朵，只要是白天，一般都能遇见的吧。<br>离开一个城市，只离开了一半，因为是在空间上的离开，而时间上一直都未曾远去，除非我死了，那才算是离开吧。所以除了一丝不舍之外好像没有太多其他的情感。在未来的某一天，请允许我借用一下灰太狼的口头禅，我还会再回来的。<br>来深圳唯一的目的，就是看海，那是我小时候的一个心愿。<br>当看到海的第一眼，感觉和想象中的有些许不同，想象中的海，除了沙滩，前方便是一望无际的大海，没有岛屿，也没有左右两旁的高山，海的尽头，便是天涯。海水是蓝色的，深蓝，天空也是蓝色的，蔚蓝，虽然我不知道这两中蓝有什么区别，但我相信他们是有区别的，那也是大海和天空的区别。波涛是汹涌的，最少有一米高，浪花拍打着海边的石岸，声音能在贝壳里听到，贝壳就藏在石头下面，像是录音带一样记录着每一次浪花击岸的声音。海水里没有人在游玩，在海的心里是平静的。<br>而当我看到真正的海时，发现原来很多时候想象是错误的。<br>现实里的海，海水是蓝的，不过不是一成不变的蓝，靠近沙滩的一片和江水的颜色差不多，然后放眼望去，远方的海才有一些想象中的蓝色。<br>波涛也没有想象中的高，有个二十厘米高就算是稀有的了。海边也没看到石岸，更不要说是贝壳了，估计都被商人捡完了。<br>虽说没有想象中的美。不过这才是现实，这是现实的美，美得真实，不做作。也是极好的，不是么?<br>很多时候我们总是期望的太高，当现实中并没有那么高时，我们的心情通常会落得很低，高到太空的期望会得到低到尘埃的失望的，不过上帝在给我们脑海里太空的美时也给了我们身边尘埃的美，只是通常被我们忽略而已。<br>这不是重点，重点是我们经常会忽略身边的人。<br>所以，写这边文章用意在于告诉自己，借用牛蛙的口头禅，“是时候懂得珍惜了。”</p>\n","site":{"data":{}},"related_posts":[],"length":1673,"excerpt":"<p>写这篇日志的时候，是在晚上 23 点，前往武昌的火车上。<br>这是第二次坐火车，和二哥一起，下午两点多出发，火车上有三连坐和二连坐，我们正好是二连做，刚刚看了下座位号，44 号，没错，是 22 的二倍，对面坐着两个女孩，今天好像和二结下不解之缘，是不是写这篇文章也是很二的呢？<br>很多时候，第一次才是影响最深刻的，可是，没有写下第一次坐火车。</p>","more":"<p>原因可能有以下几种，其一，很久没写文章了以致不知道从哪下手，就像很久没玩 DOTA 不知道该玩哪种英雄样，索性不玩。<br>其二，没有现在这么无聊以致用写文字的方式来打发时间，因为第一次时是以打牌的方式。<br>其三，我没有找到一个很好地理由即使是第一次也不算是一种理由，因为第一次太多太多，任何时刻，任何地点，都可以强词夺理到第一次，比如现在的第二次，却是我第一次在火车上写东西，第一次和二哥坐火车，第一次坐 44 号，第一次……<br>甚至会觉得无论何时何地都有其客观意义上的第一次，只是被我们主观意志所强迫，只在乎我们在乎的第一次，而忽视客观存在的第一次，或许是刻意为之，亦或许是不在意。<br>所以，以下的内容是第二次坐火车的内容，不是第一次。<br>我一直都觉得，二哥是个好人，当然用好人二字形容是远远不够的，为人老实正直谦逊，性格温和，不管是对人对事，或对朋友还是陌生人，都是一种我认为很对的方式。<br>现在二哥正在我旁边熟睡着，或许也没有熟睡，因为在火车上想睡得很熟是一种很难完成的事。就像当年听老师说有的人可以站着都睡着一样，我相信那需要一定的本领，可能练成了睡梦罗汉呢，除非他是真的有两天没睡觉了。<br>所以我不便写太多关于二哥的事来证明他是一个好人这一真理，我可不想在他想睡觉的时候打扰到他，因为打扰一个人睡觉特别是在他很想睡的时候是罪不可恕的。不愿做罪人的我，只好写些别的了。<br>对面睡着两个女孩，或许没睡着，至于到底有没有睡着不能确定，唯一确定的是她们都伏在桌子上了。<br>在电影里，经常会遇到有人装死，特别是战争片，装死的目的是想活命，或者有更深层次的使命，其实检查他们有没有真的死去是很简单的，只需要弯下腰拿出食指和中指，最好是食指和中指并在一起，这样看起来更专业点，然后检查他们颈部的脉动，如果没有脉跳的话有百分之九十九的几率是死亡了的，除非他们有特异功能或是世外神功。<br>不过我可不会无聊到去检查对面两位女孩有没有睡着，更不想让一句“你神经病啊！！！”来成为陌生人和我的首次问候。<br>没错，是首次，你会相信我和对面的女孩从上车到现在还没说过一句话吗?如果你了解我，你就会相信！<br>可是我不相信，因为我自己都不了解我。<br>在火车驶向黑夜的途中，倒退的除了窗外的风景，还有脑海里渐进的记忆，夹杂着些许思念。<br>思念的颜色应该和途中窗外彩虹的颜色一样的吧，而记忆，应该是白色的，因为那是窗外云朵的颜色。<br>只有在特定的地点，特定的时间，才会看到彩虹，而云朵，只要是白天，一般都能遇见的吧。<br>离开一个城市，只离开了一半，因为是在空间上的离开，而时间上一直都未曾远去，除非我死了，那才算是离开吧。所以除了一丝不舍之外好像没有太多其他的情感。在未来的某一天，请允许我借用一下灰太狼的口头禅，我还会再回来的。<br>来深圳唯一的目的，就是看海，那是我小时候的一个心愿。<br>当看到海的第一眼，感觉和想象中的有些许不同，想象中的海，除了沙滩，前方便是一望无际的大海，没有岛屿，也没有左右两旁的高山，海的尽头，便是天涯。海水是蓝色的，深蓝，天空也是蓝色的，蔚蓝，虽然我不知道这两中蓝有什么区别，但我相信他们是有区别的，那也是大海和天空的区别。波涛是汹涌的，最少有一米高，浪花拍打着海边的石岸，声音能在贝壳里听到，贝壳就藏在石头下面，像是录音带一样记录着每一次浪花击岸的声音。海水里没有人在游玩，在海的心里是平静的。<br>而当我看到真正的海时，发现原来很多时候想象是错误的。<br>现实里的海，海水是蓝的，不过不是一成不变的蓝，靠近沙滩的一片和江水的颜色差不多，然后放眼望去，远方的海才有一些想象中的蓝色。<br>波涛也没有想象中的高，有个二十厘米高就算是稀有的了。海边也没看到石岸，更不要说是贝壳了，估计都被商人捡完了。<br>虽说没有想象中的美。不过这才是现实，这是现实的美，美得真实，不做作。也是极好的，不是么?<br>很多时候我们总是期望的太高，当现实中并没有那么高时，我们的心情通常会落得很低，高到太空的期望会得到低到尘埃的失望的，不过上帝在给我们脑海里太空的美时也给了我们身边尘埃的美，只是通常被我们忽略而已。<br>这不是重点，重点是我们经常会忽略身边的人。<br>所以，写这边文章用意在于告诉自己，借用牛蛙的口头禅，“是时候懂得珍惜了。”</p>"},{"title":"日志-2014-04-20","date":"2014-04-20T07:10:07.000Z","tags":null,"categories":["日志"],"_content":"\n是突然想写一篇日志的，也不知道自己将会传达哪些内容，各何种思想，。清晨的太阳就那样升起来了，是要告知人们今日气候么？还是提醒和我一样还躺在床上的人该起床了？亦或其他的动机，这些连它自己都不知道吧，就像我不知道要写什么一样。\n\n我是从小学的课本上得知太阳是一位公公的，至于究竟是清朝时期的还是现代的公公，书上并没有确切的定义，除非他自己告诉你，不然你永远都不会知晓，就像你不会知晓冰冰阿姨的确切年龄。\n\n<!-- more -->\n\n我是从大学的老师嘴里得知太阳只是一个没有东西包裹着的气球的，至于它内部的气体为何没有逸出，它是怎样释放自身能量来照亮世人，还可以存在多少年，我也不知，也不会惊讶，只是告诉自己这是自然规律，便在心里就少了一些疑问。存在的即是合理的。\n\n如果苹果树上结了苹果，玫瑰花开了花，秋叶从树上飘落到我手上，我还为这些感到惊讶的话，那么不用任何理论证明，就可以定论，我是一个白痴。\n\n白痴是不用忧虑将来的，因为要去将来，会带着同样的理由，就像带着那个理由来到现在一样。所以我少了很多忧虑，虽然我并不是白痴。\n\n绿筱媚青涟，娇荷浮琬琰。\n\n上面这句话是形容女子面容娇嫩，心境平静安宁。看到这句话要从读一本书开始，那本书叫《明年今日，谁还等待》，“明年今日，没有人能预知我们还会遇见谁。即使我忘记他了也会有人提醒：他在等我。\n而你，而我，可能直到明年都还在等待。也许回首才会察觉，原来自己今日找寻的就在眼前。”主人公是安筱沫，当看到这个筱字是，不知道怎么读，然后问同学无果后便想起了百度百科，才得知是小竹子的意思，果然小清新。\n\n不知不觉，后知后觉，已经十一点多了，该起床吃饭了。时间总是这样，从我指缝间溜走还要嘲笑指缝太宽，其实是我故意张开的，因为只有把手指张开的大点才能把握更多。\n","source":"journal/journal-2014-04-20.md","raw":"---\ntitle: 日志-2014-04-20\ndate: 2014-04-20 15:10:07\ntags:\ncategories:\n  - 日志\n---\n\n是突然想写一篇日志的，也不知道自己将会传达哪些内容，各何种思想，。清晨的太阳就那样升起来了，是要告知人们今日气候么？还是提醒和我一样还躺在床上的人该起床了？亦或其他的动机，这些连它自己都不知道吧，就像我不知道要写什么一样。\n\n我是从小学的课本上得知太阳是一位公公的，至于究竟是清朝时期的还是现代的公公，书上并没有确切的定义，除非他自己告诉你，不然你永远都不会知晓，就像你不会知晓冰冰阿姨的确切年龄。\n\n<!-- more -->\n\n我是从大学的老师嘴里得知太阳只是一个没有东西包裹着的气球的，至于它内部的气体为何没有逸出，它是怎样释放自身能量来照亮世人，还可以存在多少年，我也不知，也不会惊讶，只是告诉自己这是自然规律，便在心里就少了一些疑问。存在的即是合理的。\n\n如果苹果树上结了苹果，玫瑰花开了花，秋叶从树上飘落到我手上，我还为这些感到惊讶的话，那么不用任何理论证明，就可以定论，我是一个白痴。\n\n白痴是不用忧虑将来的，因为要去将来，会带着同样的理由，就像带着那个理由来到现在一样。所以我少了很多忧虑，虽然我并不是白痴。\n\n绿筱媚青涟，娇荷浮琬琰。\n\n上面这句话是形容女子面容娇嫩，心境平静安宁。看到这句话要从读一本书开始，那本书叫《明年今日，谁还等待》，“明年今日，没有人能预知我们还会遇见谁。即使我忘记他了也会有人提醒：他在等我。\n而你，而我，可能直到明年都还在等待。也许回首才会察觉，原来自己今日找寻的就在眼前。”主人公是安筱沫，当看到这个筱字是，不知道怎么读，然后问同学无果后便想起了百度百科，才得知是小竹子的意思，果然小清新。\n\n不知不觉，后知后觉，已经十一点多了，该起床吃饭了。时间总是这样，从我指缝间溜走还要嘲笑指缝太宽，其实是我故意张开的，因为只有把手指张开的大点才能把握更多。\n","updated":"2023-09-03T07:10:46.165Z","path":"journal/journal-2014-04-20.html","comments":1,"layout":"page","_id":"clq4xe1db001jtz2hffxue0gx","content":"<p>是突然想写一篇日志的，也不知道自己将会传达哪些内容，各何种思想，。清晨的太阳就那样升起来了，是要告知人们今日气候么？还是提醒和我一样还躺在床上的人该起床了？亦或其他的动机，这些连它自己都不知道吧，就像我不知道要写什么一样。</p>\n<p>我是从小学的课本上得知太阳是一位公公的，至于究竟是清朝时期的还是现代的公公，书上并没有确切的定义，除非他自己告诉你，不然你永远都不会知晓，就像你不会知晓冰冰阿姨的确切年龄。</p>\n<span id=\"more\"></span>\n\n<p>我是从大学的老师嘴里得知太阳只是一个没有东西包裹着的气球的，至于它内部的气体为何没有逸出，它是怎样释放自身能量来照亮世人，还可以存在多少年，我也不知，也不会惊讶，只是告诉自己这是自然规律，便在心里就少了一些疑问。存在的即是合理的。</p>\n<p>如果苹果树上结了苹果，玫瑰花开了花，秋叶从树上飘落到我手上，我还为这些感到惊讶的话，那么不用任何理论证明，就可以定论，我是一个白痴。</p>\n<p>白痴是不用忧虑将来的，因为要去将来，会带着同样的理由，就像带着那个理由来到现在一样。所以我少了很多忧虑，虽然我并不是白痴。</p>\n<p>绿筱媚青涟，娇荷浮琬琰。</p>\n<p>上面这句话是形容女子面容娇嫩，心境平静安宁。看到这句话要从读一本书开始，那本书叫《明年今日，谁还等待》，“明年今日，没有人能预知我们还会遇见谁。即使我忘记他了也会有人提醒：他在等我。<br>而你，而我，可能直到明年都还在等待。也许回首才会察觉，原来自己今日找寻的就在眼前。”主人公是安筱沫，当看到这个筱字是，不知道怎么读，然后问同学无果后便想起了百度百科，才得知是小竹子的意思，果然小清新。</p>\n<p>不知不觉，后知后觉，已经十一点多了，该起床吃饭了。时间总是这样，从我指缝间溜走还要嘲笑指缝太宽，其实是我故意张开的，因为只有把手指张开的大点才能把握更多。</p>\n","site":{"data":{}},"related_posts":[],"length":648,"excerpt":"<p>是突然想写一篇日志的，也不知道自己将会传达哪些内容，各何种思想，。清晨的太阳就那样升起来了，是要告知人们今日气候么？还是提醒和我一样还躺在床上的人该起床了？亦或其他的动机，这些连它自己都不知道吧，就像我不知道要写什么一样。</p>\n<p>我是从小学的课本上得知太阳是一位公公的，至于究竟是清朝时期的还是现代的公公，书上并没有确切的定义，除非他自己告诉你，不然你永远都不会知晓，就像你不会知晓冰冰阿姨的确切年龄。</p>","more":"<p>我是从大学的老师嘴里得知太阳只是一个没有东西包裹着的气球的，至于它内部的气体为何没有逸出，它是怎样释放自身能量来照亮世人，还可以存在多少年，我也不知，也不会惊讶，只是告诉自己这是自然规律，便在心里就少了一些疑问。存在的即是合理的。</p>\n<p>如果苹果树上结了苹果，玫瑰花开了花，秋叶从树上飘落到我手上，我还为这些感到惊讶的话，那么不用任何理论证明，就可以定论，我是一个白痴。</p>\n<p>白痴是不用忧虑将来的，因为要去将来，会带着同样的理由，就像带着那个理由来到现在一样。所以我少了很多忧虑，虽然我并不是白痴。</p>\n<p>绿筱媚青涟，娇荷浮琬琰。</p>\n<p>上面这句话是形容女子面容娇嫩，心境平静安宁。看到这句话要从读一本书开始，那本书叫《明年今日，谁还等待》，“明年今日，没有人能预知我们还会遇见谁。即使我忘记他了也会有人提醒：他在等我。<br>而你，而我，可能直到明年都还在等待。也许回首才会察觉，原来自己今日找寻的就在眼前。”主人公是安筱沫，当看到这个筱字是，不知道怎么读，然后问同学无果后便想起了百度百科，才得知是小竹子的意思，果然小清新。</p>\n<p>不知不觉，后知后觉，已经十一点多了，该起床吃饭了。时间总是这样，从我指缝间溜走还要嘲笑指缝太宽，其实是我故意张开的，因为只有把手指张开的大点才能把握更多。</p>"},{"title":"日志-2014-08-12","date":"2014-08-12T07:04:55.000Z","tags":null,"categories":["日志"],"_content":"\n一直都很矛盾。\n作为一个理科生，却喜欢过几天文艺的生活。我很矛盾，甚至会纠结前面一句的“却”该不该用。我很很矛盾，甚至会觉得前面一句“该不该”在使用上有问题。\n该，或不该，不是我说了算。总而言之，言而总之，是我脑子有问题。\n喜欢过几天文艺的生活，但不愿成为文艺青年。就像有的人想过有钱人的生活，但不想成为有钱人一样。简之，便是，想飞却不愿变成鸟。这不是重点。\n重点是我很矛盾。是走还是留。\n有个人的右边有块很大很大的石头，几乎一座山那么大，他很想看那块石头顶端的风景，可惜尝试爬了很多次都没有成功。最终放弃了，只好向左走，但不管走了多远，看了多少美景，心里却一直念念不忘那块右边的石头，甚至还折返，再试一次。这个人的心中，会永远存在着右边石头的遗憾。甚至会认为，右边石头上的风景，才是最美的。\n\n<!-- more -->\n\n考研会不会是我右边的石头。如果是，我会爬过去吗？我可能爬过去吗？\n根据墨菲定律，有可能发生的事情就一定会发生。可是，我可能吗？\n我不是在怀疑自己的能力，只是在确认一个事实，这个事实就是:我的认知很不正常。\n举一个例子来说。\n当看到上面的“右边的石头”，会有人想为什么不是左边的石头。可是右边的石头与左边的石头有区别么。\n而我的想法是这样的:\n从小学语文知识的大海里，可以捞出一个瓶子，瓶子里装着:右边与左边是对称的。那么右边与前方会不会也是对称的呢？如果把右与左看做一条直线，作 x 轴，前和后也看做一条直线作 y 轴，右和左关于直线 y 轴对称，那么前和右也是关于一条直线对称的，只是那条直线不是 y 轴，而是将 y 轴作秒针历时 15 秒后的直线。进而推出二维平面上的任何两点都是对称的，这里的对称是由其对称轴联系起来，也就是任何两点都是相关联的。如果把维度看作是函数的指数，那么对二维平面的积分便可得三维空间上任意两点的相关联性。再积分，又可得四个维度上的。我们的现实世界也正好是四维的，也就是三维空间加一维时间。那么，在这个世界上，不管是古代还是现代，国内还是国外，人类还是动植物，任何两个物体都是有联系的，只要找到那个关联点，即对称轴。既然有联系，就会相互影响。\n这样的世界岂不很混乱。\n然后，想写一点文字便睡觉，再这样想下去肯定会失眠的。\n\n我躺在碗里。\n碗里的酒水。\n漫过我的双耳。\n吞噬我的头发。\n褪去我的表情。\n撕咬我的骨肉。\n漂白我的血液。\n我举起这碗酒抛洒在大地上。\n不为祭奠。\n只为笑天地虚妄。\n\n事实就是:我的认知很不正常。\n我也很矛盾。\n","source":"journal/journal-2014-08-12.md","raw":"---\ntitle: 日志-2014-08-12\ndate: 2014-08-12 15:04:55\ntags:\ncategories:\n  - 日志\n---\n\n一直都很矛盾。\n作为一个理科生，却喜欢过几天文艺的生活。我很矛盾，甚至会纠结前面一句的“却”该不该用。我很很矛盾，甚至会觉得前面一句“该不该”在使用上有问题。\n该，或不该，不是我说了算。总而言之，言而总之，是我脑子有问题。\n喜欢过几天文艺的生活，但不愿成为文艺青年。就像有的人想过有钱人的生活，但不想成为有钱人一样。简之，便是，想飞却不愿变成鸟。这不是重点。\n重点是我很矛盾。是走还是留。\n有个人的右边有块很大很大的石头，几乎一座山那么大，他很想看那块石头顶端的风景，可惜尝试爬了很多次都没有成功。最终放弃了，只好向左走，但不管走了多远，看了多少美景，心里却一直念念不忘那块右边的石头，甚至还折返，再试一次。这个人的心中，会永远存在着右边石头的遗憾。甚至会认为，右边石头上的风景，才是最美的。\n\n<!-- more -->\n\n考研会不会是我右边的石头。如果是，我会爬过去吗？我可能爬过去吗？\n根据墨菲定律，有可能发生的事情就一定会发生。可是，我可能吗？\n我不是在怀疑自己的能力，只是在确认一个事实，这个事实就是:我的认知很不正常。\n举一个例子来说。\n当看到上面的“右边的石头”，会有人想为什么不是左边的石头。可是右边的石头与左边的石头有区别么。\n而我的想法是这样的:\n从小学语文知识的大海里，可以捞出一个瓶子，瓶子里装着:右边与左边是对称的。那么右边与前方会不会也是对称的呢？如果把右与左看做一条直线，作 x 轴，前和后也看做一条直线作 y 轴，右和左关于直线 y 轴对称，那么前和右也是关于一条直线对称的，只是那条直线不是 y 轴，而是将 y 轴作秒针历时 15 秒后的直线。进而推出二维平面上的任何两点都是对称的，这里的对称是由其对称轴联系起来，也就是任何两点都是相关联的。如果把维度看作是函数的指数，那么对二维平面的积分便可得三维空间上任意两点的相关联性。再积分，又可得四个维度上的。我们的现实世界也正好是四维的，也就是三维空间加一维时间。那么，在这个世界上，不管是古代还是现代，国内还是国外，人类还是动植物，任何两个物体都是有联系的，只要找到那个关联点，即对称轴。既然有联系，就会相互影响。\n这样的世界岂不很混乱。\n然后，想写一点文字便睡觉，再这样想下去肯定会失眠的。\n\n我躺在碗里。\n碗里的酒水。\n漫过我的双耳。\n吞噬我的头发。\n褪去我的表情。\n撕咬我的骨肉。\n漂白我的血液。\n我举起这碗酒抛洒在大地上。\n不为祭奠。\n只为笑天地虚妄。\n\n事实就是:我的认知很不正常。\n我也很矛盾。\n","updated":"2023-09-03T07:07:31.848Z","path":"journal/journal-2014-08-12.html","comments":1,"layout":"page","_id":"clq4xe1dc001ntz2hfww8fb7t","content":"<p>一直都很矛盾。<br>作为一个理科生，却喜欢过几天文艺的生活。我很矛盾，甚至会纠结前面一句的“却”该不该用。我很很矛盾，甚至会觉得前面一句“该不该”在使用上有问题。<br>该，或不该，不是我说了算。总而言之，言而总之，是我脑子有问题。<br>喜欢过几天文艺的生活，但不愿成为文艺青年。就像有的人想过有钱人的生活，但不想成为有钱人一样。简之，便是，想飞却不愿变成鸟。这不是重点。<br>重点是我很矛盾。是走还是留。<br>有个人的右边有块很大很大的石头，几乎一座山那么大，他很想看那块石头顶端的风景，可惜尝试爬了很多次都没有成功。最终放弃了，只好向左走，但不管走了多远，看了多少美景，心里却一直念念不忘那块右边的石头，甚至还折返，再试一次。这个人的心中，会永远存在着右边石头的遗憾。甚至会认为，右边石头上的风景，才是最美的。</p>\n<span id=\"more\"></span>\n\n<p>考研会不会是我右边的石头。如果是，我会爬过去吗？我可能爬过去吗？<br>根据墨菲定律，有可能发生的事情就一定会发生。可是，我可能吗？<br>我不是在怀疑自己的能力，只是在确认一个事实，这个事实就是:我的认知很不正常。<br>举一个例子来说。<br>当看到上面的“右边的石头”，会有人想为什么不是左边的石头。可是右边的石头与左边的石头有区别么。<br>而我的想法是这样的:<br>从小学语文知识的大海里，可以捞出一个瓶子，瓶子里装着:右边与左边是对称的。那么右边与前方会不会也是对称的呢？如果把右与左看做一条直线，作 x 轴，前和后也看做一条直线作 y 轴，右和左关于直线 y 轴对称，那么前和右也是关于一条直线对称的，只是那条直线不是 y 轴，而是将 y 轴作秒针历时 15 秒后的直线。进而推出二维平面上的任何两点都是对称的，这里的对称是由其对称轴联系起来，也就是任何两点都是相关联的。如果把维度看作是函数的指数，那么对二维平面的积分便可得三维空间上任意两点的相关联性。再积分，又可得四个维度上的。我们的现实世界也正好是四维的，也就是三维空间加一维时间。那么，在这个世界上，不管是古代还是现代，国内还是国外，人类还是动植物，任何两个物体都是有联系的，只要找到那个关联点，即对称轴。既然有联系，就会相互影响。<br>这样的世界岂不很混乱。<br>然后，想写一点文字便睡觉，再这样想下去肯定会失眠的。</p>\n<p>我躺在碗里。<br>碗里的酒水。<br>漫过我的双耳。<br>吞噬我的头发。<br>褪去我的表情。<br>撕咬我的骨肉。<br>漂白我的血液。<br>我举起这碗酒抛洒在大地上。<br>不为祭奠。<br>只为笑天地虚妄。</p>\n<p>事实就是:我的认知很不正常。<br>我也很矛盾。</p>\n","site":{"data":{}},"related_posts":[],"length":879,"excerpt":"<p>一直都很矛盾。<br>作为一个理科生，却喜欢过几天文艺的生活。我很矛盾，甚至会纠结前面一句的“却”该不该用。我很很矛盾，甚至会觉得前面一句“该不该”在使用上有问题。<br>该，或不该，不是我说了算。总而言之，言而总之，是我脑子有问题。<br>喜欢过几天文艺的生活，但不愿成为文艺青年。就像有的人想过有钱人的生活，但不想成为有钱人一样。简之，便是，想飞却不愿变成鸟。这不是重点。<br>重点是我很矛盾。是走还是留。<br>有个人的右边有块很大很大的石头，几乎一座山那么大，他很想看那块石头顶端的风景，可惜尝试爬了很多次都没有成功。最终放弃了，只好向左走，但不管走了多远，看了多少美景，心里却一直念念不忘那块右边的石头，甚至还折返，再试一次。这个人的心中，会永远存在着右边石头的遗憾。甚至会认为，右边石头上的风景，才是最美的。</p>","more":"<p>考研会不会是我右边的石头。如果是，我会爬过去吗？我可能爬过去吗？<br>根据墨菲定律，有可能发生的事情就一定会发生。可是，我可能吗？<br>我不是在怀疑自己的能力，只是在确认一个事实，这个事实就是:我的认知很不正常。<br>举一个例子来说。<br>当看到上面的“右边的石头”，会有人想为什么不是左边的石头。可是右边的石头与左边的石头有区别么。<br>而我的想法是这样的:<br>从小学语文知识的大海里，可以捞出一个瓶子，瓶子里装着:右边与左边是对称的。那么右边与前方会不会也是对称的呢？如果把右与左看做一条直线，作 x 轴，前和后也看做一条直线作 y 轴，右和左关于直线 y 轴对称，那么前和右也是关于一条直线对称的，只是那条直线不是 y 轴，而是将 y 轴作秒针历时 15 秒后的直线。进而推出二维平面上的任何两点都是对称的，这里的对称是由其对称轴联系起来，也就是任何两点都是相关联的。如果把维度看作是函数的指数，那么对二维平面的积分便可得三维空间上任意两点的相关联性。再积分，又可得四个维度上的。我们的现实世界也正好是四维的，也就是三维空间加一维时间。那么，在这个世界上，不管是古代还是现代，国内还是国外，人类还是动植物，任何两个物体都是有联系的，只要找到那个关联点，即对称轴。既然有联系，就会相互影响。<br>这样的世界岂不很混乱。<br>然后，想写一点文字便睡觉，再这样想下去肯定会失眠的。</p>\n<p>我躺在碗里。<br>碗里的酒水。<br>漫过我的双耳。<br>吞噬我的头发。<br>褪去我的表情。<br>撕咬我的骨肉。<br>漂白我的血液。<br>我举起这碗酒抛洒在大地上。<br>不为祭奠。<br>只为笑天地虚妄。</p>\n<p>事实就是:我的认知很不正常。<br>我也很矛盾。</p>"},{"title":"日志-2012-01-02","date":"2012-01-02T10:23:37.000Z","tags":null,"categories":["日志"],"_content":"\n静谧的夜\n像熟睡的婴儿\n安详，温馨\n漫无边际的黑暗\n蕴含着神秘的气息\n抛去忧伤的利剑\n卸下浮躁的铠甲\n安稳地躺下一世浮华\n倾听，过往的旋律\n欢乐与悲伤的起伏\n宛若苦笑的离合\n是命运手中的针线\n在生命里任意穿梭。\n","source":"journal/journal-2012-01-02.md","raw":"---\ntitle: 日志-2012-01-02\ndate: 2012-01-02 18:23:37\ntags:\ncategories:\n  - 日志\n---\n\n静谧的夜\n像熟睡的婴儿\n安详，温馨\n漫无边际的黑暗\n蕴含着神秘的气息\n抛去忧伤的利剑\n卸下浮躁的铠甲\n安稳地躺下一世浮华\n倾听，过往的旋律\n欢乐与悲伤的起伏\n宛若苦笑的离合\n是命运手中的针线\n在生命里任意穿梭。\n","updated":"2023-09-03T10:28:42.297Z","path":"journal/journal-2012-01-02.html","comments":1,"layout":"page","_id":"clq4xe1dd001qtz2h0xpo30ph","content":"<p>静谧的夜<br>像熟睡的婴儿<br>安详，温馨<br>漫无边际的黑暗<br>蕴含着神秘的气息<br>抛去忧伤的利剑<br>卸下浮躁的铠甲<br>安稳地躺下一世浮华<br>倾听，过往的旋律<br>欢乐与悲伤的起伏<br>宛若苦笑的离合<br>是命运手中的针线<br>在生命里任意穿梭。</p>\n","site":{"data":{}},"related_posts":[],"length":90,"excerpt":"","more":"<p>静谧的夜<br>像熟睡的婴儿<br>安详，温馨<br>漫无边际的黑暗<br>蕴含着神秘的气息<br>抛去忧伤的利剑<br>卸下浮躁的铠甲<br>安稳地躺下一世浮华<br>倾听，过往的旋律<br>欢乐与悲伤的起伏<br>宛若苦笑的离合<br>是命运手中的针线<br>在生命里任意穿梭。</p>\n"},{"title":"日志-2012-09-18","date":"2012-09-18T07:21:27.000Z","tags":null,"categories":["日志"],"_content":"\n第一次用电脑写东西，发现原来分段是一件很简单的事。但用手机分段还是不会额。\n\n就像是在冬季看霜露是一件很简单的事，如果在夏天，便感觉很无赖了。\n\n这几天心里颇不宁静。\n\n如果这是朱自清的话，他或许会在晚上的时候去荷塘边散散心、看看月光。\n\n<!-- more -->\n\n可我不是他，更达不到他的心境。何况我们学校里没有荷塘。至于月色倒是可以在恒青湖旁驻足一番。\n\n如果是我，我会很心烦、会浮躁。甚至不愿出去走走来平静心情。\n\n所以我必须找点东西来发泄下，不然过几天我会患抑郁症的。\n\n这几天心里颇不平静。\n\n上课没有认真听讲了，作业也是基本不想做了，天天把 DNF 疲劳刷干了，DOTA 都没激情了。晚上偶尔会失眠，偶尔会感觉有些冷，偶尔看天会觉得天色阴沉，偶尔会胡思乱想，就像现在。\n\n“你最想去的地方是哪儿？”\n“我想去非洲大草原。你呢？”\n“西藏吧！”\n“啊！为什么呀？”\n“嗯...看看那边的天吧！听说那边的天空很蓝很蓝额！你呢？”\n“我想去看看小草，还有体会那里的气温，接触那里热情真诚的黑人 。”\n“他们说英语吗？”\n“说啊！”\n”那你要学好英语额！“\n“嗯...你应该是向往自由的人。而我是热爱大自然的人。”\n“或许是吧！”\n\n或许我是向往自由的吧，有时我会很放纵自己，做自己想做的事，即使是不正确的、不明智的，但从未后悔。\n\n“生活随心所欲，把精彩留给自己。”这句话我默默记了六年。害怕把它忘记。\n\n如果可以回到过去，我希望从新来过，但这并不代表后悔。\n\n就像如果我能考上个好大学，我希望会在高考那年好好奋斗，但并不代表后悔自己走过的路。\n\n不一样的人生，不一样的精彩吧。\n\n不一样的时间，不一样的心情。\n\n所以写到这的时候，好像平静了许多。\n\n窗外是黑夜的酣睡声。\n\n就让它安静的睡吧。\n","source":"journal/journal-2012-09-18.md","raw":"---\ntitle: 日志-2012-09-18\ndate: 2012-09-18 15:21:27\ntags:\ncategories:\n  - 日志\n---\n\n第一次用电脑写东西，发现原来分段是一件很简单的事。但用手机分段还是不会额。\n\n就像是在冬季看霜露是一件很简单的事，如果在夏天，便感觉很无赖了。\n\n这几天心里颇不宁静。\n\n如果这是朱自清的话，他或许会在晚上的时候去荷塘边散散心、看看月光。\n\n<!-- more -->\n\n可我不是他，更达不到他的心境。何况我们学校里没有荷塘。至于月色倒是可以在恒青湖旁驻足一番。\n\n如果是我，我会很心烦、会浮躁。甚至不愿出去走走来平静心情。\n\n所以我必须找点东西来发泄下，不然过几天我会患抑郁症的。\n\n这几天心里颇不平静。\n\n上课没有认真听讲了，作业也是基本不想做了，天天把 DNF 疲劳刷干了，DOTA 都没激情了。晚上偶尔会失眠，偶尔会感觉有些冷，偶尔看天会觉得天色阴沉，偶尔会胡思乱想，就像现在。\n\n“你最想去的地方是哪儿？”\n“我想去非洲大草原。你呢？”\n“西藏吧！”\n“啊！为什么呀？”\n“嗯...看看那边的天吧！听说那边的天空很蓝很蓝额！你呢？”\n“我想去看看小草，还有体会那里的气温，接触那里热情真诚的黑人 。”\n“他们说英语吗？”\n“说啊！”\n”那你要学好英语额！“\n“嗯...你应该是向往自由的人。而我是热爱大自然的人。”\n“或许是吧！”\n\n或许我是向往自由的吧，有时我会很放纵自己，做自己想做的事，即使是不正确的、不明智的，但从未后悔。\n\n“生活随心所欲，把精彩留给自己。”这句话我默默记了六年。害怕把它忘记。\n\n如果可以回到过去，我希望从新来过，但这并不代表后悔。\n\n就像如果我能考上个好大学，我希望会在高考那年好好奋斗，但并不代表后悔自己走过的路。\n\n不一样的人生，不一样的精彩吧。\n\n不一样的时间，不一样的心情。\n\n所以写到这的时候，好像平静了许多。\n\n窗外是黑夜的酣睡声。\n\n就让它安静的睡吧。\n","updated":"2023-09-03T07:21:56.413Z","path":"journal/journal-2012-09-18.html","comments":1,"layout":"page","_id":"clq4xe1dd001ttz2hhlu6b6bt","content":"<p>第一次用电脑写东西，发现原来分段是一件很简单的事。但用手机分段还是不会额。</p>\n<p>就像是在冬季看霜露是一件很简单的事，如果在夏天，便感觉很无赖了。</p>\n<p>这几天心里颇不宁静。</p>\n<p>如果这是朱自清的话，他或许会在晚上的时候去荷塘边散散心、看看月光。</p>\n<span id=\"more\"></span>\n\n<p>可我不是他，更达不到他的心境。何况我们学校里没有荷塘。至于月色倒是可以在恒青湖旁驻足一番。</p>\n<p>如果是我，我会很心烦、会浮躁。甚至不愿出去走走来平静心情。</p>\n<p>所以我必须找点东西来发泄下，不然过几天我会患抑郁症的。</p>\n<p>这几天心里颇不平静。</p>\n<p>上课没有认真听讲了，作业也是基本不想做了，天天把 DNF 疲劳刷干了，DOTA 都没激情了。晚上偶尔会失眠，偶尔会感觉有些冷，偶尔看天会觉得天色阴沉，偶尔会胡思乱想，就像现在。</p>\n<p>“你最想去的地方是哪儿？”<br>“我想去非洲大草原。你呢？”<br>“西藏吧！”<br>“啊！为什么呀？”<br>“嗯…看看那边的天吧！听说那边的天空很蓝很蓝额！你呢？”<br>“我想去看看小草，还有体会那里的气温，接触那里热情真诚的黑人 。”<br>“他们说英语吗？”<br>“说啊！”<br>”那你要学好英语额！“<br>“嗯…你应该是向往自由的人。而我是热爱大自然的人。”<br>“或许是吧！”</p>\n<p>或许我是向往自由的吧，有时我会很放纵自己，做自己想做的事，即使是不正确的、不明智的，但从未后悔。</p>\n<p>“生活随心所欲，把精彩留给自己。”这句话我默默记了六年。害怕把它忘记。</p>\n<p>如果可以回到过去，我希望从新来过，但这并不代表后悔。</p>\n<p>就像如果我能考上个好大学，我希望会在高考那年好好奋斗，但并不代表后悔自己走过的路。</p>\n<p>不一样的人生，不一样的精彩吧。</p>\n<p>不一样的时间，不一样的心情。</p>\n<p>所以写到这的时候，好像平静了许多。</p>\n<p>窗外是黑夜的酣睡声。</p>\n<p>就让它安静的睡吧。</p>\n","site":{"data":{}},"related_posts":[],"length":581,"excerpt":"<p>第一次用电脑写东西，发现原来分段是一件很简单的事。但用手机分段还是不会额。</p>\n<p>就像是在冬季看霜露是一件很简单的事，如果在夏天，便感觉很无赖了。</p>\n<p>这几天心里颇不宁静。</p>\n<p>如果这是朱自清的话，他或许会在晚上的时候去荷塘边散散心、看看月光。</p>","more":"<p>可我不是他，更达不到他的心境。何况我们学校里没有荷塘。至于月色倒是可以在恒青湖旁驻足一番。</p>\n<p>如果是我，我会很心烦、会浮躁。甚至不愿出去走走来平静心情。</p>\n<p>所以我必须找点东西来发泄下，不然过几天我会患抑郁症的。</p>\n<p>这几天心里颇不平静。</p>\n<p>上课没有认真听讲了，作业也是基本不想做了，天天把 DNF 疲劳刷干了，DOTA 都没激情了。晚上偶尔会失眠，偶尔会感觉有些冷，偶尔看天会觉得天色阴沉，偶尔会胡思乱想，就像现在。</p>\n<p>“你最想去的地方是哪儿？”<br>“我想去非洲大草原。你呢？”<br>“西藏吧！”<br>“啊！为什么呀？”<br>“嗯…看看那边的天吧！听说那边的天空很蓝很蓝额！你呢？”<br>“我想去看看小草，还有体会那里的气温，接触那里热情真诚的黑人 。”<br>“他们说英语吗？”<br>“说啊！”<br>”那你要学好英语额！“<br>“嗯…你应该是向往自由的人。而我是热爱大自然的人。”<br>“或许是吧！”</p>\n<p>或许我是向往自由的吧，有时我会很放纵自己，做自己想做的事，即使是不正确的、不明智的，但从未后悔。</p>\n<p>“生活随心所欲，把精彩留给自己。”这句话我默默记了六年。害怕把它忘记。</p>\n<p>如果可以回到过去，我希望从新来过，但这并不代表后悔。</p>\n<p>就像如果我能考上个好大学，我希望会在高考那年好好奋斗，但并不代表后悔自己走过的路。</p>\n<p>不一样的人生，不一样的精彩吧。</p>\n<p>不一样的时间，不一样的心情。</p>\n<p>所以写到这的时候，好像平静了许多。</p>\n<p>窗外是黑夜的酣睡声。</p>\n<p>就让它安静的睡吧。</p>"}],"Post":[{"title":"记录使用阿里云轻量应用服务器并部署nodejs+express项目","date":"2023-09-07T06:55:43.000Z","_content":"\n> 背景: 使用 nodejs+express+mysql 在本地写的接口和数据库,只能本地调试访问, 如果想要外网访问, 需要部署到远程服务器上, 于是在阿里云平台花了 108 买了一年的轻量应用服务器. 没有部署过, 为了达到这个目标: nodejs+express 项目在服务器上部署运行, 连接服务器里的数据库, 在远程可以正常调用接口. 自己摸索着部署了一下.\n\n## 在阿里云平台购买轻量应用服务器\n\n<!-- more -->\n\n1. 进入[阿里云平台](https://www.aliyun.com/?spm=5176.10173289.top-nav.dlogo.11322e770VC5ge)\n2. 登录账号, 账号需要实名认证\n3. 购买的产品 ![24843fa87c889f405eabb198257814ec.png](../images/aliyun-server-res/FEB1DEDE-A737-4713-BD84-32AAF99E1220.png)\n4. 购买配置, 用的是系统镜像(Alibaba Clound Linux)![0272c5c5efbe3a713e8fcaa2cab94f02.png](../images/aliyun-server-res/E2863A55-75F7-4242-99C2-3AF7792A0972.png)\n5. 购买完成后在轻量应用管理可以看到![a5ccb723c046ebd83dff22f77aade860.png](../images/aliyun-server-res/1E5521D7-A26F-4767-B79F-8E245EB2DA90.png)\n\n## 连接远程服务器并部署项目环境\n\n### 使用 FinalShell 连接\n\n### 安装 node 环境\n\n```sh\n// 1. 下载最新稳定版的node包\nwget https://nodejs.org/dist/v18.17.1/node-v18.17.1-linux-x64.tar.xz\n// 2. 解压\ntar xvf node-v18.17.1-linux-x64.tar.xz\n// 3. 建立软连接\nln -s /root/node-v18.17.1-linux-x64/bin/node /usr/local/bin/node\nln -s /root/node-v18.17.1-linux-x64/bin/npm /usr/local/bin/npm\n// 4. 查看是否安装成功\nnode -v\nnpm -v\n```\n\n### 上传本地项目到服务器\n\n1. 把本地的 `nodejs-express` 项目压缩文件成 zip 包\n2. 使用 `finalShell` 把压缩后的文件传到服务器上, 我放的是/home/文件夹下\n\n### 安装 zip/unzip\n\n```sh\n// 查看是否安装了zip/unzip\nyum list | grep zip/unzip\nyum install zip\nyum install unzip\n```\n\n### 解压文件\n\n```sh\nunzip express-demo.zip\n```\n\n### 试运行 express 项目\n\n```sh\n// 1.进入项目\ncd express-demo/\n// 2.运行项目\nnode app.js\n// 可以正常跑起来即运行成功\n```\n\n### 在阿里云轻量应用管理平台添加防火墙端口\n\n使用 `postman` 调用接口时, 发现访问不通, 原因是防火墙的端口没开, 需要开防火墙端口, 项目接口使用的 3000 端口:![d56e19e3c94b7674f48720c4b38c0619.png](../images/aliyun-server-res/948EED37-A2B2-4BB1-9B22-C58B5451604C.png)\n\n再使用 `postman` 调用接口, 发现可以调通了, 但是报连接数据库的错误, 因为之前本地的项目是使用的本地数据库, 服务器上暂时没有数据库, 所以接下来需要在服务器上创建数据库.\n\n## 在服务器端添加数据库\n\n### 安装 MySql\n\n```sh\n// 1. 安装mysql\nyum install mysql-server\n// 2. 启动mysql\nservice mysqld start\n```\n\n### 登录 MySql\n\n默认是没有设置密码的\n\n```sh\nmysql -u root -p\n```\n\n设置 `root` 用户\n\n```sh\n// 1. 使用mysql表\nuse mysql;\n// 2. 查询用户信息\nselect User, Host from user;\n// 3. 修改用户信息\nupdate user set Host='%' where User='root' and Host='localhost' limit 1;\n// 4. 应用\nflush privileges;\n// 5. 再次查看是否修改成功\nselect User, Host from user;\n```\n\n设置 `root` 用户密码\n\n```sh\nalter user 'root'@'%' identified by <password>;\n```\n\n### 防火墙打开数据库端口\n\n数据库默认是 3306 端口, 在阿里云管理平台打开防火墙端口![9f72a7a3fb8c419ddfd41efd9014965e.png](../images/aliyun-server-res/37670519-FA8B-4062-BCFE-130FB5F41509.png)\n\n### 验证是否可以访问远程数据库\n\n打开 `iterm`\n\n```sh\nmysql -h <ip> -P 3306 -u root <password>\n```\n\n### 修改服务器端项目里连接数据库的密码\n\n使用 `VSCode` 的资源管理器插件连接远程服务器, 并打开项目文件, 修改项目中连接数据库的密码.\n\n## 使用 workbench 把本地的数据库迁移到服务器上\n\n### 导出本地数据库\n\ndata export: ![3fc772830e11d1ab6274677b49d54d41.png](../images/aliyun-server-res/7B4DB7D5-2F36-4242-99E6-B959F73C28EE.png)\n\n### 连接远程数据库\n\n连接远程数据库后, 在远程数据库里导入数据\ndata import: ![c5f071441259524b36e117212c6b269b.png](../images/aliyun-server-res/F5AC47B0-C347-4D4C-940E-B178AF6E770C.png)\n\n### 使用 postman 测试接口是否正常\n\n测试接口:![cc144ef46a7b31a1a1ceac37777f0bce.png](../images/aliyun-server-res/E1035F5C-8438-4517-8DD5-5487B6B9A487.png)\n\n## 自动启动项目 pm2\n\n当我退出 `shell` 远程服务器时, 项目会自动停止了, 需要安装状态代理包 `pm2`.\n\n1. 全局安装\n\n   ```sh\n   npm install -g pm2\n   ```\n\n   全局包是安装在 node 目录里的.\n\n2. 建立软链接\n\n   ```sh\n   ln -s /root/node-v18.17.1-linux-x64/bin/pm2 /usr/local/bin/pm2\n   ```\n\n   ![0bd7fbc48b8791e43bf0abeadef21601.png](../images/aliyun-server-res/C52A3D7C-1B05-4EB1-8883-202ACBB12DE4.png)\n\n3. 进入 express 项目,使用 pm2 启动项目\n\n   ```sh\n   pm2 start app.js\n   ```\n\n   ![66b4104761f98ce4db8e6de73290c229.png](../images/aliyun-server-res/AFB10CB6-2C19-4640-A395-F5D0E56ECBB0.png)\n","source":"_posts/aliyun-server.md","raw":"---\ntitle: 记录使用阿里云轻量应用服务器并部署nodejs+express项目\ndate: 2023-09-07 14:55:43\ntags:\n  - server\n---\n\n> 背景: 使用 nodejs+express+mysql 在本地写的接口和数据库,只能本地调试访问, 如果想要外网访问, 需要部署到远程服务器上, 于是在阿里云平台花了 108 买了一年的轻量应用服务器. 没有部署过, 为了达到这个目标: nodejs+express 项目在服务器上部署运行, 连接服务器里的数据库, 在远程可以正常调用接口. 自己摸索着部署了一下.\n\n## 在阿里云平台购买轻量应用服务器\n\n<!-- more -->\n\n1. 进入[阿里云平台](https://www.aliyun.com/?spm=5176.10173289.top-nav.dlogo.11322e770VC5ge)\n2. 登录账号, 账号需要实名认证\n3. 购买的产品 ![24843fa87c889f405eabb198257814ec.png](../images/aliyun-server-res/FEB1DEDE-A737-4713-BD84-32AAF99E1220.png)\n4. 购买配置, 用的是系统镜像(Alibaba Clound Linux)![0272c5c5efbe3a713e8fcaa2cab94f02.png](../images/aliyun-server-res/E2863A55-75F7-4242-99C2-3AF7792A0972.png)\n5. 购买完成后在轻量应用管理可以看到![a5ccb723c046ebd83dff22f77aade860.png](../images/aliyun-server-res/1E5521D7-A26F-4767-B79F-8E245EB2DA90.png)\n\n## 连接远程服务器并部署项目环境\n\n### 使用 FinalShell 连接\n\n### 安装 node 环境\n\n```sh\n// 1. 下载最新稳定版的node包\nwget https://nodejs.org/dist/v18.17.1/node-v18.17.1-linux-x64.tar.xz\n// 2. 解压\ntar xvf node-v18.17.1-linux-x64.tar.xz\n// 3. 建立软连接\nln -s /root/node-v18.17.1-linux-x64/bin/node /usr/local/bin/node\nln -s /root/node-v18.17.1-linux-x64/bin/npm /usr/local/bin/npm\n// 4. 查看是否安装成功\nnode -v\nnpm -v\n```\n\n### 上传本地项目到服务器\n\n1. 把本地的 `nodejs-express` 项目压缩文件成 zip 包\n2. 使用 `finalShell` 把压缩后的文件传到服务器上, 我放的是/home/文件夹下\n\n### 安装 zip/unzip\n\n```sh\n// 查看是否安装了zip/unzip\nyum list | grep zip/unzip\nyum install zip\nyum install unzip\n```\n\n### 解压文件\n\n```sh\nunzip express-demo.zip\n```\n\n### 试运行 express 项目\n\n```sh\n// 1.进入项目\ncd express-demo/\n// 2.运行项目\nnode app.js\n// 可以正常跑起来即运行成功\n```\n\n### 在阿里云轻量应用管理平台添加防火墙端口\n\n使用 `postman` 调用接口时, 发现访问不通, 原因是防火墙的端口没开, 需要开防火墙端口, 项目接口使用的 3000 端口:![d56e19e3c94b7674f48720c4b38c0619.png](../images/aliyun-server-res/948EED37-A2B2-4BB1-9B22-C58B5451604C.png)\n\n再使用 `postman` 调用接口, 发现可以调通了, 但是报连接数据库的错误, 因为之前本地的项目是使用的本地数据库, 服务器上暂时没有数据库, 所以接下来需要在服务器上创建数据库.\n\n## 在服务器端添加数据库\n\n### 安装 MySql\n\n```sh\n// 1. 安装mysql\nyum install mysql-server\n// 2. 启动mysql\nservice mysqld start\n```\n\n### 登录 MySql\n\n默认是没有设置密码的\n\n```sh\nmysql -u root -p\n```\n\n设置 `root` 用户\n\n```sh\n// 1. 使用mysql表\nuse mysql;\n// 2. 查询用户信息\nselect User, Host from user;\n// 3. 修改用户信息\nupdate user set Host='%' where User='root' and Host='localhost' limit 1;\n// 4. 应用\nflush privileges;\n// 5. 再次查看是否修改成功\nselect User, Host from user;\n```\n\n设置 `root` 用户密码\n\n```sh\nalter user 'root'@'%' identified by <password>;\n```\n\n### 防火墙打开数据库端口\n\n数据库默认是 3306 端口, 在阿里云管理平台打开防火墙端口![9f72a7a3fb8c419ddfd41efd9014965e.png](../images/aliyun-server-res/37670519-FA8B-4062-BCFE-130FB5F41509.png)\n\n### 验证是否可以访问远程数据库\n\n打开 `iterm`\n\n```sh\nmysql -h <ip> -P 3306 -u root <password>\n```\n\n### 修改服务器端项目里连接数据库的密码\n\n使用 `VSCode` 的资源管理器插件连接远程服务器, 并打开项目文件, 修改项目中连接数据库的密码.\n\n## 使用 workbench 把本地的数据库迁移到服务器上\n\n### 导出本地数据库\n\ndata export: ![3fc772830e11d1ab6274677b49d54d41.png](../images/aliyun-server-res/7B4DB7D5-2F36-4242-99E6-B959F73C28EE.png)\n\n### 连接远程数据库\n\n连接远程数据库后, 在远程数据库里导入数据\ndata import: ![c5f071441259524b36e117212c6b269b.png](../images/aliyun-server-res/F5AC47B0-C347-4D4C-940E-B178AF6E770C.png)\n\n### 使用 postman 测试接口是否正常\n\n测试接口:![cc144ef46a7b31a1a1ceac37777f0bce.png](../images/aliyun-server-res/E1035F5C-8438-4517-8DD5-5487B6B9A487.png)\n\n## 自动启动项目 pm2\n\n当我退出 `shell` 远程服务器时, 项目会自动停止了, 需要安装状态代理包 `pm2`.\n\n1. 全局安装\n\n   ```sh\n   npm install -g pm2\n   ```\n\n   全局包是安装在 node 目录里的.\n\n2. 建立软链接\n\n   ```sh\n   ln -s /root/node-v18.17.1-linux-x64/bin/pm2 /usr/local/bin/pm2\n   ```\n\n   ![0bd7fbc48b8791e43bf0abeadef21601.png](../images/aliyun-server-res/C52A3D7C-1B05-4EB1-8883-202ACBB12DE4.png)\n\n3. 进入 express 项目,使用 pm2 启动项目\n\n   ```sh\n   pm2 start app.js\n   ```\n\n   ![66b4104761f98ce4db8e6de73290c229.png](../images/aliyun-server-res/AFB10CB6-2C19-4640-A395-F5D0E56ECBB0.png)\n","slug":"aliyun-server","published":1,"updated":"2023-10-09T09:43:42.566Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clq4xe1d20001tz2h6enbef3h","content":"<blockquote>\n<p>背景: 使用 nodejs+express+mysql 在本地写的接口和数据库,只能本地调试访问, 如果想要外网访问, 需要部署到远程服务器上, 于是在阿里云平台花了 108 买了一年的轻量应用服务器. 没有部署过, 为了达到这个目标: nodejs+express 项目在服务器上部署运行, 连接服务器里的数据库, 在远程可以正常调用接口. 自己摸索着部署了一下.</p>\n</blockquote>\n<h2 id=\"在阿里云平台购买轻量应用服务器\"><a href=\"#在阿里云平台购买轻量应用服务器\" class=\"headerlink\" title=\"在阿里云平台购买轻量应用服务器\"></a>在阿里云平台购买轻量应用服务器</h2><span id=\"more\"></span>\n\n<ol>\n<li>进入<a href=\"https://www.aliyun.com/?spm=5176.10173289.top-nav.dlogo.11322e770VC5ge\">阿里云平台</a></li>\n<li>登录账号, 账号需要实名认证</li>\n<li>购买的产品 <img src=\"/../images/aliyun-server-res/FEB1DEDE-A737-4713-BD84-32AAF99E1220.png\" alt=\"24843fa87c889f405eabb198257814ec.png\"></li>\n<li>购买配置, 用的是系统镜像(Alibaba Clound Linux)<img src=\"/../images/aliyun-server-res/E2863A55-75F7-4242-99C2-3AF7792A0972.png\" alt=\"0272c5c5efbe3a713e8fcaa2cab94f02.png\"></li>\n<li>购买完成后在轻量应用管理可以看到<img src=\"/../images/aliyun-server-res/1E5521D7-A26F-4767-B79F-8E245EB2DA90.png\" alt=\"a5ccb723c046ebd83dff22f77aade860.png\"></li>\n</ol>\n<h2 id=\"连接远程服务器并部署项目环境\"><a href=\"#连接远程服务器并部署项目环境\" class=\"headerlink\" title=\"连接远程服务器并部署项目环境\"></a>连接远程服务器并部署项目环境</h2><h3 id=\"使用-FinalShell-连接\"><a href=\"#使用-FinalShell-连接\" class=\"headerlink\" title=\"使用 FinalShell 连接\"></a>使用 FinalShell 连接</h3><h3 id=\"安装-node-环境\"><a href=\"#安装-node-环境\" class=\"headerlink\" title=\"安装 node 环境\"></a>安装 node 环境</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1. 下载最新稳定版的node包</span><br><span class=\"line\">wget https://nodejs.org/dist/v18.17.1/node-v18.17.1-linux-x64.tar.xz</span><br><span class=\"line\">// 2. 解压</span><br><span class=\"line\">tar xvf node-v18.17.1-linux-x64.tar.xz</span><br><span class=\"line\">// 3. 建立软连接</span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s /root/node-v18.17.1-linux-x64/bin/node /usr/local/bin/node</span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s /root/node-v18.17.1-linux-x64/bin/npm /usr/local/bin/npm</span><br><span class=\"line\">// 4. 查看是否安装成功</span><br><span class=\"line\">node -v</span><br><span class=\"line\">npm -v</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"上传本地项目到服务器\"><a href=\"#上传本地项目到服务器\" class=\"headerlink\" title=\"上传本地项目到服务器\"></a>上传本地项目到服务器</h3><ol>\n<li>把本地的 <code>nodejs-express</code> 项目压缩文件成 zip 包</li>\n<li>使用 <code>finalShell</code> 把压缩后的文件传到服务器上, 我放的是&#x2F;home&#x2F;文件夹下</li>\n</ol>\n<h3 id=\"安装-zip-unzip\"><a href=\"#安装-zip-unzip\" class=\"headerlink\" title=\"安装 zip&#x2F;unzip\"></a>安装 zip&#x2F;unzip</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 查看是否安装了zip/unzip</span><br><span class=\"line\">yum list | grep zip/unzip</span><br><span class=\"line\">yum install zip</span><br><span class=\"line\">yum install unzip</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解压文件\"><a href=\"#解压文件\" class=\"headerlink\" title=\"解压文件\"></a>解压文件</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unzip express-demo.zip</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"试运行-express-项目\"><a href=\"#试运行-express-项目\" class=\"headerlink\" title=\"试运行 express 项目\"></a>试运行 express 项目</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1.进入项目</span><br><span class=\"line\"><span class=\"built_in\">cd</span> express-demo/</span><br><span class=\"line\">// 2.运行项目</span><br><span class=\"line\">node app.js</span><br><span class=\"line\">// 可以正常跑起来即运行成功</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在阿里云轻量应用管理平台添加防火墙端口\"><a href=\"#在阿里云轻量应用管理平台添加防火墙端口\" class=\"headerlink\" title=\"在阿里云轻量应用管理平台添加防火墙端口\"></a>在阿里云轻量应用管理平台添加防火墙端口</h3><p>使用 <code>postman</code> 调用接口时, 发现访问不通, 原因是防火墙的端口没开, 需要开防火墙端口, 项目接口使用的 3000 端口:<img src=\"/../images/aliyun-server-res/948EED37-A2B2-4BB1-9B22-C58B5451604C.png\" alt=\"d56e19e3c94b7674f48720c4b38c0619.png\"></p>\n<p>再使用 <code>postman</code> 调用接口, 发现可以调通了, 但是报连接数据库的错误, 因为之前本地的项目是使用的本地数据库, 服务器上暂时没有数据库, 所以接下来需要在服务器上创建数据库.</p>\n<h2 id=\"在服务器端添加数据库\"><a href=\"#在服务器端添加数据库\" class=\"headerlink\" title=\"在服务器端添加数据库\"></a>在服务器端添加数据库</h2><h3 id=\"安装-MySql\"><a href=\"#安装-MySql\" class=\"headerlink\" title=\"安装 MySql\"></a>安装 MySql</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1. 安装mysql</span><br><span class=\"line\">yum install mysql-server</span><br><span class=\"line\">// 2. 启动mysql</span><br><span class=\"line\">service mysqld start</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"登录-MySql\"><a href=\"#登录-MySql\" class=\"headerlink\" title=\"登录 MySql\"></a>登录 MySql</h3><p>默认是没有设置密码的</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p</span><br></pre></td></tr></table></figure>\n\n<p>设置 <code>root</code> 用户</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1. 使用mysql表</span><br><span class=\"line\">use mysql;</span><br><span class=\"line\">// 2. 查询用户信息</span><br><span class=\"line\"><span class=\"keyword\">select</span> User, Host from user;</span><br><span class=\"line\">// 3. 修改用户信息</span><br><span class=\"line\">update user <span class=\"built_in\">set</span> Host=<span class=\"string\">&#x27;%&#x27;</span> <span class=\"built_in\">where</span> User=<span class=\"string\">&#x27;root&#x27;</span> and Host=<span class=\"string\">&#x27;localhost&#x27;</span> <span class=\"built_in\">limit</span> 1;</span><br><span class=\"line\">// 4. 应用</span><br><span class=\"line\">flush privileges;</span><br><span class=\"line\">// 5. 再次查看是否修改成功</span><br><span class=\"line\"><span class=\"keyword\">select</span> User, Host from user;</span><br></pre></td></tr></table></figure>\n\n<p>设置 <code>root</code> 用户密码</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter user <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> identified by &lt;password&gt;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"防火墙打开数据库端口\"><a href=\"#防火墙打开数据库端口\" class=\"headerlink\" title=\"防火墙打开数据库端口\"></a>防火墙打开数据库端口</h3><p>数据库默认是 3306 端口, 在阿里云管理平台打开防火墙端口<img src=\"/../images/aliyun-server-res/37670519-FA8B-4062-BCFE-130FB5F41509.png\" alt=\"9f72a7a3fb8c419ddfd41efd9014965e.png\"></p>\n<h3 id=\"验证是否可以访问远程数据库\"><a href=\"#验证是否可以访问远程数据库\" class=\"headerlink\" title=\"验证是否可以访问远程数据库\"></a>验证是否可以访问远程数据库</h3><p>打开 <code>iterm</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -h &lt;ip&gt; -P 3306 -u root &lt;password&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改服务器端项目里连接数据库的密码\"><a href=\"#修改服务器端项目里连接数据库的密码\" class=\"headerlink\" title=\"修改服务器端项目里连接数据库的密码\"></a>修改服务器端项目里连接数据库的密码</h3><p>使用 <code>VSCode</code> 的资源管理器插件连接远程服务器, 并打开项目文件, 修改项目中连接数据库的密码.</p>\n<h2 id=\"使用-workbench-把本地的数据库迁移到服务器上\"><a href=\"#使用-workbench-把本地的数据库迁移到服务器上\" class=\"headerlink\" title=\"使用 workbench 把本地的数据库迁移到服务器上\"></a>使用 workbench 把本地的数据库迁移到服务器上</h2><h3 id=\"导出本地数据库\"><a href=\"#导出本地数据库\" class=\"headerlink\" title=\"导出本地数据库\"></a>导出本地数据库</h3><p>data export: <img src=\"/../images/aliyun-server-res/7B4DB7D5-2F36-4242-99E6-B959F73C28EE.png\" alt=\"3fc772830e11d1ab6274677b49d54d41.png\"></p>\n<h3 id=\"连接远程数据库\"><a href=\"#连接远程数据库\" class=\"headerlink\" title=\"连接远程数据库\"></a>连接远程数据库</h3><p>连接远程数据库后, 在远程数据库里导入数据<br>data import: <img src=\"/../images/aliyun-server-res/F5AC47B0-C347-4D4C-940E-B178AF6E770C.png\" alt=\"c5f071441259524b36e117212c6b269b.png\"></p>\n<h3 id=\"使用-postman-测试接口是否正常\"><a href=\"#使用-postman-测试接口是否正常\" class=\"headerlink\" title=\"使用 postman 测试接口是否正常\"></a>使用 postman 测试接口是否正常</h3><p>测试接口:<img src=\"/../images/aliyun-server-res/E1035F5C-8438-4517-8DD5-5487B6B9A487.png\" alt=\"cc144ef46a7b31a1a1ceac37777f0bce.png\"></p>\n<h2 id=\"自动启动项目-pm2\"><a href=\"#自动启动项目-pm2\" class=\"headerlink\" title=\"自动启动项目 pm2\"></a>自动启动项目 pm2</h2><p>当我退出 <code>shell</code> 远程服务器时, 项目会自动停止了, 需要安装状态代理包 <code>pm2</code>.</p>\n<ol>\n<li><p>全局安装</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g pm2</span><br></pre></td></tr></table></figure>\n\n<p>全局包是安装在 node 目录里的.</p>\n</li>\n<li><p>建立软链接</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ln</span> -s /root/node-v18.17.1-linux-x64/bin/pm2 /usr/local/bin/pm2</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/aliyun-server-res/C52A3D7C-1B05-4EB1-8883-202ACBB12DE4.png\" alt=\"0bd7fbc48b8791e43bf0abeadef21601.png\"></p>\n</li>\n<li><p>进入 express 项目,使用 pm2 启动项目</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start app.js</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/aliyun-server-res/AFB10CB6-2C19-4640-A395-F5D0E56ECBB0.png\" alt=\"66b4104761f98ce4db8e6de73290c229.png\"></p>\n</li>\n</ol>\n","site":{"data":{}},"related_posts":[],"length":974,"excerpt":"<blockquote>\n<p>背景: 使用 nodejs+express+mysql 在本地写的接口和数据库,只能本地调试访问, 如果想要外网访问, 需要部署到远程服务器上, 于是在阿里云平台花了 108 买了一年的轻量应用服务器. 没有部署过, 为了达到这个目标: nodejs+express 项目在服务器上部署运行, 连接服务器里的数据库, 在远程可以正常调用接口. 自己摸索着部署了一下.</p>\n</blockquote>\n<h2 id=\"在阿里云平台购买轻量应用服务器\"><a href=\"#在阿里云平台购买轻量应用服务器\" class=\"headerlink\" title=\"在阿里云平台购买轻量应用服务器\"></a>在阿里云平台购买轻量应用服务器</h2>","more":"<ol>\n<li>进入<a href=\"https://www.aliyun.com/?spm=5176.10173289.top-nav.dlogo.11322e770VC5ge\">阿里云平台</a></li>\n<li>登录账号, 账号需要实名认证</li>\n<li>购买的产品 <img src=\"/../images/aliyun-server-res/FEB1DEDE-A737-4713-BD84-32AAF99E1220.png\" alt=\"24843fa87c889f405eabb198257814ec.png\"></li>\n<li>购买配置, 用的是系统镜像(Alibaba Clound Linux)<img src=\"/../images/aliyun-server-res/E2863A55-75F7-4242-99C2-3AF7792A0972.png\" alt=\"0272c5c5efbe3a713e8fcaa2cab94f02.png\"></li>\n<li>购买完成后在轻量应用管理可以看到<img src=\"/../images/aliyun-server-res/1E5521D7-A26F-4767-B79F-8E245EB2DA90.png\" alt=\"a5ccb723c046ebd83dff22f77aade860.png\"></li>\n</ol>\n<h2 id=\"连接远程服务器并部署项目环境\"><a href=\"#连接远程服务器并部署项目环境\" class=\"headerlink\" title=\"连接远程服务器并部署项目环境\"></a>连接远程服务器并部署项目环境</h2><h3 id=\"使用-FinalShell-连接\"><a href=\"#使用-FinalShell-连接\" class=\"headerlink\" title=\"使用 FinalShell 连接\"></a>使用 FinalShell 连接</h3><h3 id=\"安装-node-环境\"><a href=\"#安装-node-环境\" class=\"headerlink\" title=\"安装 node 环境\"></a>安装 node 环境</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1. 下载最新稳定版的node包</span><br><span class=\"line\">wget https://nodejs.org/dist/v18.17.1/node-v18.17.1-linux-x64.tar.xz</span><br><span class=\"line\">// 2. 解压</span><br><span class=\"line\">tar xvf node-v18.17.1-linux-x64.tar.xz</span><br><span class=\"line\">// 3. 建立软连接</span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s /root/node-v18.17.1-linux-x64/bin/node /usr/local/bin/node</span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s /root/node-v18.17.1-linux-x64/bin/npm /usr/local/bin/npm</span><br><span class=\"line\">// 4. 查看是否安装成功</span><br><span class=\"line\">node -v</span><br><span class=\"line\">npm -v</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"上传本地项目到服务器\"><a href=\"#上传本地项目到服务器\" class=\"headerlink\" title=\"上传本地项目到服务器\"></a>上传本地项目到服务器</h3><ol>\n<li>把本地的 <code>nodejs-express</code> 项目压缩文件成 zip 包</li>\n<li>使用 <code>finalShell</code> 把压缩后的文件传到服务器上, 我放的是&#x2F;home&#x2F;文件夹下</li>\n</ol>\n<h3 id=\"安装-zip-unzip\"><a href=\"#安装-zip-unzip\" class=\"headerlink\" title=\"安装 zip&#x2F;unzip\"></a>安装 zip&#x2F;unzip</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 查看是否安装了zip/unzip</span><br><span class=\"line\">yum list | grep zip/unzip</span><br><span class=\"line\">yum install zip</span><br><span class=\"line\">yum install unzip</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解压文件\"><a href=\"#解压文件\" class=\"headerlink\" title=\"解压文件\"></a>解压文件</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unzip express-demo.zip</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"试运行-express-项目\"><a href=\"#试运行-express-项目\" class=\"headerlink\" title=\"试运行 express 项目\"></a>试运行 express 项目</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1.进入项目</span><br><span class=\"line\"><span class=\"built_in\">cd</span> express-demo/</span><br><span class=\"line\">// 2.运行项目</span><br><span class=\"line\">node app.js</span><br><span class=\"line\">// 可以正常跑起来即运行成功</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在阿里云轻量应用管理平台添加防火墙端口\"><a href=\"#在阿里云轻量应用管理平台添加防火墙端口\" class=\"headerlink\" title=\"在阿里云轻量应用管理平台添加防火墙端口\"></a>在阿里云轻量应用管理平台添加防火墙端口</h3><p>使用 <code>postman</code> 调用接口时, 发现访问不通, 原因是防火墙的端口没开, 需要开防火墙端口, 项目接口使用的 3000 端口:<img src=\"/../images/aliyun-server-res/948EED37-A2B2-4BB1-9B22-C58B5451604C.png\" alt=\"d56e19e3c94b7674f48720c4b38c0619.png\"></p>\n<p>再使用 <code>postman</code> 调用接口, 发现可以调通了, 但是报连接数据库的错误, 因为之前本地的项目是使用的本地数据库, 服务器上暂时没有数据库, 所以接下来需要在服务器上创建数据库.</p>\n<h2 id=\"在服务器端添加数据库\"><a href=\"#在服务器端添加数据库\" class=\"headerlink\" title=\"在服务器端添加数据库\"></a>在服务器端添加数据库</h2><h3 id=\"安装-MySql\"><a href=\"#安装-MySql\" class=\"headerlink\" title=\"安装 MySql\"></a>安装 MySql</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1. 安装mysql</span><br><span class=\"line\">yum install mysql-server</span><br><span class=\"line\">// 2. 启动mysql</span><br><span class=\"line\">service mysqld start</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"登录-MySql\"><a href=\"#登录-MySql\" class=\"headerlink\" title=\"登录 MySql\"></a>登录 MySql</h3><p>默认是没有设置密码的</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p</span><br></pre></td></tr></table></figure>\n\n<p>设置 <code>root</code> 用户</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1. 使用mysql表</span><br><span class=\"line\">use mysql;</span><br><span class=\"line\">// 2. 查询用户信息</span><br><span class=\"line\"><span class=\"keyword\">select</span> User, Host from user;</span><br><span class=\"line\">// 3. 修改用户信息</span><br><span class=\"line\">update user <span class=\"built_in\">set</span> Host=<span class=\"string\">&#x27;%&#x27;</span> <span class=\"built_in\">where</span> User=<span class=\"string\">&#x27;root&#x27;</span> and Host=<span class=\"string\">&#x27;localhost&#x27;</span> <span class=\"built_in\">limit</span> 1;</span><br><span class=\"line\">// 4. 应用</span><br><span class=\"line\">flush privileges;</span><br><span class=\"line\">// 5. 再次查看是否修改成功</span><br><span class=\"line\"><span class=\"keyword\">select</span> User, Host from user;</span><br></pre></td></tr></table></figure>\n\n<p>设置 <code>root</code> 用户密码</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter user <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> identified by &lt;password&gt;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"防火墙打开数据库端口\"><a href=\"#防火墙打开数据库端口\" class=\"headerlink\" title=\"防火墙打开数据库端口\"></a>防火墙打开数据库端口</h3><p>数据库默认是 3306 端口, 在阿里云管理平台打开防火墙端口<img src=\"/../images/aliyun-server-res/37670519-FA8B-4062-BCFE-130FB5F41509.png\" alt=\"9f72a7a3fb8c419ddfd41efd9014965e.png\"></p>\n<h3 id=\"验证是否可以访问远程数据库\"><a href=\"#验证是否可以访问远程数据库\" class=\"headerlink\" title=\"验证是否可以访问远程数据库\"></a>验证是否可以访问远程数据库</h3><p>打开 <code>iterm</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -h &lt;ip&gt; -P 3306 -u root &lt;password&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改服务器端项目里连接数据库的密码\"><a href=\"#修改服务器端项目里连接数据库的密码\" class=\"headerlink\" title=\"修改服务器端项目里连接数据库的密码\"></a>修改服务器端项目里连接数据库的密码</h3><p>使用 <code>VSCode</code> 的资源管理器插件连接远程服务器, 并打开项目文件, 修改项目中连接数据库的密码.</p>\n<h2 id=\"使用-workbench-把本地的数据库迁移到服务器上\"><a href=\"#使用-workbench-把本地的数据库迁移到服务器上\" class=\"headerlink\" title=\"使用 workbench 把本地的数据库迁移到服务器上\"></a>使用 workbench 把本地的数据库迁移到服务器上</h2><h3 id=\"导出本地数据库\"><a href=\"#导出本地数据库\" class=\"headerlink\" title=\"导出本地数据库\"></a>导出本地数据库</h3><p>data export: <img src=\"/../images/aliyun-server-res/7B4DB7D5-2F36-4242-99E6-B959F73C28EE.png\" alt=\"3fc772830e11d1ab6274677b49d54d41.png\"></p>\n<h3 id=\"连接远程数据库\"><a href=\"#连接远程数据库\" class=\"headerlink\" title=\"连接远程数据库\"></a>连接远程数据库</h3><p>连接远程数据库后, 在远程数据库里导入数据<br>data import: <img src=\"/../images/aliyun-server-res/F5AC47B0-C347-4D4C-940E-B178AF6E770C.png\" alt=\"c5f071441259524b36e117212c6b269b.png\"></p>\n<h3 id=\"使用-postman-测试接口是否正常\"><a href=\"#使用-postman-测试接口是否正常\" class=\"headerlink\" title=\"使用 postman 测试接口是否正常\"></a>使用 postman 测试接口是否正常</h3><p>测试接口:<img src=\"/../images/aliyun-server-res/E1035F5C-8438-4517-8DD5-5487B6B9A487.png\" alt=\"cc144ef46a7b31a1a1ceac37777f0bce.png\"></p>\n<h2 id=\"自动启动项目-pm2\"><a href=\"#自动启动项目-pm2\" class=\"headerlink\" title=\"自动启动项目 pm2\"></a>自动启动项目 pm2</h2><p>当我退出 <code>shell</code> 远程服务器时, 项目会自动停止了, 需要安装状态代理包 <code>pm2</code>.</p>\n<ol>\n<li><p>全局安装</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g pm2</span><br></pre></td></tr></table></figure>\n\n<p>全局包是安装在 node 目录里的.</p>\n</li>\n<li><p>建立软链接</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ln</span> -s /root/node-v18.17.1-linux-x64/bin/pm2 /usr/local/bin/pm2</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/aliyun-server-res/C52A3D7C-1B05-4EB1-8883-202ACBB12DE4.png\" alt=\"0bd7fbc48b8791e43bf0abeadef21601.png\"></p>\n</li>\n<li><p>进入 express 项目,使用 pm2 启动项目</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start app.js</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/aliyun-server-res/AFB10CB6-2C19-4640-A395-F5D0E56ECBB0.png\" alt=\"66b4104761f98ce4db8e6de73290c229.png\"></p>\n</li>\n</ol>"},{"title":"使用CSS实现翻牌效果","date":"2023-09-22T01:24:59.000Z","_content":"\n使用 `CSS` 实现翻牌效果, 结果图:\n![css-flip](../images/css-flip-res/css-flip.gif)\n\n<!-- more -->\n\n代码如下:\n`html` 代码:\n\n```html\n<div class=\"card\">\n  <div class=\"card__item card__item--front\">\n    <h2 class=\"card__item--front--heading\">Front</h2>\n  </div>\n  <div class=\"card__item card__item--back\">\n    <h2 class=\"card__item--back--heading\">Back</h2>\n  </div>\n</div>\n```\n\n`less` 样式代码:\n\n```less\n.card {\n  position: relative;\n  width: 300px;\n  height: 500px;\n  perspective: 1500px;\n\n  &__item {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    border-radius: 3px;\n    box-shadow: 0 15px 40px rgba(0, 0, 0, 0.15);\n    backface-visibility: hidden;\n    cursor: pointer;\n    transition: all 0.8s ease;\n\n    &--front {\n      background-image: linear-gradient(to right bottom, #e9b824, #ee9322);\n\n      &--heading {\n        color: #d83f31;\n      }\n    }\n\n    &--back {\n      background-image: linear-gradient(to right bottom, #78d6c6, #419197);\n      transform: rotateY(180deg);\n\n      &--heading {\n        color: #f5fccd;\n      }\n    }\n\n    h2 {\n      font-size: 30px;\n      font-weight: 300;\n      text-align: center;\n      text-transform: uppercase;\n    }\n  }\n\n  &:hover .card__item--front {\n    transform: rotateY(-180deg);\n  }\n\n  &:hover .card__item--back {\n    transform: rotateY(0);\n  }\n}\n```\n\n主要属性说明:\n\n- `perspective`: 指定观察者与 z=0 平面的距离,使具有三维位置变换的元素产生透视效果.\n- `backface-visibility`: 指定当元素背面朝向观察者时是否可见.\n- `rotateY`: 让一个元素围绕纵坐标(垂直轴)旋转, 而不会对其进行变形.\n","source":"_posts/css-flip.md","raw":"---\ntitle: 使用CSS实现翻牌效果\ndate: 2023-09-22 09:24:59\ntags:\n  - css\ncategories:\n  - 前端\n---\n\n使用 `CSS` 实现翻牌效果, 结果图:\n![css-flip](../images/css-flip-res/css-flip.gif)\n\n<!-- more -->\n\n代码如下:\n`html` 代码:\n\n```html\n<div class=\"card\">\n  <div class=\"card__item card__item--front\">\n    <h2 class=\"card__item--front--heading\">Front</h2>\n  </div>\n  <div class=\"card__item card__item--back\">\n    <h2 class=\"card__item--back--heading\">Back</h2>\n  </div>\n</div>\n```\n\n`less` 样式代码:\n\n```less\n.card {\n  position: relative;\n  width: 300px;\n  height: 500px;\n  perspective: 1500px;\n\n  &__item {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    border-radius: 3px;\n    box-shadow: 0 15px 40px rgba(0, 0, 0, 0.15);\n    backface-visibility: hidden;\n    cursor: pointer;\n    transition: all 0.8s ease;\n\n    &--front {\n      background-image: linear-gradient(to right bottom, #e9b824, #ee9322);\n\n      &--heading {\n        color: #d83f31;\n      }\n    }\n\n    &--back {\n      background-image: linear-gradient(to right bottom, #78d6c6, #419197);\n      transform: rotateY(180deg);\n\n      &--heading {\n        color: #f5fccd;\n      }\n    }\n\n    h2 {\n      font-size: 30px;\n      font-weight: 300;\n      text-align: center;\n      text-transform: uppercase;\n    }\n  }\n\n  &:hover .card__item--front {\n    transform: rotateY(-180deg);\n  }\n\n  &:hover .card__item--back {\n    transform: rotateY(0);\n  }\n}\n```\n\n主要属性说明:\n\n- `perspective`: 指定观察者与 z=0 平面的距离,使具有三维位置变换的元素产生透视效果.\n- `backface-visibility`: 指定当元素背面朝向观察者时是否可见.\n- `rotateY`: 让一个元素围绕纵坐标(垂直轴)旋转, 而不会对其进行变形.\n","slug":"css-flip","published":1,"updated":"2023-10-29T08:38:32.423Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clq4xe1d30003tz2h7s6oghwk","content":"<p>使用 <code>CSS</code> 实现翻牌效果, 结果图:<br><img src=\"/../images/css-flip-res/css-flip.gif\" alt=\"css-flip\"></p>\n<span id=\"more\"></span>\n\n<p>代码如下:<br><code>html</code> 代码:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;card&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;card__item card__item--front&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;card__item--front--heading&quot;</span>&gt;</span>Front<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;card__item card__item--back&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;card__item--back--heading&quot;</span>&gt;</span>Back<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>less</code> 样式代码:</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.card</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">perspective</span>: <span class=\"number\">1500px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-tag\">&amp;</span><span class=\"selector-tag\">__item</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">15px</span> <span class=\"number\">40px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.15</span>);</span><br><span class=\"line\">    <span class=\"attribute\">backface-visibility</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: all <span class=\"number\">0.8s</span> ease;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-tag\">&amp;</span><span class=\"selector-tag\">--front</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">background-image</span>: <span class=\"built_in\">linear-gradient</span>(to right bottom, <span class=\"number\">#e9b824</span>, <span class=\"number\">#ee9322</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"selector-tag\">&amp;</span><span class=\"selector-tag\">--heading</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">color</span>: <span class=\"number\">#d83f31</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-tag\">&amp;</span><span class=\"selector-tag\">--back</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">background-image</span>: <span class=\"built_in\">linear-gradient</span>(to right bottom, <span class=\"number\">#78d6c6</span>, <span class=\"number\">#419197</span>);</span><br><span class=\"line\">      <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotateY</span>(<span class=\"number\">180deg</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"selector-tag\">&amp;</span><span class=\"selector-tag\">--heading</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">color</span>: <span class=\"number\">#f5fccd</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-tag\">h2</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">font-size</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">font-weight</span>: <span class=\"number\">300</span>;</span><br><span class=\"line\">      <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">      <span class=\"attribute\">text-transform</span>: uppercase;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-tag\">&amp;</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-class\">.card__item--front</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotateY</span>(-<span class=\"number\">180deg</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-tag\">&amp;</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-class\">.card__item--back</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotateY</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>主要属性说明:</p>\n<ul>\n<li><code>perspective</code>: 指定观察者与 z&#x3D;0 平面的距离,使具有三维位置变换的元素产生透视效果.</li>\n<li><code>backface-visibility</code>: 指定当元素背面朝向观察者时是否可见.</li>\n<li><code>rotateY</code>: 让一个元素围绕纵坐标(垂直轴)旋转, 而不会对其进行变形.</li>\n</ul>\n","site":{"data":{}},"related_posts":[],"length":239,"excerpt":"<p>使用 <code>CSS</code> 实现翻牌效果, 结果图:<br><img src=\"/../images/css-flip-res/css-flip.gif\" alt=\"css-flip\"></p>","more":"<p>代码如下:<br><code>html</code> 代码:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;card&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;card__item card__item--front&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;card__item--front--heading&quot;</span>&gt;</span>Front<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;card__item card__item--back&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;card__item--back--heading&quot;</span>&gt;</span>Back<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>less</code> 样式代码:</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.card</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">perspective</span>: <span class=\"number\">1500px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-tag\">&amp;</span><span class=\"selector-tag\">__item</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">15px</span> <span class=\"number\">40px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.15</span>);</span><br><span class=\"line\">    <span class=\"attribute\">backface-visibility</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: all <span class=\"number\">0.8s</span> ease;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-tag\">&amp;</span><span class=\"selector-tag\">--front</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">background-image</span>: <span class=\"built_in\">linear-gradient</span>(to right bottom, <span class=\"number\">#e9b824</span>, <span class=\"number\">#ee9322</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"selector-tag\">&amp;</span><span class=\"selector-tag\">--heading</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">color</span>: <span class=\"number\">#d83f31</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-tag\">&amp;</span><span class=\"selector-tag\">--back</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">background-image</span>: <span class=\"built_in\">linear-gradient</span>(to right bottom, <span class=\"number\">#78d6c6</span>, <span class=\"number\">#419197</span>);</span><br><span class=\"line\">      <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotateY</span>(<span class=\"number\">180deg</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"selector-tag\">&amp;</span><span class=\"selector-tag\">--heading</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">color</span>: <span class=\"number\">#f5fccd</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-tag\">h2</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">font-size</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">font-weight</span>: <span class=\"number\">300</span>;</span><br><span class=\"line\">      <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">      <span class=\"attribute\">text-transform</span>: uppercase;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-tag\">&amp;</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-class\">.card__item--front</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotateY</span>(-<span class=\"number\">180deg</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-tag\">&amp;</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-class\">.card__item--back</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotateY</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>主要属性说明:</p>\n<ul>\n<li><code>perspective</code>: 指定观察者与 z&#x3D;0 平面的距离,使具有三维位置变换的元素产生透视效果.</li>\n<li><code>backface-visibility</code>: 指定当元素背面朝向观察者时是否可见.</li>\n<li><code>rotateY</code>: 让一个元素围绕纵坐标(垂直轴)旋转, 而不会对其进行变形.</li>\n</ul>"},{"title":"JavaScript Algorithms and Data Structures 源码分析(2) -- 单向链表LinkedList","date":"2023-10-29T09:45:14.000Z","_content":"\n## 链表\n\n在计算机科学中, 一个 **链表** 是数据元素的线性集合, 元素的线性顺序不是由它们在内存中的物理位置给出的。 相反, 每个元素指向下一个元素。它是由一组节点组成的数据结构,这些节点一起,表示序列。\n\n在最简单的形式下，每个节点由数据和到序列中下一个节点的引用(换句话说，链接)组成。这种结构允许在迭代期间有效地从序列中的任何位置插入或删除元素。\n\n更复杂的变体添加额外的链接，允许有效地插入或删除任意元素引用。链表的一个缺点是访问时间是线性的(而且难以管道化)。\n\n更快的访问，如随机访问，是不可行的。与链表相比，数组具有更好的缓存位置。\n\n<!-- more -->\n\n![LinkedList](../images/data-structures/linked-list.jpeg)\n\n## LinkedListNode 链表节点类\n\n```javascript\n/**\n * 链表节点类\n */\nclass LinkedListNode {\n  /**\n   * 构造函数\n   * @param {*} value 节点值\n   * @param {LinkedListNode} next 下一个节点，默认为null\n   */\n  constructor(value, next = null) {\n    this.value = value; // 当前节点的值\n    this.next = next; // 下一个节点的引用\n  }\n\n  /**\n   * 返回节点的字符串表示形式\n   * @param {function} callback 转换节点值的回调函数\n   * @return {string} 节点的字符串表示形式\n   */\n  toString(callback) {\n    return callback ? callback(this.value) : `${this.value}`;\n  }\n}\n```\n\n- `constructor` 构造函数用于创建一个链表节点对象。它接受两个参数：`value` 表示节点的值，`next` 表示下一个节点的引用，默认为 `null`。\n- `toString` 方法返回节点的字符串表示形式。它接受一个回调函数作为参数，用于将节点的值转换为字符串。如果提供了回调函数，则将节点的值传递给回调函数进行转换；否则，直接将节点的值转换为字符串并返回。\n\n## LinkedList 是一个单向链表的实现类. 它有以下方法:\n\n### constructor(comparatorFunction)方法\n\n作用: `LinkedList`类的构造函数.\n\n接受一个可选的比较函数作为参数.它会将 `LinkedList` 对象的 `head`（头节点）和 `tail`（尾节点）属性初始化为 `null`。它还创建了一个 `Comparator`（比较器）类的实例，并将其赋值给 `LinkedList` 对象的 `compare` 属性。\n\n```javascript\n  /**\n  * 构造函数\n  */\n  constructor(comparatorFunction) {\n    // 头节点\n    this.head = null;\n    // 尾节点\n    this.tail = null;\n\n    this.compare = new Comparator(comparatorFunction);\n  }\n```\n\n### prepend(value)方法\n\n作用: 在链表的开头插入一个新节点.\n\n接受一个值作为参数，并创建一个带有该值的新节点，该节点成为链表的新头部。如果链表还没有尾部，则将新节点设置为尾部。最后，它返回更新后的链表。\n\n```javascript\n  prepend(value) {\n    // 创建一个新节点, 并将新节点的next指向原来的头节点\n    const newNode = new LinkedListNode(value, this.head);\n    // 将head引用指向新节点, 新节点成为链表的新头部节点.\n    this.head = newNode;\n\n    // 如果链表没有尾节点, 则将新节点设置为尾节点.\n    if (!this.tail) {\n      this.tail = newNode;\n    }\n\n    return this;\n  }\n```\n\n### append(value)方法\n\n作用: 在链表的末尾插入一个新节点.\n\n首先，它创建一个新节点，该节点包含给定的值。接下来，它检查链表是否为空，即是否存在头节点。如果链表为空，将新节点设置为头节点和尾节点。如果链表不为空，将新节点连接到链表的末尾，并将新节点设置为新的尾节点。最后，返回更新后的链表。\n\n```javascript\n  append(value) {\n    // 创建一个新的节点\n    const newNode = new LinkedListNode(value);\n\n    // 如果还没有头节点，将新节点设为头节点和尾节点\n    if (!this.head) {\n      this.head = newNode;\n      this.tail = newNode;\n\n      return this;\n    }\n\n     // 将新节点连接到链表的末尾\n    this.tail.next = newNode;\n    this.tail = newNode;\n\n    return this;\n  }\n```\n\n### insert(value, index)方法\n\n作用: 在指定位置插入一个新节点.\n\n首先，它将原始索引转换为非负整数。然后，它检查索引是否为 0，如果是，则调用 `prepend` 方法在链表头部插入新节点。如果索引不为 0，则遍历链表找到目标索引的前一个节点。接下来，将新节点插入到目标索引的后面，并更新节点的 `next` 属性。如果有尾节点, 将新节点连接到链表的末尾，并将新节点设置为新的尾节点，如果链表为空，则将新节点设置为头节点和尾节点。最后，返回更新后的链表。\n\n```javascript\n  insert(value, rawIndex) {\n    // 将原始索引转换为非负整数\n    const index = rawIndex < 0 ? 0 : rawIndex;\n\n    // 如果索引为 0，调用 prepend 方法在链表头部插入新节点\n    if (index === 0) {\n      this.prepend(value);\n    } else {\n      let count = 1;\n      let currentNode = this.head;\n      const newNode = new LinkedListNode(value);\n      // 遍历链表，找到目标索引的前一个节点\n      while (currentNode) {\n        if (count === index) break;\n        currentNode = currentNode.next;\n        count += 1;\n      }\n      // 如果找到了目标索引的前一个节点\n      if (currentNode) {\n        // 将新节点插入到目标索引的后面\n        newNode.next = currentNode.next;\n        currentNode.next = newNode;\n      } else {\n        // 如果有尾节点\n        if (this.tail) {\n         // 将新节点连接到链表的末尾，并将新节点设置为新的尾节点\n          this.tail.next = newNode;\n          this.tail = newNode;\n        } else {\n          // 如果链表为空且没有尾节点，将新节点设置为头节点和尾节点\n          this.head = newNode;\n          this.tail = newNode;\n        }\n      }\n    }\n    return this;\n  }\n```\n\n### delete(value)方法\n\n作用: 删除链表中的一个节点.\n\n该方法接收一个 `value` 参数，并返回一个 `LinkedListNode` 对象。这个方法的作用是从链表中删除具有特定值的节点。它首先检查链表是否为空。如果为空，则返回 `null`。如果链表不为空，则遍历链表并删除所有具有指定值的节点。最后，它检查尾节点是否具有指定值，并在必要时更新尾节点。然后返回被删除的节点。\n\n```javascript\n  delete(value) {\n    // 如果链表为空，则直接返回 null\n    if (!this.head) {\n      return null;\n    }\n\n    let deletedNode = null;\n\n    // 如果头节点的值与指定值相等，则删除头节点，并将下一个节点设为新的头节点\n    while (this.head && this.compare.equal(this.head.value, value)) {\n      deletedNode = this.head;\n      this.head = this.head.next;\n    }\n\n    let currentNode = this.head;\n    // 如果当前节点不为空\n    if (currentNode !== null) {\n      // 如果下一个节点的值与指定值相等，则删除下一个节点，并将当前节点的下一个节点设为下下个节点\n      while (currentNode.next) {\n        if (this.compare.equal(currentNode.next.value, value)) {\n          deletedNode = currentNode.next;\n          currentNode.next = currentNode.next.next;\n        } else {\n          currentNode = currentNode.next;\n        }\n      }\n    }\n\n    // 检查尾节点是否为指定值，如果是，则更新尾节点\n    if (this.compare.equal(this.tail.value, value)) {\n      this.tail = currentNode;\n    }\n\n    // 返回被删除的节点\n    return deletedNode;\n  }\n```\n\n### find({value, callback})方法\n\n作用: 查找链表中的一个节点\n\n该方法接收一个包含 `value` 和 `callback` 属性的对象作为参数。\n如果链表为空，则直接返回 `null`。\n方法从链表的头节点开始遍历，对于每个节点，它会根据以下两种情况进行判断：\n\n1. 如果指定了 `callback`，则尝试通过回调函数来查找节点。如果回调函数返回 `true`，则返回当前节点。\n2. 如果指定了 `value`，则尝试通过值来比较节点。如果节点的值与指定值相等，则返回当前节点。\n\n如果遍历完整个链表后仍未找到满足条件的节点，则返回 `null`。\n\n```javascript\n  find({ value = undefined, callback = undefined }) {\n    // 如果链表为空，则直接返回null\n    if (!this.head) {\n      return null;\n    }\n\n    // 从链表头开始遍历\n    let currentNode = this.head;\n\n    // 遍历链表的每个节点\n    while (currentNode) {\n      // 如果回调函数存在，并且对当前节点的值返回了true，则返回当前节点.\n      if (callback && callback(currentNode.value)) {\n        return currentNode;\n      }\n\n      // 如果指定了查找的值，并且当前节点的值与指定值相等，则返回当前节点\n      if (value !== undefined && this.compare.equal(currentNode.value, value)) {\n        return currentNode;\n      }\n\n      // 移动到下一个节点\n      currentNode = currentNode.next;\n    }\n\n    // 如果没有找到匹配的节点，则返回null\n    return null;\n  }\n```\n\n### deleteTail()方法\n\n作用: 删除链表的尾节点，并返回被删除的尾节点。\n\n首先，方法将当前尾节点保存在 `deletedTail` 变量中。\n如果链表中只有一个节点，即头节点和尾节点相同，那么将头节点和尾节点都设为 `null`，并返回被删除的尾节点。\n如果链表中有多个节点，方法会遍历链表直到倒数第二个节点，然后将该节点的 `next` 指针设为 `null`，即删除了尾节点。最后，更新链表的尾节点为倒数第二个节点。\n最后，方法返回被删除的尾节点。\n\n```javascript\n  deleteTail() {\n    // 将当前尾节点保存到 deletedTail 变量中\n    const deletedTail = this.tail;\n\n    // 如果头节点和尾节点相同，说明链表中只有一个节点\n    if (this.head === this.tail) {\n      // 将头节点和尾节点都设为 null\n      this.head = null;\n      this.tail = null;\n\n      // 返回被删除的尾节点\n      return deletedTail;\n    }\n\n    // 如果链表中有多个节点...\n\n    // 从头节点开始遍历链表，直到找到倒数第二个节点\n    let currentNode = this.head;\n    while (currentNode.next) {\n      // 如果当前节点的下一个节点是尾节点，说明当前节点是倒数第二个节点\n      if (!currentNode.next.next) {\n        // 将当前节点的 next 指针设为 null，删除尾节点\n        currentNode.next = null;\n      } else {\n        // 否则，将当前节点指针移动到下一个节点\n        currentNode = currentNode.next;\n      }\n    }\n\n    // 更新尾节点为倒数第二个节点\n    this.tail = currentNode;\n\n    // 返回被删除的尾节点\n    return deletedTail;\n  }\n```\n\n### deleteHead()方法\n\n作用: 删除链表的头节点，并返回被删除的头节点。\n\n首先，方法检查链表是否为空。如果链表为空，则直接返回 `null`。\n然后，方法将当前头节点保存在 `deletedHead` 变量中。\n如果链表中有多个节点，方法将头节点更新为下一个节点。\n如果链表中只有一个节点，即头节点和尾节点相同，那么将头节点和尾节点都设为 `null`。\n最后，方法返回被删除的头节点。\n\n```javascript\n  deleteHead() {\n    // 检查链表头是否为空\n    if (!this.head) {\n      // 如果为空，返回null\n      return null;\n    }\n\n    // 将当前头节点赋值给`deletedHead`变量\n    const deletedHead = this.head;\n\n    // 检查头节点是否有下一个节点\n    if (this.head.next) {\n      // 如果有下一个节点，将头节点更新为下一个节点\n      this.head = this.head.next;\n    } else {\n      // 如果没有下一个节点，将头节点和尾节点都设置为null\n      this.head = null;\n      this.tail = null;\n    }\n\n    // 返回被删除的头节点\n    return deletedHead;\n  }\n```\n\n### fromArray(values)方法\n\n作用: 将一个数组转换成一个链表.\n\n方法使用 `forEach` 遍历数组中的每个值，并使用 `append` 方法将每个值添加到链表的末尾。\n最后，方法返回转换后的链表对象。\n\n```javascript\n  fromArray(values) {\n    values.forEach((value) => this.append(value));\n    return this;\n  }\n```\n\n### toArray()方法\n\n作用: 将链表转换成一个数组\n\n首先，方法创建一个空数组 `nodes`，用于存储链表中的节点。\n然后，方法从链表的头节点开始，通过循环遍历链表的每个节点。在循环中，将当前节点添加到 `nodes` 数组中，并将当前节点更新为下一个节点。\n最后，方法返回包含链表中所有节点的数组。\n\n```javascript\n  toArray() {\n    const nodes = [];\n\n    let currentNode = this.head;\n    // 遍历节点\n    while (currentNode) {\n      // 将每个节点放到数组中\n      nodes.push(currentNode);\n      currentNode = currentNode.next;\n    }\n\n    return nodes;\n  }\n```\n\n### toString(callback)方法\n\n作用: 将链表转换成一个字符串\n\n首先，方法调用 `toArray()` 方法将链表转换为数组。\n然后，方法使用 `map()` 方法遍历数组中的每个节点，并调用每个节点的 `toString()` 方法，将节点转换为字符串。如果提供了回调函数，则将回调函数应用于每个节点。\n最后，方法使用 `toString()` 方法将转换后的数组转换为一个字符串，并返回该字符串。\n\n```javascript\n  toString(callback) {\n    return this.toArray().map((node) => node.toString(callback)).toString();\n  }\n```\n\n### reverse()方法\n\n作用: 反转链表\n\n该方法会将链表中的节点顺序进行反转，即原来链表中的第一个节点变为新链表中的最后一个节点，原来链表中的最后一个节点变为新链表中的第一个节点，其余节点的顺序也会逆转。\n方法会遍历链表，将每个节点的 `next` 指针指向其前一个节点，从而实现链表的反转。\n最后，方法会更新链表的头节点和尾节点，并返回反转后的链表。\n\n```javascript\n  reverse() {\n    // 初始化三个变量：currNode（当前节点）、prevNode（前一个节点）和nextNode（下一个节点）。\n    let currNode = this.head;\n    let prevNode = null;\n    let nextNode = null;\n\n    // 循环遍历链表，直到 currNode 变为 null。\n    while (currNode) {\n      // 将下一个节点存储在 nextNode 变量中。这是为了在修改 currNode 的 next 指针之前，避免丢失对下一个节点的引用。\n      nextNode = currNode.next;\n\n      // 将当前节点的下一个节点更改为指向前一个节点。这样就反转了 currNode 和原始顺序中的下一个节点之间的链接。\n      currNode.next = prevNode;\n\n      // 将 prevNode 和 currNode 向前移动一步。prevNode 变为当前节点，currNode 变为之前存储在 nextNode 变量中的下一个节点。\n      prevNode = currNode;\n      currNode = nextNode;\n    }\n\n    // 重置头指针和尾指针，以反映新的顺序。\n    this.tail = this.head;\n    this.head = prevNode;\n\n    // 返回修改后的链表。\n    return this;\n  }\n```\n\n---\n\n- 源码地址: [JavaScript Algorithms and Data Structures](https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/linked-list/LinkedList.js)\n","source":"_posts/data-structures-002-LinkedList.md","raw":"---\ntitle: JavaScript Algorithms and Data Structures 源码分析(2) -- 单向链表LinkedList\ndate: 2023-10-29 17:45:14\ntags:\n  - data structures\ncategories:\n  - 数据结构与算法\n---\n\n## 链表\n\n在计算机科学中, 一个 **链表** 是数据元素的线性集合, 元素的线性顺序不是由它们在内存中的物理位置给出的。 相反, 每个元素指向下一个元素。它是由一组节点组成的数据结构,这些节点一起,表示序列。\n\n在最简单的形式下，每个节点由数据和到序列中下一个节点的引用(换句话说，链接)组成。这种结构允许在迭代期间有效地从序列中的任何位置插入或删除元素。\n\n更复杂的变体添加额外的链接，允许有效地插入或删除任意元素引用。链表的一个缺点是访问时间是线性的(而且难以管道化)。\n\n更快的访问，如随机访问，是不可行的。与链表相比，数组具有更好的缓存位置。\n\n<!-- more -->\n\n![LinkedList](../images/data-structures/linked-list.jpeg)\n\n## LinkedListNode 链表节点类\n\n```javascript\n/**\n * 链表节点类\n */\nclass LinkedListNode {\n  /**\n   * 构造函数\n   * @param {*} value 节点值\n   * @param {LinkedListNode} next 下一个节点，默认为null\n   */\n  constructor(value, next = null) {\n    this.value = value; // 当前节点的值\n    this.next = next; // 下一个节点的引用\n  }\n\n  /**\n   * 返回节点的字符串表示形式\n   * @param {function} callback 转换节点值的回调函数\n   * @return {string} 节点的字符串表示形式\n   */\n  toString(callback) {\n    return callback ? callback(this.value) : `${this.value}`;\n  }\n}\n```\n\n- `constructor` 构造函数用于创建一个链表节点对象。它接受两个参数：`value` 表示节点的值，`next` 表示下一个节点的引用，默认为 `null`。\n- `toString` 方法返回节点的字符串表示形式。它接受一个回调函数作为参数，用于将节点的值转换为字符串。如果提供了回调函数，则将节点的值传递给回调函数进行转换；否则，直接将节点的值转换为字符串并返回。\n\n## LinkedList 是一个单向链表的实现类. 它有以下方法:\n\n### constructor(comparatorFunction)方法\n\n作用: `LinkedList`类的构造函数.\n\n接受一个可选的比较函数作为参数.它会将 `LinkedList` 对象的 `head`（头节点）和 `tail`（尾节点）属性初始化为 `null`。它还创建了一个 `Comparator`（比较器）类的实例，并将其赋值给 `LinkedList` 对象的 `compare` 属性。\n\n```javascript\n  /**\n  * 构造函数\n  */\n  constructor(comparatorFunction) {\n    // 头节点\n    this.head = null;\n    // 尾节点\n    this.tail = null;\n\n    this.compare = new Comparator(comparatorFunction);\n  }\n```\n\n### prepend(value)方法\n\n作用: 在链表的开头插入一个新节点.\n\n接受一个值作为参数，并创建一个带有该值的新节点，该节点成为链表的新头部。如果链表还没有尾部，则将新节点设置为尾部。最后，它返回更新后的链表。\n\n```javascript\n  prepend(value) {\n    // 创建一个新节点, 并将新节点的next指向原来的头节点\n    const newNode = new LinkedListNode(value, this.head);\n    // 将head引用指向新节点, 新节点成为链表的新头部节点.\n    this.head = newNode;\n\n    // 如果链表没有尾节点, 则将新节点设置为尾节点.\n    if (!this.tail) {\n      this.tail = newNode;\n    }\n\n    return this;\n  }\n```\n\n### append(value)方法\n\n作用: 在链表的末尾插入一个新节点.\n\n首先，它创建一个新节点，该节点包含给定的值。接下来，它检查链表是否为空，即是否存在头节点。如果链表为空，将新节点设置为头节点和尾节点。如果链表不为空，将新节点连接到链表的末尾，并将新节点设置为新的尾节点。最后，返回更新后的链表。\n\n```javascript\n  append(value) {\n    // 创建一个新的节点\n    const newNode = new LinkedListNode(value);\n\n    // 如果还没有头节点，将新节点设为头节点和尾节点\n    if (!this.head) {\n      this.head = newNode;\n      this.tail = newNode;\n\n      return this;\n    }\n\n     // 将新节点连接到链表的末尾\n    this.tail.next = newNode;\n    this.tail = newNode;\n\n    return this;\n  }\n```\n\n### insert(value, index)方法\n\n作用: 在指定位置插入一个新节点.\n\n首先，它将原始索引转换为非负整数。然后，它检查索引是否为 0，如果是，则调用 `prepend` 方法在链表头部插入新节点。如果索引不为 0，则遍历链表找到目标索引的前一个节点。接下来，将新节点插入到目标索引的后面，并更新节点的 `next` 属性。如果有尾节点, 将新节点连接到链表的末尾，并将新节点设置为新的尾节点，如果链表为空，则将新节点设置为头节点和尾节点。最后，返回更新后的链表。\n\n```javascript\n  insert(value, rawIndex) {\n    // 将原始索引转换为非负整数\n    const index = rawIndex < 0 ? 0 : rawIndex;\n\n    // 如果索引为 0，调用 prepend 方法在链表头部插入新节点\n    if (index === 0) {\n      this.prepend(value);\n    } else {\n      let count = 1;\n      let currentNode = this.head;\n      const newNode = new LinkedListNode(value);\n      // 遍历链表，找到目标索引的前一个节点\n      while (currentNode) {\n        if (count === index) break;\n        currentNode = currentNode.next;\n        count += 1;\n      }\n      // 如果找到了目标索引的前一个节点\n      if (currentNode) {\n        // 将新节点插入到目标索引的后面\n        newNode.next = currentNode.next;\n        currentNode.next = newNode;\n      } else {\n        // 如果有尾节点\n        if (this.tail) {\n         // 将新节点连接到链表的末尾，并将新节点设置为新的尾节点\n          this.tail.next = newNode;\n          this.tail = newNode;\n        } else {\n          // 如果链表为空且没有尾节点，将新节点设置为头节点和尾节点\n          this.head = newNode;\n          this.tail = newNode;\n        }\n      }\n    }\n    return this;\n  }\n```\n\n### delete(value)方法\n\n作用: 删除链表中的一个节点.\n\n该方法接收一个 `value` 参数，并返回一个 `LinkedListNode` 对象。这个方法的作用是从链表中删除具有特定值的节点。它首先检查链表是否为空。如果为空，则返回 `null`。如果链表不为空，则遍历链表并删除所有具有指定值的节点。最后，它检查尾节点是否具有指定值，并在必要时更新尾节点。然后返回被删除的节点。\n\n```javascript\n  delete(value) {\n    // 如果链表为空，则直接返回 null\n    if (!this.head) {\n      return null;\n    }\n\n    let deletedNode = null;\n\n    // 如果头节点的值与指定值相等，则删除头节点，并将下一个节点设为新的头节点\n    while (this.head && this.compare.equal(this.head.value, value)) {\n      deletedNode = this.head;\n      this.head = this.head.next;\n    }\n\n    let currentNode = this.head;\n    // 如果当前节点不为空\n    if (currentNode !== null) {\n      // 如果下一个节点的值与指定值相等，则删除下一个节点，并将当前节点的下一个节点设为下下个节点\n      while (currentNode.next) {\n        if (this.compare.equal(currentNode.next.value, value)) {\n          deletedNode = currentNode.next;\n          currentNode.next = currentNode.next.next;\n        } else {\n          currentNode = currentNode.next;\n        }\n      }\n    }\n\n    // 检查尾节点是否为指定值，如果是，则更新尾节点\n    if (this.compare.equal(this.tail.value, value)) {\n      this.tail = currentNode;\n    }\n\n    // 返回被删除的节点\n    return deletedNode;\n  }\n```\n\n### find({value, callback})方法\n\n作用: 查找链表中的一个节点\n\n该方法接收一个包含 `value` 和 `callback` 属性的对象作为参数。\n如果链表为空，则直接返回 `null`。\n方法从链表的头节点开始遍历，对于每个节点，它会根据以下两种情况进行判断：\n\n1. 如果指定了 `callback`，则尝试通过回调函数来查找节点。如果回调函数返回 `true`，则返回当前节点。\n2. 如果指定了 `value`，则尝试通过值来比较节点。如果节点的值与指定值相等，则返回当前节点。\n\n如果遍历完整个链表后仍未找到满足条件的节点，则返回 `null`。\n\n```javascript\n  find({ value = undefined, callback = undefined }) {\n    // 如果链表为空，则直接返回null\n    if (!this.head) {\n      return null;\n    }\n\n    // 从链表头开始遍历\n    let currentNode = this.head;\n\n    // 遍历链表的每个节点\n    while (currentNode) {\n      // 如果回调函数存在，并且对当前节点的值返回了true，则返回当前节点.\n      if (callback && callback(currentNode.value)) {\n        return currentNode;\n      }\n\n      // 如果指定了查找的值，并且当前节点的值与指定值相等，则返回当前节点\n      if (value !== undefined && this.compare.equal(currentNode.value, value)) {\n        return currentNode;\n      }\n\n      // 移动到下一个节点\n      currentNode = currentNode.next;\n    }\n\n    // 如果没有找到匹配的节点，则返回null\n    return null;\n  }\n```\n\n### deleteTail()方法\n\n作用: 删除链表的尾节点，并返回被删除的尾节点。\n\n首先，方法将当前尾节点保存在 `deletedTail` 变量中。\n如果链表中只有一个节点，即头节点和尾节点相同，那么将头节点和尾节点都设为 `null`，并返回被删除的尾节点。\n如果链表中有多个节点，方法会遍历链表直到倒数第二个节点，然后将该节点的 `next` 指针设为 `null`，即删除了尾节点。最后，更新链表的尾节点为倒数第二个节点。\n最后，方法返回被删除的尾节点。\n\n```javascript\n  deleteTail() {\n    // 将当前尾节点保存到 deletedTail 变量中\n    const deletedTail = this.tail;\n\n    // 如果头节点和尾节点相同，说明链表中只有一个节点\n    if (this.head === this.tail) {\n      // 将头节点和尾节点都设为 null\n      this.head = null;\n      this.tail = null;\n\n      // 返回被删除的尾节点\n      return deletedTail;\n    }\n\n    // 如果链表中有多个节点...\n\n    // 从头节点开始遍历链表，直到找到倒数第二个节点\n    let currentNode = this.head;\n    while (currentNode.next) {\n      // 如果当前节点的下一个节点是尾节点，说明当前节点是倒数第二个节点\n      if (!currentNode.next.next) {\n        // 将当前节点的 next 指针设为 null，删除尾节点\n        currentNode.next = null;\n      } else {\n        // 否则，将当前节点指针移动到下一个节点\n        currentNode = currentNode.next;\n      }\n    }\n\n    // 更新尾节点为倒数第二个节点\n    this.tail = currentNode;\n\n    // 返回被删除的尾节点\n    return deletedTail;\n  }\n```\n\n### deleteHead()方法\n\n作用: 删除链表的头节点，并返回被删除的头节点。\n\n首先，方法检查链表是否为空。如果链表为空，则直接返回 `null`。\n然后，方法将当前头节点保存在 `deletedHead` 变量中。\n如果链表中有多个节点，方法将头节点更新为下一个节点。\n如果链表中只有一个节点，即头节点和尾节点相同，那么将头节点和尾节点都设为 `null`。\n最后，方法返回被删除的头节点。\n\n```javascript\n  deleteHead() {\n    // 检查链表头是否为空\n    if (!this.head) {\n      // 如果为空，返回null\n      return null;\n    }\n\n    // 将当前头节点赋值给`deletedHead`变量\n    const deletedHead = this.head;\n\n    // 检查头节点是否有下一个节点\n    if (this.head.next) {\n      // 如果有下一个节点，将头节点更新为下一个节点\n      this.head = this.head.next;\n    } else {\n      // 如果没有下一个节点，将头节点和尾节点都设置为null\n      this.head = null;\n      this.tail = null;\n    }\n\n    // 返回被删除的头节点\n    return deletedHead;\n  }\n```\n\n### fromArray(values)方法\n\n作用: 将一个数组转换成一个链表.\n\n方法使用 `forEach` 遍历数组中的每个值，并使用 `append` 方法将每个值添加到链表的末尾。\n最后，方法返回转换后的链表对象。\n\n```javascript\n  fromArray(values) {\n    values.forEach((value) => this.append(value));\n    return this;\n  }\n```\n\n### toArray()方法\n\n作用: 将链表转换成一个数组\n\n首先，方法创建一个空数组 `nodes`，用于存储链表中的节点。\n然后，方法从链表的头节点开始，通过循环遍历链表的每个节点。在循环中，将当前节点添加到 `nodes` 数组中，并将当前节点更新为下一个节点。\n最后，方法返回包含链表中所有节点的数组。\n\n```javascript\n  toArray() {\n    const nodes = [];\n\n    let currentNode = this.head;\n    // 遍历节点\n    while (currentNode) {\n      // 将每个节点放到数组中\n      nodes.push(currentNode);\n      currentNode = currentNode.next;\n    }\n\n    return nodes;\n  }\n```\n\n### toString(callback)方法\n\n作用: 将链表转换成一个字符串\n\n首先，方法调用 `toArray()` 方法将链表转换为数组。\n然后，方法使用 `map()` 方法遍历数组中的每个节点，并调用每个节点的 `toString()` 方法，将节点转换为字符串。如果提供了回调函数，则将回调函数应用于每个节点。\n最后，方法使用 `toString()` 方法将转换后的数组转换为一个字符串，并返回该字符串。\n\n```javascript\n  toString(callback) {\n    return this.toArray().map((node) => node.toString(callback)).toString();\n  }\n```\n\n### reverse()方法\n\n作用: 反转链表\n\n该方法会将链表中的节点顺序进行反转，即原来链表中的第一个节点变为新链表中的最后一个节点，原来链表中的最后一个节点变为新链表中的第一个节点，其余节点的顺序也会逆转。\n方法会遍历链表，将每个节点的 `next` 指针指向其前一个节点，从而实现链表的反转。\n最后，方法会更新链表的头节点和尾节点，并返回反转后的链表。\n\n```javascript\n  reverse() {\n    // 初始化三个变量：currNode（当前节点）、prevNode（前一个节点）和nextNode（下一个节点）。\n    let currNode = this.head;\n    let prevNode = null;\n    let nextNode = null;\n\n    // 循环遍历链表，直到 currNode 变为 null。\n    while (currNode) {\n      // 将下一个节点存储在 nextNode 变量中。这是为了在修改 currNode 的 next 指针之前，避免丢失对下一个节点的引用。\n      nextNode = currNode.next;\n\n      // 将当前节点的下一个节点更改为指向前一个节点。这样就反转了 currNode 和原始顺序中的下一个节点之间的链接。\n      currNode.next = prevNode;\n\n      // 将 prevNode 和 currNode 向前移动一步。prevNode 变为当前节点，currNode 变为之前存储在 nextNode 变量中的下一个节点。\n      prevNode = currNode;\n      currNode = nextNode;\n    }\n\n    // 重置头指针和尾指针，以反映新的顺序。\n    this.tail = this.head;\n    this.head = prevNode;\n\n    // 返回修改后的链表。\n    return this;\n  }\n```\n\n---\n\n- 源码地址: [JavaScript Algorithms and Data Structures](https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/linked-list/LinkedList.js)\n","slug":"data-structures-002-LinkedList","published":1,"updated":"2023-11-01T10:30:02.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clq4xe1d40006tz2hgcoidwm9","content":"<h2 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h2><p>在计算机科学中, 一个 <strong>链表</strong> 是数据元素的线性集合, 元素的线性顺序不是由它们在内存中的物理位置给出的。 相反, 每个元素指向下一个元素。它是由一组节点组成的数据结构,这些节点一起,表示序列。</p>\n<p>在最简单的形式下，每个节点由数据和到序列中下一个节点的引用(换句话说，链接)组成。这种结构允许在迭代期间有效地从序列中的任何位置插入或删除元素。</p>\n<p>更复杂的变体添加额外的链接，允许有效地插入或删除任意元素引用。链表的一个缺点是访问时间是线性的(而且难以管道化)。</p>\n<p>更快的访问，如随机访问，是不可行的。与链表相比，数组具有更好的缓存位置。</p>\n<span id=\"more\"></span>\n\n<p><img src=\"/../images/data-structures/linked-list.jpeg\" alt=\"LinkedList\"></p>\n<h2 id=\"LinkedListNode-链表节点类\"><a href=\"#LinkedListNode-链表节点类\" class=\"headerlink\" title=\"LinkedListNode 链表节点类\"></a>LinkedListNode 链表节点类</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 链表节点类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LinkedListNode</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 构造函数</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; value 节点值</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">LinkedListNode</span>&#125; next 下一个节点，默认为null</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">value, next = <span class=\"literal\">null</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value; <span class=\"comment\">// 当前节点的值</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">next</span> = next; <span class=\"comment\">// 下一个节点的引用</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 返回节点的字符串表示形式</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">function</span>&#125; callback 转换节点值的回调函数</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string</span>&#125; 节点的字符串表示形式</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">toString</span>(<span class=\"params\">callback</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> callback ? <span class=\"title function_\">callback</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>) : <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.value&#125;</span>`</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>constructor</code> 构造函数用于创建一个链表节点对象。它接受两个参数：<code>value</code> 表示节点的值，<code>next</code> 表示下一个节点的引用，默认为 <code>null</code>。</li>\n<li><code>toString</code> 方法返回节点的字符串表示形式。它接受一个回调函数作为参数，用于将节点的值转换为字符串。如果提供了回调函数，则将节点的值传递给回调函数进行转换；否则，直接将节点的值转换为字符串并返回。</li>\n</ul>\n<h2 id=\"LinkedList-是一个单向链表的实现类-它有以下方法\"><a href=\"#LinkedList-是一个单向链表的实现类-它有以下方法\" class=\"headerlink\" title=\"LinkedList 是一个单向链表的实现类. 它有以下方法:\"></a>LinkedList 是一个单向链表的实现类. 它有以下方法:</h2><h3 id=\"constructor-comparatorFunction-方法\"><a href=\"#constructor-comparatorFunction-方法\" class=\"headerlink\" title=\"constructor(comparatorFunction)方法\"></a>constructor(comparatorFunction)方法</h3><p>作用: <code>LinkedList</code>类的构造函数.</p>\n<p>接受一个可选的比较函数作为参数.它会将 <code>LinkedList</code> 对象的 <code>head</code>（头节点）和 <code>tail</code>（尾节点）属性初始化为 <code>null</code>。它还创建了一个 <code>Comparator</code>（比较器）类的实例，并将其赋值给 <code>LinkedList</code> 对象的 <code>compare</code> 属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 构造函数</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\">comparatorFunction</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 头节点</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 尾节点</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">compare</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>(comparatorFunction);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"prepend-value-方法\"><a href=\"#prepend-value-方法\" class=\"headerlink\" title=\"prepend(value)方法\"></a>prepend(value)方法</h3><p>作用: 在链表的开头插入一个新节点.</p>\n<p>接受一个值作为参数，并创建一个带有该值的新节点，该节点成为链表的新头部。如果链表还没有尾部，则将新节点设置为尾部。最后，它返回更新后的链表。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">prepend</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建一个新节点, 并将新节点的next指向原来的头节点</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> newNode = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedListNode</span>(value, <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 将head引用指向新节点, 新节点成为链表的新头部节点.</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = newNode;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果链表没有尾节点, 则将新节点设置为尾节点.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">tail</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span> = newNode;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"append-value-方法\"><a href=\"#append-value-方法\" class=\"headerlink\" title=\"append(value)方法\"></a>append(value)方法</h3><p>作用: 在链表的末尾插入一个新节点.</p>\n<p>首先，它创建一个新节点，该节点包含给定的值。接下来，它检查链表是否为空，即是否存在头节点。如果链表为空，将新节点设置为头节点和尾节点。如果链表不为空，将新节点连接到链表的末尾，并将新节点设置为新的尾节点。最后，返回更新后的链表。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">append</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建一个新的节点</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> newNode = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedListNode</span>(value);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果还没有头节点，将新节点设为头节点和尾节点</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">head</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = newNode;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span> = newNode;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 将新节点连接到链表的末尾</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span>.<span class=\"property\">next</span> = newNode;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span> = newNode;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"insert-value-index-方法\"><a href=\"#insert-value-index-方法\" class=\"headerlink\" title=\"insert(value, index)方法\"></a>insert(value, index)方法</h3><p>作用: 在指定位置插入一个新节点.</p>\n<p>首先，它将原始索引转换为非负整数。然后，它检查索引是否为 0，如果是，则调用 <code>prepend</code> 方法在链表头部插入新节点。如果索引不为 0，则遍历链表找到目标索引的前一个节点。接下来，将新节点插入到目标索引的后面，并更新节点的 <code>next</code> 属性。如果有尾节点, 将新节点连接到链表的末尾，并将新节点设置为新的尾节点，如果链表为空，则将新节点设置为头节点和尾节点。最后，返回更新后的链表。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">insert</span>(<span class=\"params\">value, rawIndex</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将原始索引转换为非负整数</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> index = rawIndex &lt; <span class=\"number\">0</span> ? <span class=\"number\">0</span> : rawIndex;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果索引为 0，调用 prepend 方法在链表头部插入新节点</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (index === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">prepend</span>(value);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> currentNode = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newNode = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedListNode</span>(value);</span><br><span class=\"line\">    <span class=\"comment\">// 遍历链表，找到目标索引的前一个节点</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (currentNode) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (count === index) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      currentNode = currentNode.<span class=\"property\">next</span>;</span><br><span class=\"line\">      count += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果找到了目标索引的前一个节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (currentNode) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 将新节点插入到目标索引的后面</span></span><br><span class=\"line\">      newNode.<span class=\"property\">next</span> = currentNode.<span class=\"property\">next</span>;</span><br><span class=\"line\">      currentNode.<span class=\"property\">next</span> = newNode;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果有尾节点</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">tail</span>) &#123;</span><br><span class=\"line\">       <span class=\"comment\">// 将新节点连接到链表的末尾，并将新节点设置为新的尾节点</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span>.<span class=\"property\">next</span> = newNode;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span> = newNode;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果链表为空且没有尾节点，将新节点设置为头节点和尾节点</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = newNode;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span> = newNode;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"delete-value-方法\"><a href=\"#delete-value-方法\" class=\"headerlink\" title=\"delete(value)方法\"></a>delete(value)方法</h3><p>作用: 删除链表中的一个节点.</p>\n<p>该方法接收一个 <code>value</code> 参数，并返回一个 <code>LinkedListNode</code> 对象。这个方法的作用是从链表中删除具有特定值的节点。它首先检查链表是否为空。如果为空，则返回 <code>null</code>。如果链表不为空，则遍历链表并删除所有具有指定值的节点。最后，它检查尾节点是否具有指定值，并在必要时更新尾节点。然后返回被删除的节点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">delete</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果链表为空，则直接返回 null</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">head</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> deletedNode = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果头节点的值与指定值相等，则删除头节点，并将下一个节点设为新的头节点</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">head</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">compare</span>.<span class=\"title function_\">equal</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">head</span>.<span class=\"property\">value</span>, value)) &#123;</span><br><span class=\"line\">    deletedNode = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>.<span class=\"property\">next</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentNode = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 如果当前节点不为空</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentNode !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果下一个节点的值与指定值相等，则删除下一个节点，并将当前节点的下一个节点设为下下个节点</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (currentNode.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">compare</span>.<span class=\"title function_\">equal</span>(currentNode.<span class=\"property\">next</span>.<span class=\"property\">value</span>, value)) &#123;</span><br><span class=\"line\">        deletedNode = currentNode.<span class=\"property\">next</span>;</span><br><span class=\"line\">        currentNode.<span class=\"property\">next</span> = currentNode.<span class=\"property\">next</span>.<span class=\"property\">next</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        currentNode = currentNode.<span class=\"property\">next</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 检查尾节点是否为指定值，如果是，则更新尾节点</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">compare</span>.<span class=\"title function_\">equal</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">tail</span>.<span class=\"property\">value</span>, value)) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span> = currentNode;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回被删除的节点</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> deletedNode;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"find-value-callback-方法\"><a href=\"#find-value-callback-方法\" class=\"headerlink\" title=\"find({value, callback})方法\"></a>find({value, callback})方法</h3><p>作用: 查找链表中的一个节点</p>\n<p>该方法接收一个包含 <code>value</code> 和 <code>callback</code> 属性的对象作为参数。<br>如果链表为空，则直接返回 <code>null</code>。<br>方法从链表的头节点开始遍历，对于每个节点，它会根据以下两种情况进行判断：</p>\n<ol>\n<li>如果指定了 <code>callback</code>，则尝试通过回调函数来查找节点。如果回调函数返回 <code>true</code>，则返回当前节点。</li>\n<li>如果指定了 <code>value</code>，则尝试通过值来比较节点。如果节点的值与指定值相等，则返回当前节点。</li>\n</ol>\n<p>如果遍历完整个链表后仍未找到满足条件的节点，则返回 <code>null</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">find</span>(<span class=\"params\">&#123; value = <span class=\"literal\">undefined</span>, callback = <span class=\"literal\">undefined</span> &#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果链表为空，则直接返回null</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">head</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 从链表头开始遍历</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentNode = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 遍历链表的每个节点</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (currentNode) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果回调函数存在，并且对当前节点的值返回了true，则返回当前节点.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (callback &amp;&amp; <span class=\"title function_\">callback</span>(currentNode.<span class=\"property\">value</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> currentNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果指定了查找的值，并且当前节点的值与指定值相等，则返回当前节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value !== <span class=\"literal\">undefined</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">compare</span>.<span class=\"title function_\">equal</span>(currentNode.<span class=\"property\">value</span>, value)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> currentNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 移动到下一个节点</span></span><br><span class=\"line\">    currentNode = currentNode.<span class=\"property\">next</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果没有找到匹配的节点，则返回null</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"deleteTail-方法\"><a href=\"#deleteTail-方法\" class=\"headerlink\" title=\"deleteTail()方法\"></a>deleteTail()方法</h3><p>作用: 删除链表的尾节点，并返回被删除的尾节点。</p>\n<p>首先，方法将当前尾节点保存在 <code>deletedTail</code> 变量中。<br>如果链表中只有一个节点，即头节点和尾节点相同，那么将头节点和尾节点都设为 <code>null</code>，并返回被删除的尾节点。<br>如果链表中有多个节点，方法会遍历链表直到倒数第二个节点，然后将该节点的 <code>next</code> 指针设为 <code>null</code>，即删除了尾节点。最后，更新链表的尾节点为倒数第二个节点。<br>最后，方法返回被删除的尾节点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">deleteTail</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将当前尾节点保存到 deletedTail 变量中</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> deletedTail = <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果头节点和尾节点相同，说明链表中只有一个节点</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">head</span> === <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将头节点和尾节点都设为 null</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回被删除的尾节点</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> deletedTail;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果链表中有多个节点...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 从头节点开始遍历链表，直到找到倒数第二个节点</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentNode = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (currentNode.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果当前节点的下一个节点是尾节点，说明当前节点是倒数第二个节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!currentNode.<span class=\"property\">next</span>.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 将当前节点的 next 指针设为 null，删除尾节点</span></span><br><span class=\"line\">      currentNode.<span class=\"property\">next</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 否则，将当前节点指针移动到下一个节点</span></span><br><span class=\"line\">      currentNode = currentNode.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 更新尾节点为倒数第二个节点</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span> = currentNode;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回被删除的尾节点</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> deletedTail;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"deleteHead-方法\"><a href=\"#deleteHead-方法\" class=\"headerlink\" title=\"deleteHead()方法\"></a>deleteHead()方法</h3><p>作用: 删除链表的头节点，并返回被删除的头节点。</p>\n<p>首先，方法检查链表是否为空。如果链表为空，则直接返回 <code>null</code>。<br>然后，方法将当前头节点保存在 <code>deletedHead</code> 变量中。<br>如果链表中有多个节点，方法将头节点更新为下一个节点。<br>如果链表中只有一个节点，即头节点和尾节点相同，那么将头节点和尾节点都设为 <code>null</code>。<br>最后，方法返回被删除的头节点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">deleteHead</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 检查链表头是否为空</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">head</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果为空，返回null</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将当前头节点赋值给`deletedHead`变量</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> deletedHead = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 检查头节点是否有下一个节点</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">head</span>.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果有下一个节点，将头节点更新为下一个节点</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>.<span class=\"property\">next</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果没有下一个节点，将头节点和尾节点都设置为null</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回被删除的头节点</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> deletedHead;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"fromArray-values-方法\"><a href=\"#fromArray-values-方法\" class=\"headerlink\" title=\"fromArray(values)方法\"></a>fromArray(values)方法</h3><p>作用: 将一个数组转换成一个链表.</p>\n<p>方法使用 <code>forEach</code> 遍历数组中的每个值，并使用 <code>append</code> 方法将每个值添加到链表的末尾。<br>最后，方法返回转换后的链表对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">fromArray</span>(<span class=\"params\">values</span>) &#123;</span><br><span class=\"line\">  values.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">append</span>(value));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"toArray-方法\"><a href=\"#toArray-方法\" class=\"headerlink\" title=\"toArray()方法\"></a>toArray()方法</h3><p>作用: 将链表转换成一个数组</p>\n<p>首先，方法创建一个空数组 <code>nodes</code>，用于存储链表中的节点。<br>然后，方法从链表的头节点开始，通过循环遍历链表的每个节点。在循环中，将当前节点添加到 <code>nodes</code> 数组中，并将当前节点更新为下一个节点。<br>最后，方法返回包含链表中所有节点的数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">toArray</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> nodes = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentNode = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 遍历节点</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (currentNode) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将每个节点放到数组中</span></span><br><span class=\"line\">    nodes.<span class=\"title function_\">push</span>(currentNode);</span><br><span class=\"line\">    currentNode = currentNode.<span class=\"property\">next</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> nodes;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"toString-callback-方法\"><a href=\"#toString-callback-方法\" class=\"headerlink\" title=\"toString(callback)方法\"></a>toString(callback)方法</h3><p>作用: 将链表转换成一个字符串</p>\n<p>首先，方法调用 <code>toArray()</code> 方法将链表转换为数组。<br>然后，方法使用 <code>map()</code> 方法遍历数组中的每个节点，并调用每个节点的 <code>toString()</code> 方法，将节点转换为字符串。如果提供了回调函数，则将回调函数应用于每个节点。<br>最后，方法使用 <code>toString()</code> 方法将转换后的数组转换为一个字符串，并返回该字符串。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">toString</span>(<span class=\"params\">callback</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">toArray</span>().<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">node</span>) =&gt;</span> node.<span class=\"title function_\">toString</span>(callback)).<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"reverse-方法\"><a href=\"#reverse-方法\" class=\"headerlink\" title=\"reverse()方法\"></a>reverse()方法</h3><p>作用: 反转链表</p>\n<p>该方法会将链表中的节点顺序进行反转，即原来链表中的第一个节点变为新链表中的最后一个节点，原来链表中的最后一个节点变为新链表中的第一个节点，其余节点的顺序也会逆转。<br>方法会遍历链表，将每个节点的 <code>next</code> 指针指向其前一个节点，从而实现链表的反转。<br>最后，方法会更新链表的头节点和尾节点，并返回反转后的链表。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">reverse</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化三个变量：currNode（当前节点）、prevNode（前一个节点）和nextNode（下一个节点）。</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> currNode = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> prevNode = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> nextNode = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 循环遍历链表，直到 currNode 变为 null。</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (currNode) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将下一个节点存储在 nextNode 变量中。这是为了在修改 currNode 的 next 指针之前，避免丢失对下一个节点的引用。</span></span><br><span class=\"line\">    nextNode = currNode.<span class=\"property\">next</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将当前节点的下一个节点更改为指向前一个节点。这样就反转了 currNode 和原始顺序中的下一个节点之间的链接。</span></span><br><span class=\"line\">    currNode.<span class=\"property\">next</span> = prevNode;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将 prevNode 和 currNode 向前移动一步。prevNode 变为当前节点，currNode 变为之前存储在 nextNode 变量中的下一个节点。</span></span><br><span class=\"line\">    prevNode = currNode;</span><br><span class=\"line\">    currNode = nextNode;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 重置头指针和尾指针，以反映新的顺序。</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = prevNode;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回修改后的链表。</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>源码地址: <a href=\"https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/linked-list/LinkedList.js\">JavaScript Algorithms and Data Structures</a></li>\n</ul>\n","site":{"data":{}},"related_posts":[],"length":3253,"excerpt":"<h2 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h2><p>在计算机科学中, 一个 <strong>链表</strong> 是数据元素的线性集合, 元素的线性顺序不是由它们在内存中的物理位置给出的。 相反, 每个元素指向下一个元素。它是由一组节点组成的数据结构,这些节点一起,表示序列。</p>\n<p>在最简单的形式下，每个节点由数据和到序列中下一个节点的引用(换句话说，链接)组成。这种结构允许在迭代期间有效地从序列中的任何位置插入或删除元素。</p>\n<p>更复杂的变体添加额外的链接，允许有效地插入或删除任意元素引用。链表的一个缺点是访问时间是线性的(而且难以管道化)。</p>\n<p>更快的访问，如随机访问，是不可行的。与链表相比，数组具有更好的缓存位置。</p>","more":"<p><img src=\"/../images/data-structures/linked-list.jpeg\" alt=\"LinkedList\"></p>\n<h2 id=\"LinkedListNode-链表节点类\"><a href=\"#LinkedListNode-链表节点类\" class=\"headerlink\" title=\"LinkedListNode 链表节点类\"></a>LinkedListNode 链表节点类</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 链表节点类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LinkedListNode</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 构造函数</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; value 节点值</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">LinkedListNode</span>&#125; next 下一个节点，默认为null</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">value, next = <span class=\"literal\">null</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value; <span class=\"comment\">// 当前节点的值</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">next</span> = next; <span class=\"comment\">// 下一个节点的引用</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 返回节点的字符串表示形式</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">function</span>&#125; callback 转换节点值的回调函数</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string</span>&#125; 节点的字符串表示形式</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">toString</span>(<span class=\"params\">callback</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> callback ? <span class=\"title function_\">callback</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>) : <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.value&#125;</span>`</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>constructor</code> 构造函数用于创建一个链表节点对象。它接受两个参数：<code>value</code> 表示节点的值，<code>next</code> 表示下一个节点的引用，默认为 <code>null</code>。</li>\n<li><code>toString</code> 方法返回节点的字符串表示形式。它接受一个回调函数作为参数，用于将节点的值转换为字符串。如果提供了回调函数，则将节点的值传递给回调函数进行转换；否则，直接将节点的值转换为字符串并返回。</li>\n</ul>\n<h2 id=\"LinkedList-是一个单向链表的实现类-它有以下方法\"><a href=\"#LinkedList-是一个单向链表的实现类-它有以下方法\" class=\"headerlink\" title=\"LinkedList 是一个单向链表的实现类. 它有以下方法:\"></a>LinkedList 是一个单向链表的实现类. 它有以下方法:</h2><h3 id=\"constructor-comparatorFunction-方法\"><a href=\"#constructor-comparatorFunction-方法\" class=\"headerlink\" title=\"constructor(comparatorFunction)方法\"></a>constructor(comparatorFunction)方法</h3><p>作用: <code>LinkedList</code>类的构造函数.</p>\n<p>接受一个可选的比较函数作为参数.它会将 <code>LinkedList</code> 对象的 <code>head</code>（头节点）和 <code>tail</code>（尾节点）属性初始化为 <code>null</code>。它还创建了一个 <code>Comparator</code>（比较器）类的实例，并将其赋值给 <code>LinkedList</code> 对象的 <code>compare</code> 属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 构造函数</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\">comparatorFunction</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 头节点</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 尾节点</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">compare</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>(comparatorFunction);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"prepend-value-方法\"><a href=\"#prepend-value-方法\" class=\"headerlink\" title=\"prepend(value)方法\"></a>prepend(value)方法</h3><p>作用: 在链表的开头插入一个新节点.</p>\n<p>接受一个值作为参数，并创建一个带有该值的新节点，该节点成为链表的新头部。如果链表还没有尾部，则将新节点设置为尾部。最后，它返回更新后的链表。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">prepend</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建一个新节点, 并将新节点的next指向原来的头节点</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> newNode = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedListNode</span>(value, <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 将head引用指向新节点, 新节点成为链表的新头部节点.</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = newNode;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果链表没有尾节点, 则将新节点设置为尾节点.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">tail</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span> = newNode;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"append-value-方法\"><a href=\"#append-value-方法\" class=\"headerlink\" title=\"append(value)方法\"></a>append(value)方法</h3><p>作用: 在链表的末尾插入一个新节点.</p>\n<p>首先，它创建一个新节点，该节点包含给定的值。接下来，它检查链表是否为空，即是否存在头节点。如果链表为空，将新节点设置为头节点和尾节点。如果链表不为空，将新节点连接到链表的末尾，并将新节点设置为新的尾节点。最后，返回更新后的链表。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">append</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建一个新的节点</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> newNode = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedListNode</span>(value);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果还没有头节点，将新节点设为头节点和尾节点</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">head</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = newNode;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span> = newNode;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 将新节点连接到链表的末尾</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span>.<span class=\"property\">next</span> = newNode;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span> = newNode;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"insert-value-index-方法\"><a href=\"#insert-value-index-方法\" class=\"headerlink\" title=\"insert(value, index)方法\"></a>insert(value, index)方法</h3><p>作用: 在指定位置插入一个新节点.</p>\n<p>首先，它将原始索引转换为非负整数。然后，它检查索引是否为 0，如果是，则调用 <code>prepend</code> 方法在链表头部插入新节点。如果索引不为 0，则遍历链表找到目标索引的前一个节点。接下来，将新节点插入到目标索引的后面，并更新节点的 <code>next</code> 属性。如果有尾节点, 将新节点连接到链表的末尾，并将新节点设置为新的尾节点，如果链表为空，则将新节点设置为头节点和尾节点。最后，返回更新后的链表。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">insert</span>(<span class=\"params\">value, rawIndex</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将原始索引转换为非负整数</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> index = rawIndex &lt; <span class=\"number\">0</span> ? <span class=\"number\">0</span> : rawIndex;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果索引为 0，调用 prepend 方法在链表头部插入新节点</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (index === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">prepend</span>(value);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> currentNode = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newNode = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedListNode</span>(value);</span><br><span class=\"line\">    <span class=\"comment\">// 遍历链表，找到目标索引的前一个节点</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (currentNode) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (count === index) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      currentNode = currentNode.<span class=\"property\">next</span>;</span><br><span class=\"line\">      count += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果找到了目标索引的前一个节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (currentNode) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 将新节点插入到目标索引的后面</span></span><br><span class=\"line\">      newNode.<span class=\"property\">next</span> = currentNode.<span class=\"property\">next</span>;</span><br><span class=\"line\">      currentNode.<span class=\"property\">next</span> = newNode;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果有尾节点</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">tail</span>) &#123;</span><br><span class=\"line\">       <span class=\"comment\">// 将新节点连接到链表的末尾，并将新节点设置为新的尾节点</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span>.<span class=\"property\">next</span> = newNode;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span> = newNode;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果链表为空且没有尾节点，将新节点设置为头节点和尾节点</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = newNode;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span> = newNode;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"delete-value-方法\"><a href=\"#delete-value-方法\" class=\"headerlink\" title=\"delete(value)方法\"></a>delete(value)方法</h3><p>作用: 删除链表中的一个节点.</p>\n<p>该方法接收一个 <code>value</code> 参数，并返回一个 <code>LinkedListNode</code> 对象。这个方法的作用是从链表中删除具有特定值的节点。它首先检查链表是否为空。如果为空，则返回 <code>null</code>。如果链表不为空，则遍历链表并删除所有具有指定值的节点。最后，它检查尾节点是否具有指定值，并在必要时更新尾节点。然后返回被删除的节点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">delete</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果链表为空，则直接返回 null</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">head</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> deletedNode = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果头节点的值与指定值相等，则删除头节点，并将下一个节点设为新的头节点</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">head</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">compare</span>.<span class=\"title function_\">equal</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">head</span>.<span class=\"property\">value</span>, value)) &#123;</span><br><span class=\"line\">    deletedNode = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>.<span class=\"property\">next</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentNode = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 如果当前节点不为空</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentNode !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果下一个节点的值与指定值相等，则删除下一个节点，并将当前节点的下一个节点设为下下个节点</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (currentNode.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">compare</span>.<span class=\"title function_\">equal</span>(currentNode.<span class=\"property\">next</span>.<span class=\"property\">value</span>, value)) &#123;</span><br><span class=\"line\">        deletedNode = currentNode.<span class=\"property\">next</span>;</span><br><span class=\"line\">        currentNode.<span class=\"property\">next</span> = currentNode.<span class=\"property\">next</span>.<span class=\"property\">next</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        currentNode = currentNode.<span class=\"property\">next</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 检查尾节点是否为指定值，如果是，则更新尾节点</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">compare</span>.<span class=\"title function_\">equal</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">tail</span>.<span class=\"property\">value</span>, value)) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span> = currentNode;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回被删除的节点</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> deletedNode;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"find-value-callback-方法\"><a href=\"#find-value-callback-方法\" class=\"headerlink\" title=\"find({value, callback})方法\"></a>find({value, callback})方法</h3><p>作用: 查找链表中的一个节点</p>\n<p>该方法接收一个包含 <code>value</code> 和 <code>callback</code> 属性的对象作为参数。<br>如果链表为空，则直接返回 <code>null</code>。<br>方法从链表的头节点开始遍历，对于每个节点，它会根据以下两种情况进行判断：</p>\n<ol>\n<li>如果指定了 <code>callback</code>，则尝试通过回调函数来查找节点。如果回调函数返回 <code>true</code>，则返回当前节点。</li>\n<li>如果指定了 <code>value</code>，则尝试通过值来比较节点。如果节点的值与指定值相等，则返回当前节点。</li>\n</ol>\n<p>如果遍历完整个链表后仍未找到满足条件的节点，则返回 <code>null</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">find</span>(<span class=\"params\">&#123; value = <span class=\"literal\">undefined</span>, callback = <span class=\"literal\">undefined</span> &#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果链表为空，则直接返回null</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">head</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 从链表头开始遍历</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentNode = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 遍历链表的每个节点</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (currentNode) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果回调函数存在，并且对当前节点的值返回了true，则返回当前节点.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (callback &amp;&amp; <span class=\"title function_\">callback</span>(currentNode.<span class=\"property\">value</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> currentNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果指定了查找的值，并且当前节点的值与指定值相等，则返回当前节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value !== <span class=\"literal\">undefined</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">compare</span>.<span class=\"title function_\">equal</span>(currentNode.<span class=\"property\">value</span>, value)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> currentNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 移动到下一个节点</span></span><br><span class=\"line\">    currentNode = currentNode.<span class=\"property\">next</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果没有找到匹配的节点，则返回null</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"deleteTail-方法\"><a href=\"#deleteTail-方法\" class=\"headerlink\" title=\"deleteTail()方法\"></a>deleteTail()方法</h3><p>作用: 删除链表的尾节点，并返回被删除的尾节点。</p>\n<p>首先，方法将当前尾节点保存在 <code>deletedTail</code> 变量中。<br>如果链表中只有一个节点，即头节点和尾节点相同，那么将头节点和尾节点都设为 <code>null</code>，并返回被删除的尾节点。<br>如果链表中有多个节点，方法会遍历链表直到倒数第二个节点，然后将该节点的 <code>next</code> 指针设为 <code>null</code>，即删除了尾节点。最后，更新链表的尾节点为倒数第二个节点。<br>最后，方法返回被删除的尾节点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">deleteTail</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将当前尾节点保存到 deletedTail 变量中</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> deletedTail = <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果头节点和尾节点相同，说明链表中只有一个节点</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">head</span> === <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将头节点和尾节点都设为 null</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回被删除的尾节点</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> deletedTail;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果链表中有多个节点...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 从头节点开始遍历链表，直到找到倒数第二个节点</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentNode = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (currentNode.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果当前节点的下一个节点是尾节点，说明当前节点是倒数第二个节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!currentNode.<span class=\"property\">next</span>.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 将当前节点的 next 指针设为 null，删除尾节点</span></span><br><span class=\"line\">      currentNode.<span class=\"property\">next</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 否则，将当前节点指针移动到下一个节点</span></span><br><span class=\"line\">      currentNode = currentNode.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 更新尾节点为倒数第二个节点</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span> = currentNode;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回被删除的尾节点</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> deletedTail;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"deleteHead-方法\"><a href=\"#deleteHead-方法\" class=\"headerlink\" title=\"deleteHead()方法\"></a>deleteHead()方法</h3><p>作用: 删除链表的头节点，并返回被删除的头节点。</p>\n<p>首先，方法检查链表是否为空。如果链表为空，则直接返回 <code>null</code>。<br>然后，方法将当前头节点保存在 <code>deletedHead</code> 变量中。<br>如果链表中有多个节点，方法将头节点更新为下一个节点。<br>如果链表中只有一个节点，即头节点和尾节点相同，那么将头节点和尾节点都设为 <code>null</code>。<br>最后，方法返回被删除的头节点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">deleteHead</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 检查链表头是否为空</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">head</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果为空，返回null</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将当前头节点赋值给`deletedHead`变量</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> deletedHead = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 检查头节点是否有下一个节点</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">head</span>.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果有下一个节点，将头节点更新为下一个节点</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>.<span class=\"property\">next</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果没有下一个节点，将头节点和尾节点都设置为null</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回被删除的头节点</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> deletedHead;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"fromArray-values-方法\"><a href=\"#fromArray-values-方法\" class=\"headerlink\" title=\"fromArray(values)方法\"></a>fromArray(values)方法</h3><p>作用: 将一个数组转换成一个链表.</p>\n<p>方法使用 <code>forEach</code> 遍历数组中的每个值，并使用 <code>append</code> 方法将每个值添加到链表的末尾。<br>最后，方法返回转换后的链表对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">fromArray</span>(<span class=\"params\">values</span>) &#123;</span><br><span class=\"line\">  values.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">append</span>(value));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"toArray-方法\"><a href=\"#toArray-方法\" class=\"headerlink\" title=\"toArray()方法\"></a>toArray()方法</h3><p>作用: 将链表转换成一个数组</p>\n<p>首先，方法创建一个空数组 <code>nodes</code>，用于存储链表中的节点。<br>然后，方法从链表的头节点开始，通过循环遍历链表的每个节点。在循环中，将当前节点添加到 <code>nodes</code> 数组中，并将当前节点更新为下一个节点。<br>最后，方法返回包含链表中所有节点的数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">toArray</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> nodes = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentNode = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 遍历节点</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (currentNode) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将每个节点放到数组中</span></span><br><span class=\"line\">    nodes.<span class=\"title function_\">push</span>(currentNode);</span><br><span class=\"line\">    currentNode = currentNode.<span class=\"property\">next</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> nodes;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"toString-callback-方法\"><a href=\"#toString-callback-方法\" class=\"headerlink\" title=\"toString(callback)方法\"></a>toString(callback)方法</h3><p>作用: 将链表转换成一个字符串</p>\n<p>首先，方法调用 <code>toArray()</code> 方法将链表转换为数组。<br>然后，方法使用 <code>map()</code> 方法遍历数组中的每个节点，并调用每个节点的 <code>toString()</code> 方法，将节点转换为字符串。如果提供了回调函数，则将回调函数应用于每个节点。<br>最后，方法使用 <code>toString()</code> 方法将转换后的数组转换为一个字符串，并返回该字符串。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">toString</span>(<span class=\"params\">callback</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">toArray</span>().<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">node</span>) =&gt;</span> node.<span class=\"title function_\">toString</span>(callback)).<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"reverse-方法\"><a href=\"#reverse-方法\" class=\"headerlink\" title=\"reverse()方法\"></a>reverse()方法</h3><p>作用: 反转链表</p>\n<p>该方法会将链表中的节点顺序进行反转，即原来链表中的第一个节点变为新链表中的最后一个节点，原来链表中的最后一个节点变为新链表中的第一个节点，其余节点的顺序也会逆转。<br>方法会遍历链表，将每个节点的 <code>next</code> 指针指向其前一个节点，从而实现链表的反转。<br>最后，方法会更新链表的头节点和尾节点，并返回反转后的链表。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">reverse</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化三个变量：currNode（当前节点）、prevNode（前一个节点）和nextNode（下一个节点）。</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> currNode = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> prevNode = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> nextNode = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 循环遍历链表，直到 currNode 变为 null。</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (currNode) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将下一个节点存储在 nextNode 变量中。这是为了在修改 currNode 的 next 指针之前，避免丢失对下一个节点的引用。</span></span><br><span class=\"line\">    nextNode = currNode.<span class=\"property\">next</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将当前节点的下一个节点更改为指向前一个节点。这样就反转了 currNode 和原始顺序中的下一个节点之间的链接。</span></span><br><span class=\"line\">    currNode.<span class=\"property\">next</span> = prevNode;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将 prevNode 和 currNode 向前移动一步。prevNode 变为当前节点，currNode 变为之前存储在 nextNode 变量中的下一个节点。</span></span><br><span class=\"line\">    prevNode = currNode;</span><br><span class=\"line\">    currNode = nextNode;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 重置头指针和尾指针，以反映新的顺序。</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = prevNode;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回修改后的链表。</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>源码地址: <a href=\"https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/linked-list/LinkedList.js\">JavaScript Algorithms and Data Structures</a></li>\n</ul>"},{"title":"JavaScript Algorithms and Data Structures 源码分析(3) -- 双向链表DoublyLinkedList","date":"2023-10-31T06:29:40.000Z","_content":"\n## 双向链表\n\n在计算机科学中, 一个 **双向链表(doubly linked list)** 是由一组称为节点的顺序链接记录组成的链接数据结构。每个节点包含两个字段，称为链接，它们是对节点序列中上一个节点和下一个节点的引用。开始节点和结束节点的上一个链接和下一个链接分别指向某种终止节点，通常是前哨节点或 null，以方便遍历列表。如果只有一个前哨节点，则列表通过前哨节点循环链接。它可以被概念化为两个由相同数据项组成的单链表，但顺序相反。\n\n两个节点链接允许在任一方向上遍历列表。\n\n在双向链表中进行添加或者删除节点时,需做的链接更改要比单向链表复杂得多。这种操作在单向链表中更简单高效,因为不需要关注一个节点（除第一个和最后一个节点以外的节点）的两个链接,而只需要关注一个链接即可。\n\n<!-- more -->\n\n![DoublyLinkedList](../images/data-structures/doubly-linked-list.jpeg)\n\n## DoublyLinkedListNode 双向链表节点类\n\n```javascript\n/**\n * 双向链表节点类\n */\nclass DoublyLinkedListNode {\n  /**\n   * 构造函数\n   * @param {*} value 节点值\n   * @param {DoublyLinkedListNode} prev 前一个节点引用\n   * @param {DoublyLinkedListNode} next 后一个节点引用\n   */\n  constructor(value, prev = null, next = null) {\n    this.value = value; // 节点值\n    this.prev = prev; // 前一个节点的引用\n    this.next = next; // 后一个节点的引用\n  }\n\n  /**\n   * 返回节点的字符串表示形式\n   * @param {function} callback 转换节点值的回调函数\n   * @return {string} 节点的字符串表示形式\n   */\n  toString(callback) {\n    return callback ? callback(this.value) : `${this.value}`;\n  }\n}\n```\n\n`constructor` 构造函数用于创建一个双向链表节点对象。它接受一个值作为参数，并可选地接受前一个节点和后一个节点的引用。构造函数将该值封装为节点的值，并将前一个节点和后一个节点的引用分别存储在 prev 和 next 属性中。\n\n## DoublyLinkedList 双向链表实现类\n\n### constructor(comparatorFunction) 方法\n\n双向链表的构造函数.\n它接受一个可选的 `comparatorFunction` 参数，用于比较链表中的节点。构造函数将 `head` 和 `tail` 属性初始化为 `null`，并使用 `comparatorFunction` 创建一个 `Comparator` 对象。\n\n```javascript\n/**\n * @param {Function} [comparatorFunction]  // 接受一个可选的比较函数作为参数\n */\nconstructor(comparatorFunction) {\n  /** @var DoublyLinkedListNode */  // 使用DoublyLinkedListNode变量声明注释\n  this.head = null;  // 初始化头节点为null\n\n  /** @var DoublyLinkedListNode */  // 使用DoublyLinkedListNode变量声明注释\n  this.tail = null;  // 初始化尾节点为null\n\n  this.compare = new Comparator(comparatorFunction);  // 创建一个Comparator对象，并使用传入的比较函数进行初始化\n}\n```\n\n### prepend(value) 方法\n\n用于在链表的开头添加一个新节点.\n\n```javascript\n/**\n * @param {*} value\n * @return {DoublyLinkedList}\n */\nprepend(value) {\n  // 创建一个新节点作为新的头节点，传入的value作为节点的值，当前的头节点作为新节点的next引用\n  const newNode = new DoublyLinkedListNode(value, this.head);\n\n  // 如果链表已经有头节点，将当前头节点的previous引用指向新节点，将新节点设为新的头节点\n  if (this.head) {\n    this.head.previous = newNode;\n  }\n  this.head = newNode;\n\n  // 如果链表还没有尾节点，将新节点也设为尾节点\n  if (!this.tail) {\n    this.tail = newNode;\n  }\n\n  // 返回更新后的链表\n  return this;\n}\n```\n\n### append(value) 方法\n\n将一个具有给定值的新节点添加到链表的末尾.\n该方法首先创建一个新节点，节点的值为传入的 `value`。然后，它检查链表是否为空。如果链表为空，将新节点设置为头结点和尾节点，然后返回当前链表实例。如果链表不为空，将新节点连接到链表的末尾，即将当前尾节点的 next 属性指向新节点，同时将新节点的 previous 属性指向当前尾节点。最后，将新节点设置为链表的尾节点。\n\n```javascript\n/**\n * @param {*} value\n * @return {DoublyLinkedList}\n */\nappend(value) {\n  // 创建一个新的节点，值为传入的 value\n  const newNode = new DoublyLinkedListNode(value);\n\n  // 如果链表为空，将新节点设置为头结点和尾节点\n  if (!this.head) {\n    this.head = newNode;\n    this.tail = newNode;\n\n    return this; // 返回当前链表实例\n  }\n\n  // 将新节点连接到链表的末尾\n  this.tail.next = newNode;\n\n  // 将当前尾节点设置为新节点的前一个节点\n  newNode.previous = this.tail;\n\n  // 将新节点设置为链表的尾节点\n  this.tail = newNode;\n\n  return this; // 返回当前链表实例\n}\n```\n\n### delete(value) 方法\n\n该方法通过遍历链表来查找具有指定值的节点。如果找到了该节点，则通过调整前驱节点和后继节点的指针来删除节点。如果被删除的节点是链表的头节点或尾节点，则相应地更新头指针或尾指针。\n\n```javascript\n/**\n * @param {*} value\n * @return {DoublyLinkedListNode}\n */\ndelete(value) {\n  // 如果链表为空，直接返回null\n  if (!this.head) {\n    return null;\n  }\n\n  // 初始化被删除的节点为null，并从头节点开始遍历\n  let deletedNode = null;\n  let currentNode = this.head;\n\n  // 遍历链表\n  while (currentNode) {\n    // 如果找到了与指定值相等的节点\n    if (this.compare.equal(currentNode.value, value)) {\n      deletedNode = currentNode;\n\n      // 如果被删除的节点是头节点\n      if (deletedNode === this.head) {\n        // 设置头节点为下一个节点，成为新的头节点\n        this.head = deletedNode.next;\n\n        // 如果存在新的头节点，将其前驱指针设为null\n        if (this.head) {\n          this.head.previous = null;\n        }\n\n        // 如果被删除的节点同时是尾节点，则更新尾节点为null\n        if (deletedNode === this.tail) {\n          this.tail = null;\n        }\n      } else if (deletedNode === this.tail) {\n        // 如果被删除的节点是尾节点\n\n        // 设置尾节点为倒数第二个节点，成为新的尾节点\n        this.tail = deletedNode.previous;\n        this.tail.next = null;\n      } else {\n        // 如果被删除的节点是中间节点\n\n        // 获取被删除节点的前驱节点和后继节点\n        const previousNode = deletedNode.previous;\n        const nextNode = deletedNode.next;\n\n        // 调整前驱节点和后继节点的指针，将被删除节点从链表中删除\n        previousNode.next = nextNode;\n        nextNode.previous = previousNode;\n      }\n    }\n\n    // 继续遍历下一个节点\n    currentNode = currentNode.next;\n  }\n\n  // 返回被删除的节点\n  return deletedNode;\n}\n```\n\n### find({ value = undefined, callback = undefined }) 方法\n\n在双向链表中查找节点.\n它接收一个名为 `findParams` 的对象作为参数，该对象可以有两个属性：`value` 和 `callback`。方法通过遍历链表的节点，并检查回调函数是否对节点的值返回 `true`，或者检查节点的值是否与 `value` 属性相等（使用 `compare.equal` 方法）。如果找到匹配的节点，则返回该节点；否则返回 `null`。\n\n```javascript\n/**\n * @param {Object} findParams\n * @param {*} findParams.value\n * @param {function} [findParams.callback]\n * @return {DoublyLinkedListNode}\n */\nfind({ value = undefined, callback = undefined }) {\n  // 如果链表为空，直接返回null\n  if (!this.head) {\n    return null;\n  }\n\n  // 从头节点开始遍历链表\n  let currentNode = this.head;\n\n  // 遍历链表的每个节点\n  while (currentNode) {\n    // 如果回调函数存在且回调函数返回true，则返回当前节点\n    if (callback && callback(currentNode.value)) {\n      return currentNode;\n    }\n\n    // 如果指定了value参数且当前节点的值等于value，则返回当前节点\n    if (value !== undefined && this.compare.equal(currentNode.value, value)) {\n      return currentNode;\n    }\n\n    // 继续遍历下一个节点\n    currentNode = currentNode.next;\n  }\n\n  // 如果没有找到匹配的节点，则返回null\n  return null;\n}\n```\n\n### deleteTail() 方法\n\n删除尾节点.\n\n- 首先通过检查 `this.tail` 是否为 `null` 来判断链表是否为空。如果为空，表示没有尾部节点可以删除，所以返回 `null`。\n- 如果链表只有一个节点，即 `this.head` 等于 `this.tail`，则将要删除的尾部节点保存到 `deletedTail` 变量中。将 `this.head` 和 `this.tail` 都置为 `null`，表示链表为空。然后返回被删除的尾部节点。\n- 如果链表中有多个节点，则将要删除的尾部节点保存到 `deletedTail` 变量中。\n  - 将 `this.tail` 更新为前一个节点，即将尾部节点指向前一个节点。\n  - 将新的尾部节点的 `next` 指针置为 `null`，表示它是链表的最后一个节点。\n  - 然后返回被删除的尾部节点。\n\n```javascript\n/**\n * @return {DoublyLinkedListNode}\n */\ndeleteTail() {\n  // 检查链表是否为空\n  if (!this.tail) {\n    // 如果链表为空，没有尾部节点可以删除，返回null\n    return null;\n  }\n\n  // 如果链表中只有一个节点\n  if (this.head === this.tail) {\n    // 保存要删除的尾部节点\n    const deletedTail = this.tail;\n    // 将头部和尾部节点都置为null，表示链表为空\n    this.head = null;\n    this.tail = null;\n\n    // 返回被删除的尾部节点\n    return deletedTail;\n  }\n\n  // 如果链表中有多个节点\n  const deletedTail = this.tail;\n\n  // 将尾部节点更新为前一个节点\n  this.tail = this.tail.previous;\n  // 将新的尾部节点的next指针置为null\n  this.tail.next = null;\n\n  // 返回被删除的尾部节点\n  return deletedTail;\n}\n```\n\n### deleteHead() 方法\n\n用于删除链表的头节点。\n如果链表为空，则返回 `null`。否则，它会将头节点保存到 `deletedHead` 变量中。如果头节点有下一个节点，它会将头节点更新为下一个节点，并将新的头节点的 `previous` 指针设为 `null`，断开与之前头节点的连接。如果头节点没有下一个节点，说明链表只有一个节点，那么它会将头节点和尾节点都设为 `null`，表示链表为空。最后，它会返回被删除的头节点。\n\n```javascript\n/**\n * @return {DoublyLinkedListNode} 返回被删除的头节点\n */\ndeleteHead() {\n  // 如果链表为空，直接返回null\n  if (!this.head) {\n    return null;\n  }\n\n  // 将头节点保存到deletedHead变量中\n  const deletedHead = this.head;\n\n  // 如果头节点有下一个节点\n  if (this.head.next) {\n    // 更新头节点为下一个节点\n    this.head = this.head.next;\n    // 将新的头节点的previous指针设为null，断开与之前头节点的连接\n    this.head.previous = null;\n  } else {\n    // 如果头节点没有下一个节点，说明链表只有一个节点\n    // 将头节点和尾节点都设为null，表示链表为空\n    this.head = null;\n    this.tail = null;\n  }\n\n  // 返回被删除的头节点\n  return deletedHead;\n}\n```\n\n### toArray() 方法\n\n链表转数组的方法.\n\n```javascript\n/**\n * @return {DoublyLinkedListNode[]}\n */\ntoArray() {\n  // 创建一个空数组来存储节点\n  const nodes = [];\n\n  // 从链表头开始迭代\n  let currentNode = this.head;\n\n  // 循环遍历链表，直到当前节点为空\n  while (currentNode) {\n    // 将当前节点添加到节点数组中\n    nodes.push(currentNode);\n\n    // 移动到链表的下一个节点\n    currentNode = currentNode.next;\n  }\n\n  // 返回包含链表所有节点的数组\n  return nodes;\n}\n```\n\n### fromArray(values) 方法\n\n数组转双向链表.\n\n```javascript\n/**\n * @param {*[]} values - 需要转换为链表的值数组\n * @return {DoublyLinkedList} - 转换后的双向链表\n */\nfromArray(values) {\n  // 遍历值数组，对每个值执行 append 方法，将其添加到双向链表中\n  values.forEach((value) => this.append(value));\n\n  // 返回转换后的双向链表\n  return this;\n}\n```\n\n### toString(callback) 方法\n\n```javascript\n/**\n * @param {function} [callback] 可选参数，用于自定义每个节点的字符串表示\n * @return {string} 返回一个字符串表示，包括数组中每个节点的字符串表示\n */\ntoString(callback) {\n  // 调用 toArray 方法获取节点数组，然后使用 map 方法遍历数组中的每个节点，并调用其 toString 方法，最后使用 toString 方法将结果转换为字符串\n  return this.toArray().map((node) => node.toString(callback)).toString();\n}\n```\n\n### reverse() 方法\n\n反转一个双向链表.\n它通过交换每个节点的 `next` 和 `previous` 指针来实现链表的反转。方法开始时，将三个变量进行初始化：`currNode` 设置为链表的头部，`prevNode` 设置为 `null`，`nextNode` 设置为 `null`。然后，进入一个循环，遍历链表中的每个节点。在循环内部，交换当前节点的 `next` 和 `previous` 指针，并更新 `prevNode` 和 `currNode` 变量。循环结束后，更新链表的 `head` 和 `tail` 指针以反映反转后的顺序，并返回修改后的链表。\n\n```javascript\n/**\n * 反转一个双向链表。\n * @returns {DoublyLinkedList}\n */\nreverse() {\n  // 初始化当前节点为链表头部\n  let currNode = this.head;\n  // 初始化前一个节点为null\n  let prevNode = null;\n  // 初始化下一个节点为null\n  let nextNode = null;\n\n  // 遍历链表中的每个节点\n  while (currNode) {\n    // 保存下一个节点的引用\n    nextNode = currNode.next;\n    // 保存前一个节点的引用\n    prevNode = currNode.previous;\n\n    // 将当前节点的next指针指向前一个节点\n    currNode.next = prevNode;\n    // 将当前节点的previous指针指向下一个节点\n    currNode.previous = nextNode;\n\n    // 将prevNode和currNode节点向前移动一步\n    prevNode = currNode;\n    currNode = nextNode;\n  }\n\n  // 重新设置头部和尾部节点\n  this.tail = this.head;\n  this.head = prevNode;\n\n  // 返回修改后的链表\n  return this;\n}\n```\n\n---\n\n- 源码地址: [JavaScript Algorithms and Data Structures](https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/doubly-linked-list/DoublyLinkedList.js)\n","source":"_posts/data-structures-003-DoublyLinkedList.md","raw":"---\ntitle: JavaScript Algorithms and Data Structures 源码分析(3) -- 双向链表DoublyLinkedList\ndate: 2023-10-31 14:29:40\ntags:\n  - data structures\ncategories:\n  - 数据结构与算法\n---\n\n## 双向链表\n\n在计算机科学中, 一个 **双向链表(doubly linked list)** 是由一组称为节点的顺序链接记录组成的链接数据结构。每个节点包含两个字段，称为链接，它们是对节点序列中上一个节点和下一个节点的引用。开始节点和结束节点的上一个链接和下一个链接分别指向某种终止节点，通常是前哨节点或 null，以方便遍历列表。如果只有一个前哨节点，则列表通过前哨节点循环链接。它可以被概念化为两个由相同数据项组成的单链表，但顺序相反。\n\n两个节点链接允许在任一方向上遍历列表。\n\n在双向链表中进行添加或者删除节点时,需做的链接更改要比单向链表复杂得多。这种操作在单向链表中更简单高效,因为不需要关注一个节点（除第一个和最后一个节点以外的节点）的两个链接,而只需要关注一个链接即可。\n\n<!-- more -->\n\n![DoublyLinkedList](../images/data-structures/doubly-linked-list.jpeg)\n\n## DoublyLinkedListNode 双向链表节点类\n\n```javascript\n/**\n * 双向链表节点类\n */\nclass DoublyLinkedListNode {\n  /**\n   * 构造函数\n   * @param {*} value 节点值\n   * @param {DoublyLinkedListNode} prev 前一个节点引用\n   * @param {DoublyLinkedListNode} next 后一个节点引用\n   */\n  constructor(value, prev = null, next = null) {\n    this.value = value; // 节点值\n    this.prev = prev; // 前一个节点的引用\n    this.next = next; // 后一个节点的引用\n  }\n\n  /**\n   * 返回节点的字符串表示形式\n   * @param {function} callback 转换节点值的回调函数\n   * @return {string} 节点的字符串表示形式\n   */\n  toString(callback) {\n    return callback ? callback(this.value) : `${this.value}`;\n  }\n}\n```\n\n`constructor` 构造函数用于创建一个双向链表节点对象。它接受一个值作为参数，并可选地接受前一个节点和后一个节点的引用。构造函数将该值封装为节点的值，并将前一个节点和后一个节点的引用分别存储在 prev 和 next 属性中。\n\n## DoublyLinkedList 双向链表实现类\n\n### constructor(comparatorFunction) 方法\n\n双向链表的构造函数.\n它接受一个可选的 `comparatorFunction` 参数，用于比较链表中的节点。构造函数将 `head` 和 `tail` 属性初始化为 `null`，并使用 `comparatorFunction` 创建一个 `Comparator` 对象。\n\n```javascript\n/**\n * @param {Function} [comparatorFunction]  // 接受一个可选的比较函数作为参数\n */\nconstructor(comparatorFunction) {\n  /** @var DoublyLinkedListNode */  // 使用DoublyLinkedListNode变量声明注释\n  this.head = null;  // 初始化头节点为null\n\n  /** @var DoublyLinkedListNode */  // 使用DoublyLinkedListNode变量声明注释\n  this.tail = null;  // 初始化尾节点为null\n\n  this.compare = new Comparator(comparatorFunction);  // 创建一个Comparator对象，并使用传入的比较函数进行初始化\n}\n```\n\n### prepend(value) 方法\n\n用于在链表的开头添加一个新节点.\n\n```javascript\n/**\n * @param {*} value\n * @return {DoublyLinkedList}\n */\nprepend(value) {\n  // 创建一个新节点作为新的头节点，传入的value作为节点的值，当前的头节点作为新节点的next引用\n  const newNode = new DoublyLinkedListNode(value, this.head);\n\n  // 如果链表已经有头节点，将当前头节点的previous引用指向新节点，将新节点设为新的头节点\n  if (this.head) {\n    this.head.previous = newNode;\n  }\n  this.head = newNode;\n\n  // 如果链表还没有尾节点，将新节点也设为尾节点\n  if (!this.tail) {\n    this.tail = newNode;\n  }\n\n  // 返回更新后的链表\n  return this;\n}\n```\n\n### append(value) 方法\n\n将一个具有给定值的新节点添加到链表的末尾.\n该方法首先创建一个新节点，节点的值为传入的 `value`。然后，它检查链表是否为空。如果链表为空，将新节点设置为头结点和尾节点，然后返回当前链表实例。如果链表不为空，将新节点连接到链表的末尾，即将当前尾节点的 next 属性指向新节点，同时将新节点的 previous 属性指向当前尾节点。最后，将新节点设置为链表的尾节点。\n\n```javascript\n/**\n * @param {*} value\n * @return {DoublyLinkedList}\n */\nappend(value) {\n  // 创建一个新的节点，值为传入的 value\n  const newNode = new DoublyLinkedListNode(value);\n\n  // 如果链表为空，将新节点设置为头结点和尾节点\n  if (!this.head) {\n    this.head = newNode;\n    this.tail = newNode;\n\n    return this; // 返回当前链表实例\n  }\n\n  // 将新节点连接到链表的末尾\n  this.tail.next = newNode;\n\n  // 将当前尾节点设置为新节点的前一个节点\n  newNode.previous = this.tail;\n\n  // 将新节点设置为链表的尾节点\n  this.tail = newNode;\n\n  return this; // 返回当前链表实例\n}\n```\n\n### delete(value) 方法\n\n该方法通过遍历链表来查找具有指定值的节点。如果找到了该节点，则通过调整前驱节点和后继节点的指针来删除节点。如果被删除的节点是链表的头节点或尾节点，则相应地更新头指针或尾指针。\n\n```javascript\n/**\n * @param {*} value\n * @return {DoublyLinkedListNode}\n */\ndelete(value) {\n  // 如果链表为空，直接返回null\n  if (!this.head) {\n    return null;\n  }\n\n  // 初始化被删除的节点为null，并从头节点开始遍历\n  let deletedNode = null;\n  let currentNode = this.head;\n\n  // 遍历链表\n  while (currentNode) {\n    // 如果找到了与指定值相等的节点\n    if (this.compare.equal(currentNode.value, value)) {\n      deletedNode = currentNode;\n\n      // 如果被删除的节点是头节点\n      if (deletedNode === this.head) {\n        // 设置头节点为下一个节点，成为新的头节点\n        this.head = deletedNode.next;\n\n        // 如果存在新的头节点，将其前驱指针设为null\n        if (this.head) {\n          this.head.previous = null;\n        }\n\n        // 如果被删除的节点同时是尾节点，则更新尾节点为null\n        if (deletedNode === this.tail) {\n          this.tail = null;\n        }\n      } else if (deletedNode === this.tail) {\n        // 如果被删除的节点是尾节点\n\n        // 设置尾节点为倒数第二个节点，成为新的尾节点\n        this.tail = deletedNode.previous;\n        this.tail.next = null;\n      } else {\n        // 如果被删除的节点是中间节点\n\n        // 获取被删除节点的前驱节点和后继节点\n        const previousNode = deletedNode.previous;\n        const nextNode = deletedNode.next;\n\n        // 调整前驱节点和后继节点的指针，将被删除节点从链表中删除\n        previousNode.next = nextNode;\n        nextNode.previous = previousNode;\n      }\n    }\n\n    // 继续遍历下一个节点\n    currentNode = currentNode.next;\n  }\n\n  // 返回被删除的节点\n  return deletedNode;\n}\n```\n\n### find({ value = undefined, callback = undefined }) 方法\n\n在双向链表中查找节点.\n它接收一个名为 `findParams` 的对象作为参数，该对象可以有两个属性：`value` 和 `callback`。方法通过遍历链表的节点，并检查回调函数是否对节点的值返回 `true`，或者检查节点的值是否与 `value` 属性相等（使用 `compare.equal` 方法）。如果找到匹配的节点，则返回该节点；否则返回 `null`。\n\n```javascript\n/**\n * @param {Object} findParams\n * @param {*} findParams.value\n * @param {function} [findParams.callback]\n * @return {DoublyLinkedListNode}\n */\nfind({ value = undefined, callback = undefined }) {\n  // 如果链表为空，直接返回null\n  if (!this.head) {\n    return null;\n  }\n\n  // 从头节点开始遍历链表\n  let currentNode = this.head;\n\n  // 遍历链表的每个节点\n  while (currentNode) {\n    // 如果回调函数存在且回调函数返回true，则返回当前节点\n    if (callback && callback(currentNode.value)) {\n      return currentNode;\n    }\n\n    // 如果指定了value参数且当前节点的值等于value，则返回当前节点\n    if (value !== undefined && this.compare.equal(currentNode.value, value)) {\n      return currentNode;\n    }\n\n    // 继续遍历下一个节点\n    currentNode = currentNode.next;\n  }\n\n  // 如果没有找到匹配的节点，则返回null\n  return null;\n}\n```\n\n### deleteTail() 方法\n\n删除尾节点.\n\n- 首先通过检查 `this.tail` 是否为 `null` 来判断链表是否为空。如果为空，表示没有尾部节点可以删除，所以返回 `null`。\n- 如果链表只有一个节点，即 `this.head` 等于 `this.tail`，则将要删除的尾部节点保存到 `deletedTail` 变量中。将 `this.head` 和 `this.tail` 都置为 `null`，表示链表为空。然后返回被删除的尾部节点。\n- 如果链表中有多个节点，则将要删除的尾部节点保存到 `deletedTail` 变量中。\n  - 将 `this.tail` 更新为前一个节点，即将尾部节点指向前一个节点。\n  - 将新的尾部节点的 `next` 指针置为 `null`，表示它是链表的最后一个节点。\n  - 然后返回被删除的尾部节点。\n\n```javascript\n/**\n * @return {DoublyLinkedListNode}\n */\ndeleteTail() {\n  // 检查链表是否为空\n  if (!this.tail) {\n    // 如果链表为空，没有尾部节点可以删除，返回null\n    return null;\n  }\n\n  // 如果链表中只有一个节点\n  if (this.head === this.tail) {\n    // 保存要删除的尾部节点\n    const deletedTail = this.tail;\n    // 将头部和尾部节点都置为null，表示链表为空\n    this.head = null;\n    this.tail = null;\n\n    // 返回被删除的尾部节点\n    return deletedTail;\n  }\n\n  // 如果链表中有多个节点\n  const deletedTail = this.tail;\n\n  // 将尾部节点更新为前一个节点\n  this.tail = this.tail.previous;\n  // 将新的尾部节点的next指针置为null\n  this.tail.next = null;\n\n  // 返回被删除的尾部节点\n  return deletedTail;\n}\n```\n\n### deleteHead() 方法\n\n用于删除链表的头节点。\n如果链表为空，则返回 `null`。否则，它会将头节点保存到 `deletedHead` 变量中。如果头节点有下一个节点，它会将头节点更新为下一个节点，并将新的头节点的 `previous` 指针设为 `null`，断开与之前头节点的连接。如果头节点没有下一个节点，说明链表只有一个节点，那么它会将头节点和尾节点都设为 `null`，表示链表为空。最后，它会返回被删除的头节点。\n\n```javascript\n/**\n * @return {DoublyLinkedListNode} 返回被删除的头节点\n */\ndeleteHead() {\n  // 如果链表为空，直接返回null\n  if (!this.head) {\n    return null;\n  }\n\n  // 将头节点保存到deletedHead变量中\n  const deletedHead = this.head;\n\n  // 如果头节点有下一个节点\n  if (this.head.next) {\n    // 更新头节点为下一个节点\n    this.head = this.head.next;\n    // 将新的头节点的previous指针设为null，断开与之前头节点的连接\n    this.head.previous = null;\n  } else {\n    // 如果头节点没有下一个节点，说明链表只有一个节点\n    // 将头节点和尾节点都设为null，表示链表为空\n    this.head = null;\n    this.tail = null;\n  }\n\n  // 返回被删除的头节点\n  return deletedHead;\n}\n```\n\n### toArray() 方法\n\n链表转数组的方法.\n\n```javascript\n/**\n * @return {DoublyLinkedListNode[]}\n */\ntoArray() {\n  // 创建一个空数组来存储节点\n  const nodes = [];\n\n  // 从链表头开始迭代\n  let currentNode = this.head;\n\n  // 循环遍历链表，直到当前节点为空\n  while (currentNode) {\n    // 将当前节点添加到节点数组中\n    nodes.push(currentNode);\n\n    // 移动到链表的下一个节点\n    currentNode = currentNode.next;\n  }\n\n  // 返回包含链表所有节点的数组\n  return nodes;\n}\n```\n\n### fromArray(values) 方法\n\n数组转双向链表.\n\n```javascript\n/**\n * @param {*[]} values - 需要转换为链表的值数组\n * @return {DoublyLinkedList} - 转换后的双向链表\n */\nfromArray(values) {\n  // 遍历值数组，对每个值执行 append 方法，将其添加到双向链表中\n  values.forEach((value) => this.append(value));\n\n  // 返回转换后的双向链表\n  return this;\n}\n```\n\n### toString(callback) 方法\n\n```javascript\n/**\n * @param {function} [callback] 可选参数，用于自定义每个节点的字符串表示\n * @return {string} 返回一个字符串表示，包括数组中每个节点的字符串表示\n */\ntoString(callback) {\n  // 调用 toArray 方法获取节点数组，然后使用 map 方法遍历数组中的每个节点，并调用其 toString 方法，最后使用 toString 方法将结果转换为字符串\n  return this.toArray().map((node) => node.toString(callback)).toString();\n}\n```\n\n### reverse() 方法\n\n反转一个双向链表.\n它通过交换每个节点的 `next` 和 `previous` 指针来实现链表的反转。方法开始时，将三个变量进行初始化：`currNode` 设置为链表的头部，`prevNode` 设置为 `null`，`nextNode` 设置为 `null`。然后，进入一个循环，遍历链表中的每个节点。在循环内部，交换当前节点的 `next` 和 `previous` 指针，并更新 `prevNode` 和 `currNode` 变量。循环结束后，更新链表的 `head` 和 `tail` 指针以反映反转后的顺序，并返回修改后的链表。\n\n```javascript\n/**\n * 反转一个双向链表。\n * @returns {DoublyLinkedList}\n */\nreverse() {\n  // 初始化当前节点为链表头部\n  let currNode = this.head;\n  // 初始化前一个节点为null\n  let prevNode = null;\n  // 初始化下一个节点为null\n  let nextNode = null;\n\n  // 遍历链表中的每个节点\n  while (currNode) {\n    // 保存下一个节点的引用\n    nextNode = currNode.next;\n    // 保存前一个节点的引用\n    prevNode = currNode.previous;\n\n    // 将当前节点的next指针指向前一个节点\n    currNode.next = prevNode;\n    // 将当前节点的previous指针指向下一个节点\n    currNode.previous = nextNode;\n\n    // 将prevNode和currNode节点向前移动一步\n    prevNode = currNode;\n    currNode = nextNode;\n  }\n\n  // 重新设置头部和尾部节点\n  this.tail = this.head;\n  this.head = prevNode;\n\n  // 返回修改后的链表\n  return this;\n}\n```\n\n---\n\n- 源码地址: [JavaScript Algorithms and Data Structures](https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/doubly-linked-list/DoublyLinkedList.js)\n","slug":"data-structures-003-DoublyLinkedList","published":1,"updated":"2023-11-02T05:32:13.561Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clq4xe1d50009tz2hb5s938j5","content":"<h2 id=\"双向链表\"><a href=\"#双向链表\" class=\"headerlink\" title=\"双向链表\"></a>双向链表</h2><p>在计算机科学中, 一个 <strong>双向链表(doubly linked list)</strong> 是由一组称为节点的顺序链接记录组成的链接数据结构。每个节点包含两个字段，称为链接，它们是对节点序列中上一个节点和下一个节点的引用。开始节点和结束节点的上一个链接和下一个链接分别指向某种终止节点，通常是前哨节点或 null，以方便遍历列表。如果只有一个前哨节点，则列表通过前哨节点循环链接。它可以被概念化为两个由相同数据项组成的单链表，但顺序相反。</p>\n<p>两个节点链接允许在任一方向上遍历列表。</p>\n<p>在双向链表中进行添加或者删除节点时,需做的链接更改要比单向链表复杂得多。这种操作在单向链表中更简单高效,因为不需要关注一个节点（除第一个和最后一个节点以外的节点）的两个链接,而只需要关注一个链接即可。</p>\n<span id=\"more\"></span>\n\n<p><img src=\"/../images/data-structures/doubly-linked-list.jpeg\" alt=\"DoublyLinkedList\"></p>\n<h2 id=\"DoublyLinkedListNode-双向链表节点类\"><a href=\"#DoublyLinkedListNode-双向链表节点类\" class=\"headerlink\" title=\"DoublyLinkedListNode 双向链表节点类\"></a>DoublyLinkedListNode 双向链表节点类</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 双向链表节点类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DoublyLinkedListNode</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 构造函数</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; value 节点值</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">DoublyLinkedListNode</span>&#125; prev 前一个节点引用</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">DoublyLinkedListNode</span>&#125; next 后一个节点引用</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">value, prev = <span class=\"literal\">null</span>, next = <span class=\"literal\">null</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value; <span class=\"comment\">// 节点值</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">prev</span> = prev; <span class=\"comment\">// 前一个节点的引用</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">next</span> = next; <span class=\"comment\">// 后一个节点的引用</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 返回节点的字符串表示形式</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">function</span>&#125; callback 转换节点值的回调函数</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string</span>&#125; 节点的字符串表示形式</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">toString</span>(<span class=\"params\">callback</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> callback ? <span class=\"title function_\">callback</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>) : <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.value&#125;</span>`</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>constructor</code> 构造函数用于创建一个双向链表节点对象。它接受一个值作为参数，并可选地接受前一个节点和后一个节点的引用。构造函数将该值封装为节点的值，并将前一个节点和后一个节点的引用分别存储在 prev 和 next 属性中。</p>\n<h2 id=\"DoublyLinkedList-双向链表实现类\"><a href=\"#DoublyLinkedList-双向链表实现类\" class=\"headerlink\" title=\"DoublyLinkedList 双向链表实现类\"></a>DoublyLinkedList 双向链表实现类</h2><h3 id=\"constructor-comparatorFunction-方法\"><a href=\"#constructor-comparatorFunction-方法\" class=\"headerlink\" title=\"constructor(comparatorFunction) 方法\"></a>constructor(comparatorFunction) 方法</h3><p>双向链表的构造函数.<br>它接受一个可选的 <code>comparatorFunction</code> 参数，用于比较链表中的节点。构造函数将 <code>head</code> 和 <code>tail</code> 属性初始化为 <code>null</code>，并使用 <code>comparatorFunction</code> 创建一个 <code>Comparator</code> 对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; [comparatorFunction]  // 接受一个可选的比较函数作为参数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\">comparatorFunction</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/** <span class=\"doctag\">@var</span> DoublyLinkedListNode */</span>  <span class=\"comment\">// 使用DoublyLinkedListNode变量声明注释</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = <span class=\"literal\">null</span>;  <span class=\"comment\">// 初始化头节点为null</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** <span class=\"doctag\">@var</span> DoublyLinkedListNode */</span>  <span class=\"comment\">// 使用DoublyLinkedListNode变量声明注释</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span> = <span class=\"literal\">null</span>;  <span class=\"comment\">// 初始化尾节点为null</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">compare</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>(comparatorFunction);  <span class=\"comment\">// 创建一个Comparator对象，并使用传入的比较函数进行初始化</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"prepend-value-方法\"><a href=\"#prepend-value-方法\" class=\"headerlink\" title=\"prepend(value) 方法\"></a>prepend(value) 方法</h3><p>用于在链表的开头添加一个新节点.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">value</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">DoublyLinkedList</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">prepend</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建一个新节点作为新的头节点，传入的value作为节点的值，当前的头节点作为新节点的next引用</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> newNode = <span class=\"keyword\">new</span> <span class=\"title class_\">DoublyLinkedListNode</span>(value, <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果链表已经有头节点，将当前头节点的previous引用指向新节点，将新节点设为新的头节点</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">head</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>.<span class=\"property\">previous</span> = newNode;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = newNode;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果链表还没有尾节点，将新节点也设为尾节点</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">tail</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span> = newNode;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回更新后的链表</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"append-value-方法\"><a href=\"#append-value-方法\" class=\"headerlink\" title=\"append(value) 方法\"></a>append(value) 方法</h3><p>将一个具有给定值的新节点添加到链表的末尾.<br>该方法首先创建一个新节点，节点的值为传入的 <code>value</code>。然后，它检查链表是否为空。如果链表为空，将新节点设置为头结点和尾节点，然后返回当前链表实例。如果链表不为空，将新节点连接到链表的末尾，即将当前尾节点的 next 属性指向新节点，同时将新节点的 previous 属性指向当前尾节点。最后，将新节点设置为链表的尾节点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">value</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">DoublyLinkedList</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">append</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建一个新的节点，值为传入的 value</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> newNode = <span class=\"keyword\">new</span> <span class=\"title class_\">DoublyLinkedListNode</span>(value);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果链表为空，将新节点设置为头结点和尾节点</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">head</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = newNode;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span> = newNode;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>; <span class=\"comment\">// 返回当前链表实例</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将新节点连接到链表的末尾</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span>.<span class=\"property\">next</span> = newNode;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将当前尾节点设置为新节点的前一个节点</span></span><br><span class=\"line\">  newNode.<span class=\"property\">previous</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将新节点设置为链表的尾节点</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span> = newNode;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>; <span class=\"comment\">// 返回当前链表实例</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"delete-value-方法\"><a href=\"#delete-value-方法\" class=\"headerlink\" title=\"delete(value) 方法\"></a>delete(value) 方法</h3><p>该方法通过遍历链表来查找具有指定值的节点。如果找到了该节点，则通过调整前驱节点和后继节点的指针来删除节点。如果被删除的节点是链表的头节点或尾节点，则相应地更新头指针或尾指针。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">value</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">DoublyLinkedListNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">delete</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果链表为空，直接返回null</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">head</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化被删除的节点为null，并从头节点开始遍历</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> deletedNode = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentNode = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 遍历链表</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (currentNode) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果找到了与指定值相等的节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">compare</span>.<span class=\"title function_\">equal</span>(currentNode.<span class=\"property\">value</span>, value)) &#123;</span><br><span class=\"line\">      deletedNode = currentNode;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 如果被删除的节点是头节点</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (deletedNode === <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 设置头节点为下一个节点，成为新的头节点</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = deletedNode.<span class=\"property\">next</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果存在新的头节点，将其前驱指针设为null</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">head</span>) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>.<span class=\"property\">previous</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果被删除的节点同时是尾节点，则更新尾节点为null</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (deletedNode === <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span>) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (deletedNode === <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果被删除的节点是尾节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 设置尾节点为倒数第二个节点，成为新的尾节点</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span> = deletedNode.<span class=\"property\">previous</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span>.<span class=\"property\">next</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果被删除的节点是中间节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取被删除节点的前驱节点和后继节点</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> previousNode = deletedNode.<span class=\"property\">previous</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> nextNode = deletedNode.<span class=\"property\">next</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 调整前驱节点和后继节点的指针，将被删除节点从链表中删除</span></span><br><span class=\"line\">        previousNode.<span class=\"property\">next</span> = nextNode;</span><br><span class=\"line\">        nextNode.<span class=\"property\">previous</span> = previousNode;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 继续遍历下一个节点</span></span><br><span class=\"line\">    currentNode = currentNode.<span class=\"property\">next</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回被删除的节点</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> deletedNode;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"find-value-undefined-callback-undefined-方法\"><a href=\"#find-value-undefined-callback-undefined-方法\" class=\"headerlink\" title=\"find({ value &#x3D; undefined, callback &#x3D; undefined }) 方法\"></a>find({ value &#x3D; undefined, callback &#x3D; undefined }) 方法</h3><p>在双向链表中查找节点.<br>它接收一个名为 <code>findParams</code> 的对象作为参数，该对象可以有两个属性：<code>value</code> 和 <code>callback</code>。方法通过遍历链表的节点，并检查回调函数是否对节点的值返回 <code>true</code>，或者检查节点的值是否与 <code>value</code> 属性相等（使用 <code>compare.equal</code> 方法）。如果找到匹配的节点，则返回该节点；否则返回 <code>null</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Object</span>&#125; <span class=\"variable\">findParams</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; findParams.value</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">function</span>&#125; [findParams.callback]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">DoublyLinkedListNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">find</span>(<span class=\"params\">&#123; value = <span class=\"literal\">undefined</span>, callback = <span class=\"literal\">undefined</span> &#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果链表为空，直接返回null</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">head</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 从头节点开始遍历链表</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentNode = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 遍历链表的每个节点</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (currentNode) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果回调函数存在且回调函数返回true，则返回当前节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (callback &amp;&amp; <span class=\"title function_\">callback</span>(currentNode.<span class=\"property\">value</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> currentNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果指定了value参数且当前节点的值等于value，则返回当前节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value !== <span class=\"literal\">undefined</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">compare</span>.<span class=\"title function_\">equal</span>(currentNode.<span class=\"property\">value</span>, value)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> currentNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 继续遍历下一个节点</span></span><br><span class=\"line\">    currentNode = currentNode.<span class=\"property\">next</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果没有找到匹配的节点，则返回null</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"deleteTail-方法\"><a href=\"#deleteTail-方法\" class=\"headerlink\" title=\"deleteTail() 方法\"></a>deleteTail() 方法</h3><p>删除尾节点.</p>\n<ul>\n<li>首先通过检查 <code>this.tail</code> 是否为 <code>null</code> 来判断链表是否为空。如果为空，表示没有尾部节点可以删除，所以返回 <code>null</code>。</li>\n<li>如果链表只有一个节点，即 <code>this.head</code> 等于 <code>this.tail</code>，则将要删除的尾部节点保存到 <code>deletedTail</code> 变量中。将 <code>this.head</code> 和 <code>this.tail</code> 都置为 <code>null</code>，表示链表为空。然后返回被删除的尾部节点。</li>\n<li>如果链表中有多个节点，则将要删除的尾部节点保存到 <code>deletedTail</code> 变量中。<ul>\n<li>将 <code>this.tail</code> 更新为前一个节点，即将尾部节点指向前一个节点。</li>\n<li>将新的尾部节点的 <code>next</code> 指针置为 <code>null</code>，表示它是链表的最后一个节点。</li>\n<li>然后返回被删除的尾部节点。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">DoublyLinkedListNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">deleteTail</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 检查链表是否为空</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">tail</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果链表为空，没有尾部节点可以删除，返回null</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果链表中只有一个节点</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">head</span> === <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 保存要删除的尾部节点</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> deletedTail = <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 将头部和尾部节点都置为null，表示链表为空</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回被删除的尾部节点</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> deletedTail;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果链表中有多个节点</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> deletedTail = <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将尾部节点更新为前一个节点</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span>.<span class=\"property\">previous</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 将新的尾部节点的next指针置为null</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span>.<span class=\"property\">next</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回被删除的尾部节点</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> deletedTail;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"deleteHead-方法\"><a href=\"#deleteHead-方法\" class=\"headerlink\" title=\"deleteHead() 方法\"></a>deleteHead() 方法</h3><p>用于删除链表的头节点。<br>如果链表为空，则返回 <code>null</code>。否则，它会将头节点保存到 <code>deletedHead</code> 变量中。如果头节点有下一个节点，它会将头节点更新为下一个节点，并将新的头节点的 <code>previous</code> 指针设为 <code>null</code>，断开与之前头节点的连接。如果头节点没有下一个节点，说明链表只有一个节点，那么它会将头节点和尾节点都设为 <code>null</code>，表示链表为空。最后，它会返回被删除的头节点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">DoublyLinkedListNode</span>&#125; 返回被删除的头节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">deleteHead</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果链表为空，直接返回null</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">head</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将头节点保存到deletedHead变量中</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> deletedHead = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果头节点有下一个节点</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">head</span>.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 更新头节点为下一个节点</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>.<span class=\"property\">next</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 将新的头节点的previous指针设为null，断开与之前头节点的连接</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>.<span class=\"property\">previous</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果头节点没有下一个节点，说明链表只有一个节点</span></span><br><span class=\"line\">    <span class=\"comment\">// 将头节点和尾节点都设为null，表示链表为空</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回被删除的头节点</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> deletedHead;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"toArray-方法\"><a href=\"#toArray-方法\" class=\"headerlink\" title=\"toArray() 方法\"></a>toArray() 方法</h3><p>链表转数组的方法.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">DoublyLinkedListNode[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">toArray</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建一个空数组来存储节点</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> nodes = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 从链表头开始迭代</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentNode = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 循环遍历链表，直到当前节点为空</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (currentNode) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将当前节点添加到节点数组中</span></span><br><span class=\"line\">    nodes.<span class=\"title function_\">push</span>(currentNode);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 移动到链表的下一个节点</span></span><br><span class=\"line\">    currentNode = currentNode.<span class=\"property\">next</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回包含链表所有节点的数组</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> nodes;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"fromArray-values-方法\"><a href=\"#fromArray-values-方法\" class=\"headerlink\" title=\"fromArray(values) 方法\"></a>fromArray(values) 方法</h3><p>数组转双向链表.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*[]</span>&#125; <span class=\"variable\">values</span> - 需要转换为链表的值数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">DoublyLinkedList</span>&#125; - 转换后的双向链表</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">fromArray</span>(<span class=\"params\">values</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 遍历值数组，对每个值执行 append 方法，将其添加到双向链表中</span></span><br><span class=\"line\">  values.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">append</span>(value));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回转换后的双向链表</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"toString-callback-方法\"><a href=\"#toString-callback-方法\" class=\"headerlink\" title=\"toString(callback) 方法\"></a>toString(callback) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">function</span>&#125; [callback] 可选参数，用于自定义每个节点的字符串表示</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string</span>&#125; 返回一个字符串表示，包括数组中每个节点的字符串表示</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">toString</span>(<span class=\"params\">callback</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 调用 toArray 方法获取节点数组，然后使用 map 方法遍历数组中的每个节点，并调用其 toString 方法，最后使用 toString 方法将结果转换为字符串</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">toArray</span>().<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">node</span>) =&gt;</span> node.<span class=\"title function_\">toString</span>(callback)).<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"reverse-方法\"><a href=\"#reverse-方法\" class=\"headerlink\" title=\"reverse() 方法\"></a>reverse() 方法</h3><p>反转一个双向链表.<br>它通过交换每个节点的 <code>next</code> 和 <code>previous</code> 指针来实现链表的反转。方法开始时，将三个变量进行初始化：<code>currNode</code> 设置为链表的头部，<code>prevNode</code> 设置为 <code>null</code>，<code>nextNode</code> 设置为 <code>null</code>。然后，进入一个循环，遍历链表中的每个节点。在循环内部，交换当前节点的 <code>next</code> 和 <code>previous</code> 指针，并更新 <code>prevNode</code> 和 <code>currNode</code> 变量。循环结束后，更新链表的 <code>head</code> 和 <code>tail</code> 指针以反映反转后的顺序，并返回修改后的链表。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 反转一个双向链表。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">DoublyLinkedList</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">reverse</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化当前节点为链表头部</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> currNode = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化前一个节点为null</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> prevNode = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化下一个节点为null</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> nextNode = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 遍历链表中的每个节点</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (currNode) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 保存下一个节点的引用</span></span><br><span class=\"line\">    nextNode = currNode.<span class=\"property\">next</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 保存前一个节点的引用</span></span><br><span class=\"line\">    prevNode = currNode.<span class=\"property\">previous</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将当前节点的next指针指向前一个节点</span></span><br><span class=\"line\">    currNode.<span class=\"property\">next</span> = prevNode;</span><br><span class=\"line\">    <span class=\"comment\">// 将当前节点的previous指针指向下一个节点</span></span><br><span class=\"line\">    currNode.<span class=\"property\">previous</span> = nextNode;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将prevNode和currNode节点向前移动一步</span></span><br><span class=\"line\">    prevNode = currNode;</span><br><span class=\"line\">    currNode = nextNode;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 重新设置头部和尾部节点</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = prevNode;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回修改后的链表</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>源码地址: <a href=\"https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/doubly-linked-list/DoublyLinkedList.js\">JavaScript Algorithms and Data Structures</a></li>\n</ul>\n","site":{"data":{}},"related_posts":[],"length":2963,"excerpt":"<h2 id=\"双向链表\"><a href=\"#双向链表\" class=\"headerlink\" title=\"双向链表\"></a>双向链表</h2><p>在计算机科学中, 一个 <strong>双向链表(doubly linked list)</strong> 是由一组称为节点的顺序链接记录组成的链接数据结构。每个节点包含两个字段，称为链接，它们是对节点序列中上一个节点和下一个节点的引用。开始节点和结束节点的上一个链接和下一个链接分别指向某种终止节点，通常是前哨节点或 null，以方便遍历列表。如果只有一个前哨节点，则列表通过前哨节点循环链接。它可以被概念化为两个由相同数据项组成的单链表，但顺序相反。</p>\n<p>两个节点链接允许在任一方向上遍历列表。</p>\n<p>在双向链表中进行添加或者删除节点时,需做的链接更改要比单向链表复杂得多。这种操作在单向链表中更简单高效,因为不需要关注一个节点（除第一个和最后一个节点以外的节点）的两个链接,而只需要关注一个链接即可。</p>","more":"<p><img src=\"/../images/data-structures/doubly-linked-list.jpeg\" alt=\"DoublyLinkedList\"></p>\n<h2 id=\"DoublyLinkedListNode-双向链表节点类\"><a href=\"#DoublyLinkedListNode-双向链表节点类\" class=\"headerlink\" title=\"DoublyLinkedListNode 双向链表节点类\"></a>DoublyLinkedListNode 双向链表节点类</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 双向链表节点类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DoublyLinkedListNode</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 构造函数</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; value 节点值</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">DoublyLinkedListNode</span>&#125; prev 前一个节点引用</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">DoublyLinkedListNode</span>&#125; next 后一个节点引用</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">value, prev = <span class=\"literal\">null</span>, next = <span class=\"literal\">null</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value; <span class=\"comment\">// 节点值</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">prev</span> = prev; <span class=\"comment\">// 前一个节点的引用</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">next</span> = next; <span class=\"comment\">// 后一个节点的引用</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 返回节点的字符串表示形式</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">function</span>&#125; callback 转换节点值的回调函数</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string</span>&#125; 节点的字符串表示形式</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">toString</span>(<span class=\"params\">callback</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> callback ? <span class=\"title function_\">callback</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>) : <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.value&#125;</span>`</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>constructor</code> 构造函数用于创建一个双向链表节点对象。它接受一个值作为参数，并可选地接受前一个节点和后一个节点的引用。构造函数将该值封装为节点的值，并将前一个节点和后一个节点的引用分别存储在 prev 和 next 属性中。</p>\n<h2 id=\"DoublyLinkedList-双向链表实现类\"><a href=\"#DoublyLinkedList-双向链表实现类\" class=\"headerlink\" title=\"DoublyLinkedList 双向链表实现类\"></a>DoublyLinkedList 双向链表实现类</h2><h3 id=\"constructor-comparatorFunction-方法\"><a href=\"#constructor-comparatorFunction-方法\" class=\"headerlink\" title=\"constructor(comparatorFunction) 方法\"></a>constructor(comparatorFunction) 方法</h3><p>双向链表的构造函数.<br>它接受一个可选的 <code>comparatorFunction</code> 参数，用于比较链表中的节点。构造函数将 <code>head</code> 和 <code>tail</code> 属性初始化为 <code>null</code>，并使用 <code>comparatorFunction</code> 创建一个 <code>Comparator</code> 对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; [comparatorFunction]  // 接受一个可选的比较函数作为参数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\">comparatorFunction</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/** <span class=\"doctag\">@var</span> DoublyLinkedListNode */</span>  <span class=\"comment\">// 使用DoublyLinkedListNode变量声明注释</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = <span class=\"literal\">null</span>;  <span class=\"comment\">// 初始化头节点为null</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** <span class=\"doctag\">@var</span> DoublyLinkedListNode */</span>  <span class=\"comment\">// 使用DoublyLinkedListNode变量声明注释</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span> = <span class=\"literal\">null</span>;  <span class=\"comment\">// 初始化尾节点为null</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">compare</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>(comparatorFunction);  <span class=\"comment\">// 创建一个Comparator对象，并使用传入的比较函数进行初始化</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"prepend-value-方法\"><a href=\"#prepend-value-方法\" class=\"headerlink\" title=\"prepend(value) 方法\"></a>prepend(value) 方法</h3><p>用于在链表的开头添加一个新节点.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">value</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">DoublyLinkedList</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">prepend</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建一个新节点作为新的头节点，传入的value作为节点的值，当前的头节点作为新节点的next引用</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> newNode = <span class=\"keyword\">new</span> <span class=\"title class_\">DoublyLinkedListNode</span>(value, <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果链表已经有头节点，将当前头节点的previous引用指向新节点，将新节点设为新的头节点</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">head</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>.<span class=\"property\">previous</span> = newNode;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = newNode;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果链表还没有尾节点，将新节点也设为尾节点</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">tail</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span> = newNode;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回更新后的链表</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"append-value-方法\"><a href=\"#append-value-方法\" class=\"headerlink\" title=\"append(value) 方法\"></a>append(value) 方法</h3><p>将一个具有给定值的新节点添加到链表的末尾.<br>该方法首先创建一个新节点，节点的值为传入的 <code>value</code>。然后，它检查链表是否为空。如果链表为空，将新节点设置为头结点和尾节点，然后返回当前链表实例。如果链表不为空，将新节点连接到链表的末尾，即将当前尾节点的 next 属性指向新节点，同时将新节点的 previous 属性指向当前尾节点。最后，将新节点设置为链表的尾节点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">value</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">DoublyLinkedList</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">append</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建一个新的节点，值为传入的 value</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> newNode = <span class=\"keyword\">new</span> <span class=\"title class_\">DoublyLinkedListNode</span>(value);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果链表为空，将新节点设置为头结点和尾节点</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">head</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = newNode;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span> = newNode;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>; <span class=\"comment\">// 返回当前链表实例</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将新节点连接到链表的末尾</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span>.<span class=\"property\">next</span> = newNode;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将当前尾节点设置为新节点的前一个节点</span></span><br><span class=\"line\">  newNode.<span class=\"property\">previous</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将新节点设置为链表的尾节点</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span> = newNode;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>; <span class=\"comment\">// 返回当前链表实例</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"delete-value-方法\"><a href=\"#delete-value-方法\" class=\"headerlink\" title=\"delete(value) 方法\"></a>delete(value) 方法</h3><p>该方法通过遍历链表来查找具有指定值的节点。如果找到了该节点，则通过调整前驱节点和后继节点的指针来删除节点。如果被删除的节点是链表的头节点或尾节点，则相应地更新头指针或尾指针。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">value</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">DoublyLinkedListNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">delete</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果链表为空，直接返回null</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">head</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化被删除的节点为null，并从头节点开始遍历</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> deletedNode = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentNode = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 遍历链表</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (currentNode) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果找到了与指定值相等的节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">compare</span>.<span class=\"title function_\">equal</span>(currentNode.<span class=\"property\">value</span>, value)) &#123;</span><br><span class=\"line\">      deletedNode = currentNode;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 如果被删除的节点是头节点</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (deletedNode === <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 设置头节点为下一个节点，成为新的头节点</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = deletedNode.<span class=\"property\">next</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果存在新的头节点，将其前驱指针设为null</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">head</span>) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>.<span class=\"property\">previous</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果被删除的节点同时是尾节点，则更新尾节点为null</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (deletedNode === <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span>) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (deletedNode === <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果被删除的节点是尾节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 设置尾节点为倒数第二个节点，成为新的尾节点</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span> = deletedNode.<span class=\"property\">previous</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span>.<span class=\"property\">next</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果被删除的节点是中间节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取被删除节点的前驱节点和后继节点</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> previousNode = deletedNode.<span class=\"property\">previous</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> nextNode = deletedNode.<span class=\"property\">next</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 调整前驱节点和后继节点的指针，将被删除节点从链表中删除</span></span><br><span class=\"line\">        previousNode.<span class=\"property\">next</span> = nextNode;</span><br><span class=\"line\">        nextNode.<span class=\"property\">previous</span> = previousNode;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 继续遍历下一个节点</span></span><br><span class=\"line\">    currentNode = currentNode.<span class=\"property\">next</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回被删除的节点</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> deletedNode;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"find-value-undefined-callback-undefined-方法\"><a href=\"#find-value-undefined-callback-undefined-方法\" class=\"headerlink\" title=\"find({ value &#x3D; undefined, callback &#x3D; undefined }) 方法\"></a>find({ value &#x3D; undefined, callback &#x3D; undefined }) 方法</h3><p>在双向链表中查找节点.<br>它接收一个名为 <code>findParams</code> 的对象作为参数，该对象可以有两个属性：<code>value</code> 和 <code>callback</code>。方法通过遍历链表的节点，并检查回调函数是否对节点的值返回 <code>true</code>，或者检查节点的值是否与 <code>value</code> 属性相等（使用 <code>compare.equal</code> 方法）。如果找到匹配的节点，则返回该节点；否则返回 <code>null</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Object</span>&#125; <span class=\"variable\">findParams</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; findParams.value</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">function</span>&#125; [findParams.callback]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">DoublyLinkedListNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">find</span>(<span class=\"params\">&#123; value = <span class=\"literal\">undefined</span>, callback = <span class=\"literal\">undefined</span> &#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果链表为空，直接返回null</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">head</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 从头节点开始遍历链表</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentNode = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 遍历链表的每个节点</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (currentNode) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果回调函数存在且回调函数返回true，则返回当前节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (callback &amp;&amp; <span class=\"title function_\">callback</span>(currentNode.<span class=\"property\">value</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> currentNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果指定了value参数且当前节点的值等于value，则返回当前节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value !== <span class=\"literal\">undefined</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">compare</span>.<span class=\"title function_\">equal</span>(currentNode.<span class=\"property\">value</span>, value)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> currentNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 继续遍历下一个节点</span></span><br><span class=\"line\">    currentNode = currentNode.<span class=\"property\">next</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果没有找到匹配的节点，则返回null</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"deleteTail-方法\"><a href=\"#deleteTail-方法\" class=\"headerlink\" title=\"deleteTail() 方法\"></a>deleteTail() 方法</h3><p>删除尾节点.</p>\n<ul>\n<li>首先通过检查 <code>this.tail</code> 是否为 <code>null</code> 来判断链表是否为空。如果为空，表示没有尾部节点可以删除，所以返回 <code>null</code>。</li>\n<li>如果链表只有一个节点，即 <code>this.head</code> 等于 <code>this.tail</code>，则将要删除的尾部节点保存到 <code>deletedTail</code> 变量中。将 <code>this.head</code> 和 <code>this.tail</code> 都置为 <code>null</code>，表示链表为空。然后返回被删除的尾部节点。</li>\n<li>如果链表中有多个节点，则将要删除的尾部节点保存到 <code>deletedTail</code> 变量中。<ul>\n<li>将 <code>this.tail</code> 更新为前一个节点，即将尾部节点指向前一个节点。</li>\n<li>将新的尾部节点的 <code>next</code> 指针置为 <code>null</code>，表示它是链表的最后一个节点。</li>\n<li>然后返回被删除的尾部节点。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">DoublyLinkedListNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">deleteTail</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 检查链表是否为空</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">tail</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果链表为空，没有尾部节点可以删除，返回null</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果链表中只有一个节点</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">head</span> === <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 保存要删除的尾部节点</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> deletedTail = <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 将头部和尾部节点都置为null，表示链表为空</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回被删除的尾部节点</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> deletedTail;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果链表中有多个节点</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> deletedTail = <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将尾部节点更新为前一个节点</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span>.<span class=\"property\">previous</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 将新的尾部节点的next指针置为null</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span>.<span class=\"property\">next</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回被删除的尾部节点</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> deletedTail;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"deleteHead-方法\"><a href=\"#deleteHead-方法\" class=\"headerlink\" title=\"deleteHead() 方法\"></a>deleteHead() 方法</h3><p>用于删除链表的头节点。<br>如果链表为空，则返回 <code>null</code>。否则，它会将头节点保存到 <code>deletedHead</code> 变量中。如果头节点有下一个节点，它会将头节点更新为下一个节点，并将新的头节点的 <code>previous</code> 指针设为 <code>null</code>，断开与之前头节点的连接。如果头节点没有下一个节点，说明链表只有一个节点，那么它会将头节点和尾节点都设为 <code>null</code>，表示链表为空。最后，它会返回被删除的头节点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">DoublyLinkedListNode</span>&#125; 返回被删除的头节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">deleteHead</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果链表为空，直接返回null</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">head</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将头节点保存到deletedHead变量中</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> deletedHead = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果头节点有下一个节点</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">head</span>.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 更新头节点为下一个节点</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>.<span class=\"property\">next</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 将新的头节点的previous指针设为null，断开与之前头节点的连接</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>.<span class=\"property\">previous</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果头节点没有下一个节点，说明链表只有一个节点</span></span><br><span class=\"line\">    <span class=\"comment\">// 将头节点和尾节点都设为null，表示链表为空</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回被删除的头节点</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> deletedHead;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"toArray-方法\"><a href=\"#toArray-方法\" class=\"headerlink\" title=\"toArray() 方法\"></a>toArray() 方法</h3><p>链表转数组的方法.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">DoublyLinkedListNode[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">toArray</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建一个空数组来存储节点</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> nodes = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 从链表头开始迭代</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentNode = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 循环遍历链表，直到当前节点为空</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (currentNode) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将当前节点添加到节点数组中</span></span><br><span class=\"line\">    nodes.<span class=\"title function_\">push</span>(currentNode);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 移动到链表的下一个节点</span></span><br><span class=\"line\">    currentNode = currentNode.<span class=\"property\">next</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回包含链表所有节点的数组</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> nodes;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"fromArray-values-方法\"><a href=\"#fromArray-values-方法\" class=\"headerlink\" title=\"fromArray(values) 方法\"></a>fromArray(values) 方法</h3><p>数组转双向链表.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*[]</span>&#125; <span class=\"variable\">values</span> - 需要转换为链表的值数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">DoublyLinkedList</span>&#125; - 转换后的双向链表</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">fromArray</span>(<span class=\"params\">values</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 遍历值数组，对每个值执行 append 方法，将其添加到双向链表中</span></span><br><span class=\"line\">  values.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">append</span>(value));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回转换后的双向链表</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"toString-callback-方法\"><a href=\"#toString-callback-方法\" class=\"headerlink\" title=\"toString(callback) 方法\"></a>toString(callback) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">function</span>&#125; [callback] 可选参数，用于自定义每个节点的字符串表示</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string</span>&#125; 返回一个字符串表示，包括数组中每个节点的字符串表示</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">toString</span>(<span class=\"params\">callback</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 调用 toArray 方法获取节点数组，然后使用 map 方法遍历数组中的每个节点，并调用其 toString 方法，最后使用 toString 方法将结果转换为字符串</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">toArray</span>().<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">node</span>) =&gt;</span> node.<span class=\"title function_\">toString</span>(callback)).<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"reverse-方法\"><a href=\"#reverse-方法\" class=\"headerlink\" title=\"reverse() 方法\"></a>reverse() 方法</h3><p>反转一个双向链表.<br>它通过交换每个节点的 <code>next</code> 和 <code>previous</code> 指针来实现链表的反转。方法开始时，将三个变量进行初始化：<code>currNode</code> 设置为链表的头部，<code>prevNode</code> 设置为 <code>null</code>，<code>nextNode</code> 设置为 <code>null</code>。然后，进入一个循环，遍历链表中的每个节点。在循环内部，交换当前节点的 <code>next</code> 和 <code>previous</code> 指针，并更新 <code>prevNode</code> 和 <code>currNode</code> 变量。循环结束后，更新链表的 <code>head</code> 和 <code>tail</code> 指针以反映反转后的顺序，并返回修改后的链表。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 反转一个双向链表。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">DoublyLinkedList</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">reverse</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化当前节点为链表头部</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> currNode = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化前一个节点为null</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> prevNode = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化下一个节点为null</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> nextNode = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 遍历链表中的每个节点</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (currNode) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 保存下一个节点的引用</span></span><br><span class=\"line\">    nextNode = currNode.<span class=\"property\">next</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 保存前一个节点的引用</span></span><br><span class=\"line\">    prevNode = currNode.<span class=\"property\">previous</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将当前节点的next指针指向前一个节点</span></span><br><span class=\"line\">    currNode.<span class=\"property\">next</span> = prevNode;</span><br><span class=\"line\">    <span class=\"comment\">// 将当前节点的previous指针指向下一个节点</span></span><br><span class=\"line\">    currNode.<span class=\"property\">previous</span> = nextNode;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将prevNode和currNode节点向前移动一步</span></span><br><span class=\"line\">    prevNode = currNode;</span><br><span class=\"line\">    currNode = nextNode;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 重新设置头部和尾部节点</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">tail</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = prevNode;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回修改后的链表</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>源码地址: <a href=\"https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/doubly-linked-list/DoublyLinkedList.js\">JavaScript Algorithms and Data Structures</a></li>\n</ul>"},{"title":"使用WebViewJavascriptBridge实现iOS与js交互","date":"2023-09-06T02:46:05.000Z","_content":"\n> 背景: 原生应用跳转到 h5 页面, 并实现原生与 h5 页面的交互, 比如在 h5 页面中调用原生的拨打电话、拍照、选文件、定位等功能\n\n## iOS 端集成 [WebViewJavascriptBridge](https://github.com/marcuswestin/WebViewJavascriptBridge)\n\n### 安装\n\n方式一: 使用`CocoaPods`集成:\n\n```\npod 'WebViewJavascriptBridge', '~> 6.0'\n```\n\n方式二: 手动集成, 把源代码`WebViewJavascriptBridge`文件夹拖到项目里. 我采用的是这种方式, 方便修改源码.\n\n> 注意: 2020 年 4 月起 App Store 将不再接受使用`UIWebView`的新 App 上架、2020 年 12 月起将不再接受使用`UIWebView的App`更新。而该库中`WebViewJavascriptBridge`文件是对`UIWebView`的处理, 所以项目中把`WebViewJavascriptBridge`文件删除.\n\n<!-- more -->\n\n### 使用\n\n#### 初始化`WebViewJavascriptBridge`对象\n\n1. 导入`WKWebViewJavascriptBridge`\n   ```objective-c\n   #import \"WKWebViewJavascriptBridge.h\"\n   ```\n2. 声明属性\n   ```objective-c\n   @property(nonatomic, strong) WKWebViewJavascriptBridge *bridge;\n   ```\n3. 初始化\n   ```objective-c\n   self.bridge = [WKWebViewJavascriptBridge bridgeForWebView:self.wkWebView];\n   ```\n4. 设置代理, 自由实现`WKNavigationDelegate`方法\n   ```objective-c\n   [self.bridge setWebViewDelegate:self];\n   ```\n5. 开启日志\n   ```objective-c\n   [WKWebViewJavascriptBridge enableLogging];\n   ```\n\n#### iOS 调用 js 方法\n\n1. js 端先注册方法\n   ```js\n   bridge.registerHandler(\"JS Echo\", function (data, responseCallback) {\n     console.log(\"JS Echo called with:\", data);\n     responseCallback(data);\n   });\n   ```\n2. iOS 端调用\n   ```objective-c\n   [self.bridge callHandler:@\"JS Echo\" data:nil responseCallback:^(id responseData) {\n   \tNSLog(@\"ObjC received response: %@\", responseData);\n   }];\n   ```\n\n#### js 调用 iOS 方法\n\n1. iOS 端先注册方法\n   ```objective-c\n   [self.bridge registerHandler:@\"ObjC Echo\" handler:^(id data, WVJBResponseCallback responseCallback) {\n   \tNSLog(@\"ObjC Echo called with: %@\", data);\n   \tresponseCallback(data);\n   }];\n   ```\n1. js 端调用\n   ```js\n   bridge.callHandler(\"ObjC Echo\", { key: \"value\" }, function responseCallback(responseData) {\n     console.log(\"JS received response:\", responseData);\n   });\n   ```\n\n## JS 端使用\n\n### 桥接文件\n\n1. 针对 iOS 建立连接\n   ```js\n   function setupWebViewJavascriptBridge(callback) {\n     if (window.WebViewJavascriptBridge) {\n       return callback(WebViewJavascriptBridge);\n     }\n     if (window.WVJBCallbacks) {\n       return window.WVJBCallbacks.push(callback);\n     }\n     window.WVJBCallbacks = [callback];\n     var WVJBIframe = document.createElement(\"iframe\");\n     WVJBIframe.style.display = \"none\";\n     WVJBIframe.src = \"https://__bridge_loaded__\";\n     document.documentElement.appendChild(WVJBIframe);\n     setTimeout(function () {\n       document.documentElement.removeChild(WVJBIframe);\n     }, 0);\n   }\n   ```\n2. 针对 Android 建立连接方法\n   ```js\n   function connectWebViewJavascriptBridge(callback) {\n     if (window.WebViewJavascriptBridge) {\n       callback(window.WebViewJavascriptBridge);\n     } else {\n       document.addEventListener(\n         \"WebViewJavascriptBridgeReady\",\n         () => {\n           callback(window.WebViewJavascriptBridge);\n         },\n         false\n       );\n     }\n   }\n   ```\n3. 适配 iOS 和 android 的桥接\n\n   ```js\n   let ua = navigator.userAgent;\n   let android = /(Android);?[\\s\\/]+([\\d.]+)?/.test(ua);\n   let ios = /\\(i[^;]+;( U;)? CPU.+Mac OS X/.test(ua);\n\n   function hybridBridgeReady(ready) {\n     if (ios) {\n       setupWebViewJavascriptBridge(ready);\n     } else if (android) {\n       connectWebViewJavascriptBridge(ready);\n     }\n   }\n\n   if (android) {\n     hybridBridgeReady((bridge) => {\n       bridge.init((message, responseCallback) => {\n         let data = {\n           documentReady: \"ready\",\n         };\n         responseCallback(data);\n       });\n     });\n   }\n   ```\n\n4. js 端注册方法供原生端调用\n   ```js\n   hybridBridgeReady((bridge) => {\n     bridge.registerHandler(\"JS Echo\", function (data, responseCallback) {\n       console.log(\"JS Echo called with:\", data);\n       responseCallback(data);\n     });\n   });\n   ```\n5. js 端调用原生端方法\n   ```js\n   hybridBridgeReady((bridge) => {\n     bridge.callHandler(\"ObjC Echo\", { key: \"value\" }, function responseCallback(responseData) {\n       console.log(\"JS received response:\", responseData);\n     });\n   });\n   ```\n\n---\n\n参考文档\n\n- [WebViewJavascriptBridge](https://github.com/marcuswestin/WebViewJavascriptBridge)\n","source":"_posts/WebViewJavascriptBridge-use.md","raw":"---\ntitle: 使用WebViewJavascriptBridge实现iOS与js交互\ndate: 2023-09-06 10:46:05\ntags:\n  - WKWebView\n  - javascript\ncategories:\n  - iOS\n---\n\n> 背景: 原生应用跳转到 h5 页面, 并实现原生与 h5 页面的交互, 比如在 h5 页面中调用原生的拨打电话、拍照、选文件、定位等功能\n\n## iOS 端集成 [WebViewJavascriptBridge](https://github.com/marcuswestin/WebViewJavascriptBridge)\n\n### 安装\n\n方式一: 使用`CocoaPods`集成:\n\n```\npod 'WebViewJavascriptBridge', '~> 6.0'\n```\n\n方式二: 手动集成, 把源代码`WebViewJavascriptBridge`文件夹拖到项目里. 我采用的是这种方式, 方便修改源码.\n\n> 注意: 2020 年 4 月起 App Store 将不再接受使用`UIWebView`的新 App 上架、2020 年 12 月起将不再接受使用`UIWebView的App`更新。而该库中`WebViewJavascriptBridge`文件是对`UIWebView`的处理, 所以项目中把`WebViewJavascriptBridge`文件删除.\n\n<!-- more -->\n\n### 使用\n\n#### 初始化`WebViewJavascriptBridge`对象\n\n1. 导入`WKWebViewJavascriptBridge`\n   ```objective-c\n   #import \"WKWebViewJavascriptBridge.h\"\n   ```\n2. 声明属性\n   ```objective-c\n   @property(nonatomic, strong) WKWebViewJavascriptBridge *bridge;\n   ```\n3. 初始化\n   ```objective-c\n   self.bridge = [WKWebViewJavascriptBridge bridgeForWebView:self.wkWebView];\n   ```\n4. 设置代理, 自由实现`WKNavigationDelegate`方法\n   ```objective-c\n   [self.bridge setWebViewDelegate:self];\n   ```\n5. 开启日志\n   ```objective-c\n   [WKWebViewJavascriptBridge enableLogging];\n   ```\n\n#### iOS 调用 js 方法\n\n1. js 端先注册方法\n   ```js\n   bridge.registerHandler(\"JS Echo\", function (data, responseCallback) {\n     console.log(\"JS Echo called with:\", data);\n     responseCallback(data);\n   });\n   ```\n2. iOS 端调用\n   ```objective-c\n   [self.bridge callHandler:@\"JS Echo\" data:nil responseCallback:^(id responseData) {\n   \tNSLog(@\"ObjC received response: %@\", responseData);\n   }];\n   ```\n\n#### js 调用 iOS 方法\n\n1. iOS 端先注册方法\n   ```objective-c\n   [self.bridge registerHandler:@\"ObjC Echo\" handler:^(id data, WVJBResponseCallback responseCallback) {\n   \tNSLog(@\"ObjC Echo called with: %@\", data);\n   \tresponseCallback(data);\n   }];\n   ```\n1. js 端调用\n   ```js\n   bridge.callHandler(\"ObjC Echo\", { key: \"value\" }, function responseCallback(responseData) {\n     console.log(\"JS received response:\", responseData);\n   });\n   ```\n\n## JS 端使用\n\n### 桥接文件\n\n1. 针对 iOS 建立连接\n   ```js\n   function setupWebViewJavascriptBridge(callback) {\n     if (window.WebViewJavascriptBridge) {\n       return callback(WebViewJavascriptBridge);\n     }\n     if (window.WVJBCallbacks) {\n       return window.WVJBCallbacks.push(callback);\n     }\n     window.WVJBCallbacks = [callback];\n     var WVJBIframe = document.createElement(\"iframe\");\n     WVJBIframe.style.display = \"none\";\n     WVJBIframe.src = \"https://__bridge_loaded__\";\n     document.documentElement.appendChild(WVJBIframe);\n     setTimeout(function () {\n       document.documentElement.removeChild(WVJBIframe);\n     }, 0);\n   }\n   ```\n2. 针对 Android 建立连接方法\n   ```js\n   function connectWebViewJavascriptBridge(callback) {\n     if (window.WebViewJavascriptBridge) {\n       callback(window.WebViewJavascriptBridge);\n     } else {\n       document.addEventListener(\n         \"WebViewJavascriptBridgeReady\",\n         () => {\n           callback(window.WebViewJavascriptBridge);\n         },\n         false\n       );\n     }\n   }\n   ```\n3. 适配 iOS 和 android 的桥接\n\n   ```js\n   let ua = navigator.userAgent;\n   let android = /(Android);?[\\s\\/]+([\\d.]+)?/.test(ua);\n   let ios = /\\(i[^;]+;( U;)? CPU.+Mac OS X/.test(ua);\n\n   function hybridBridgeReady(ready) {\n     if (ios) {\n       setupWebViewJavascriptBridge(ready);\n     } else if (android) {\n       connectWebViewJavascriptBridge(ready);\n     }\n   }\n\n   if (android) {\n     hybridBridgeReady((bridge) => {\n       bridge.init((message, responseCallback) => {\n         let data = {\n           documentReady: \"ready\",\n         };\n         responseCallback(data);\n       });\n     });\n   }\n   ```\n\n4. js 端注册方法供原生端调用\n   ```js\n   hybridBridgeReady((bridge) => {\n     bridge.registerHandler(\"JS Echo\", function (data, responseCallback) {\n       console.log(\"JS Echo called with:\", data);\n       responseCallback(data);\n     });\n   });\n   ```\n5. js 端调用原生端方法\n   ```js\n   hybridBridgeReady((bridge) => {\n     bridge.callHandler(\"ObjC Echo\", { key: \"value\" }, function responseCallback(responseData) {\n       console.log(\"JS received response:\", responseData);\n     });\n   });\n   ```\n\n---\n\n参考文档\n\n- [WebViewJavascriptBridge](https://github.com/marcuswestin/WebViewJavascriptBridge)\n","slug":"WebViewJavascriptBridge-use","published":1,"updated":"2023-09-06T02:49:05.621Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clq4xe1d6000btz2hag7hhckg","content":"<blockquote>\n<p>背景: 原生应用跳转到 h5 页面, 并实现原生与 h5 页面的交互, 比如在 h5 页面中调用原生的拨打电话、拍照、选文件、定位等功能</p>\n</blockquote>\n<h2 id=\"iOS-端集成-WebViewJavascriptBridge\"><a href=\"#iOS-端集成-WebViewJavascriptBridge\" class=\"headerlink\" title=\"iOS 端集成 WebViewJavascriptBridge\"></a>iOS 端集成 <a href=\"https://github.com/marcuswestin/WebViewJavascriptBridge\">WebViewJavascriptBridge</a></h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>方式一: 使用<code>CocoaPods</code>集成:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod &#x27;WebViewJavascriptBridge&#x27;, &#x27;~&gt; 6.0&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>方式二: 手动集成, 把源代码<code>WebViewJavascriptBridge</code>文件夹拖到项目里. 我采用的是这种方式, 方便修改源码.</p>\n<blockquote>\n<p>注意: 2020 年 4 月起 App Store 将不再接受使用<code>UIWebView</code>的新 App 上架、2020 年 12 月起将不再接受使用<code>UIWebView的App</code>更新。而该库中<code>WebViewJavascriptBridge</code>文件是对<code>UIWebView</code>的处理, 所以项目中把<code>WebViewJavascriptBridge</code>文件删除.</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><h4 id=\"初始化WebViewJavascriptBridge对象\"><a href=\"#初始化WebViewJavascriptBridge对象\" class=\"headerlink\" title=\"初始化WebViewJavascriptBridge对象\"></a>初始化<code>WebViewJavascriptBridge</code>对象</h4><ol>\n<li>导入<code>WKWebViewJavascriptBridge</code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;WKWebViewJavascriptBridge.h&quot;</span><br></pre></td></tr></table></figure></li>\n<li>声明属性<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property(nonatomic, strong) WKWebViewJavascriptBridge *bridge;</span><br></pre></td></tr></table></figure></li>\n<li>初始化<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.bridge = [WKWebViewJavascriptBridge bridgeForWebView:self.wkWebView];</span><br></pre></td></tr></table></figure></li>\n<li>设置代理, 自由实现<code>WKNavigationDelegate</code>方法<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[self.bridge setWebViewDelegate:self];</span><br></pre></td></tr></table></figure></li>\n<li>开启日志<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[WKWebViewJavascriptBridge enableLogging];</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"iOS-调用-js-方法\"><a href=\"#iOS-调用-js-方法\" class=\"headerlink\" title=\"iOS 调用 js 方法\"></a>iOS 调用 js 方法</h4><ol>\n<li>js 端先注册方法<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bridge.<span class=\"title function_\">registerHandler</span>(<span class=\"string\">&quot;JS Echo&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">data, responseCallback</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;JS Echo called with:&quot;</span>, data);</span><br><span class=\"line\">  <span class=\"title function_\">responseCallback</span>(data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li>iOS 端调用<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[self.bridge callHandler:@&quot;JS Echo&quot; data:nil responseCallback:^(id responseData) &#123;</span><br><span class=\"line\">\tNSLog(@&quot;ObjC received response: %@&quot;, responseData);</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"js-调用-iOS-方法\"><a href=\"#js-调用-iOS-方法\" class=\"headerlink\" title=\"js 调用 iOS 方法\"></a>js 调用 iOS 方法</h4><ol>\n<li>iOS 端先注册方法<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[self.bridge registerHandler:@&quot;ObjC Echo&quot; handler:^(id data, WVJBResponseCallback responseCallback) &#123;</span><br><span class=\"line\">\tNSLog(@&quot;ObjC Echo called with: %@&quot;, data);</span><br><span class=\"line\">\tresponseCallback(data);</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure></li>\n<li>js 端调用<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bridge.<span class=\"title function_\">callHandler</span>(<span class=\"string\">&quot;ObjC Echo&quot;</span>, &#123; <span class=\"attr\">key</span>: <span class=\"string\">&quot;value&quot;</span> &#125;, <span class=\"keyword\">function</span> <span class=\"title function_\">responseCallback</span>(<span class=\"params\">responseData</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;JS received response:&quot;</span>, responseData);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"JS-端使用\"><a href=\"#JS-端使用\" class=\"headerlink\" title=\"JS 端使用\"></a>JS 端使用</h2><h3 id=\"桥接文件\"><a href=\"#桥接文件\" class=\"headerlink\" title=\"桥接文件\"></a>桥接文件</h3><ol>\n<li><p>针对 iOS 建立连接</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">setupWebViewJavascriptBridge</span>(<span class=\"params\">callback</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">WebViewJavascriptBridge</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">callback</span>(<span class=\"title class_\">WebViewJavascriptBridge</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">WVJBCallbacks</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">window</span>.<span class=\"property\">WVJBCallbacks</span>.<span class=\"title function_\">push</span>(callback);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">window</span>.<span class=\"property\">WVJBCallbacks</span> = [callback];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> <span class=\"title class_\">WVJBIframe</span> = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;iframe&quot;</span>);</span><br><span class=\"line\">  <span class=\"title class_\">WVJBIframe</span>.<span class=\"property\">style</span>.<span class=\"property\">display</span> = <span class=\"string\">&quot;none&quot;</span>;</span><br><span class=\"line\">  <span class=\"title class_\">WVJBIframe</span>.<span class=\"property\">src</span> = <span class=\"string\">&quot;https://__bridge_loaded__&quot;</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"title function_\">appendChild</span>(<span class=\"title class_\">WVJBIframe</span>);</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"title function_\">removeChild</span>(<span class=\"title class_\">WVJBIframe</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>针对 Android 建立连接方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">connectWebViewJavascriptBridge</span>(<span class=\"params\">callback</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">WebViewJavascriptBridge</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">callback</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">WebViewJavascriptBridge</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(</span><br><span class=\"line\">      <span class=\"string\">&quot;WebViewJavascriptBridgeReady&quot;</span>,</span><br><span class=\"line\">      <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">callback</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">WebViewJavascriptBridge</span>);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"literal\">false</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>适配 iOS 和 android 的桥接</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ua = navigator.<span class=\"property\">userAgent</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> android = <span class=\"regexp\">/(Android);?[\\s\\/]+([\\d.]+)?/</span>.<span class=\"title function_\">test</span>(ua);</span><br><span class=\"line\"><span class=\"keyword\">let</span> ios = <span class=\"regexp\">/\\(i[^;]+;( U;)? CPU.+Mac OS X/</span>.<span class=\"title function_\">test</span>(ua);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">hybridBridgeReady</span>(<span class=\"params\">ready</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ios) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setupWebViewJavascriptBridge</span>(ready);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (android) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">connectWebViewJavascriptBridge</span>(ready);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (android) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">hybridBridgeReady</span>(<span class=\"function\">(<span class=\"params\">bridge</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    bridge.<span class=\"title function_\">init</span>(<span class=\"function\">(<span class=\"params\">message, responseCallback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> data = &#123;</span><br><span class=\"line\">        <span class=\"attr\">documentReady</span>: <span class=\"string\">&quot;ready&quot;</span>,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"title function_\">responseCallback</span>(data);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>js 端注册方法供原生端调用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">hybridBridgeReady</span>(<span class=\"function\">(<span class=\"params\">bridge</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  bridge.<span class=\"title function_\">registerHandler</span>(<span class=\"string\">&quot;JS Echo&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">data, responseCallback</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;JS Echo called with:&quot;</span>, data);</span><br><span class=\"line\">    <span class=\"title function_\">responseCallback</span>(data);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li><p>js 端调用原生端方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">hybridBridgeReady</span>(<span class=\"function\">(<span class=\"params\">bridge</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  bridge.<span class=\"title function_\">callHandler</span>(<span class=\"string\">&quot;ObjC Echo&quot;</span>, &#123; <span class=\"attr\">key</span>: <span class=\"string\">&quot;value&quot;</span> &#125;, <span class=\"keyword\">function</span> <span class=\"title function_\">responseCallback</span>(<span class=\"params\">responseData</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;JS received response:&quot;</span>, responseData);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<p>参考文档</p>\n<ul>\n<li><a href=\"https://github.com/marcuswestin/WebViewJavascriptBridge\">WebViewJavascriptBridge</a></li>\n</ul>\n","site":{"data":{}},"related_posts":[],"length":518,"excerpt":"<blockquote>\n<p>背景: 原生应用跳转到 h5 页面, 并实现原生与 h5 页面的交互, 比如在 h5 页面中调用原生的拨打电话、拍照、选文件、定位等功能</p>\n</blockquote>\n<h2 id=\"iOS-端集成-WebViewJavascriptBridge\"><a href=\"#iOS-端集成-WebViewJavascriptBridge\" class=\"headerlink\" title=\"iOS 端集成 WebViewJavascriptBridge\"></a>iOS 端集成 <a href=\"https://github.com/marcuswestin/WebViewJavascriptBridge\">WebViewJavascriptBridge</a></h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>方式一: 使用<code>CocoaPods</code>集成:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod &#x27;WebViewJavascriptBridge&#x27;, &#x27;~&gt; 6.0&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>方式二: 手动集成, 把源代码<code>WebViewJavascriptBridge</code>文件夹拖到项目里. 我采用的是这种方式, 方便修改源码.</p>\n<blockquote>\n<p>注意: 2020 年 4 月起 App Store 将不再接受使用<code>UIWebView</code>的新 App 上架、2020 年 12 月起将不再接受使用<code>UIWebView的App</code>更新。而该库中<code>WebViewJavascriptBridge</code>文件是对<code>UIWebView</code>的处理, 所以项目中把<code>WebViewJavascriptBridge</code>文件删除.</p>\n</blockquote>","more":"<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><h4 id=\"初始化WebViewJavascriptBridge对象\"><a href=\"#初始化WebViewJavascriptBridge对象\" class=\"headerlink\" title=\"初始化WebViewJavascriptBridge对象\"></a>初始化<code>WebViewJavascriptBridge</code>对象</h4><ol>\n<li>导入<code>WKWebViewJavascriptBridge</code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;WKWebViewJavascriptBridge.h&quot;</span><br></pre></td></tr></table></figure></li>\n<li>声明属性<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property(nonatomic, strong) WKWebViewJavascriptBridge *bridge;</span><br></pre></td></tr></table></figure></li>\n<li>初始化<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.bridge = [WKWebViewJavascriptBridge bridgeForWebView:self.wkWebView];</span><br></pre></td></tr></table></figure></li>\n<li>设置代理, 自由实现<code>WKNavigationDelegate</code>方法<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[self.bridge setWebViewDelegate:self];</span><br></pre></td></tr></table></figure></li>\n<li>开启日志<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[WKWebViewJavascriptBridge enableLogging];</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"iOS-调用-js-方法\"><a href=\"#iOS-调用-js-方法\" class=\"headerlink\" title=\"iOS 调用 js 方法\"></a>iOS 调用 js 方法</h4><ol>\n<li>js 端先注册方法<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bridge.<span class=\"title function_\">registerHandler</span>(<span class=\"string\">&quot;JS Echo&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">data, responseCallback</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;JS Echo called with:&quot;</span>, data);</span><br><span class=\"line\">  <span class=\"title function_\">responseCallback</span>(data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li>iOS 端调用<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[self.bridge callHandler:@&quot;JS Echo&quot; data:nil responseCallback:^(id responseData) &#123;</span><br><span class=\"line\">\tNSLog(@&quot;ObjC received response: %@&quot;, responseData);</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"js-调用-iOS-方法\"><a href=\"#js-调用-iOS-方法\" class=\"headerlink\" title=\"js 调用 iOS 方法\"></a>js 调用 iOS 方法</h4><ol>\n<li>iOS 端先注册方法<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[self.bridge registerHandler:@&quot;ObjC Echo&quot; handler:^(id data, WVJBResponseCallback responseCallback) &#123;</span><br><span class=\"line\">\tNSLog(@&quot;ObjC Echo called with: %@&quot;, data);</span><br><span class=\"line\">\tresponseCallback(data);</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure></li>\n<li>js 端调用<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bridge.<span class=\"title function_\">callHandler</span>(<span class=\"string\">&quot;ObjC Echo&quot;</span>, &#123; <span class=\"attr\">key</span>: <span class=\"string\">&quot;value&quot;</span> &#125;, <span class=\"keyword\">function</span> <span class=\"title function_\">responseCallback</span>(<span class=\"params\">responseData</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;JS received response:&quot;</span>, responseData);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"JS-端使用\"><a href=\"#JS-端使用\" class=\"headerlink\" title=\"JS 端使用\"></a>JS 端使用</h2><h3 id=\"桥接文件\"><a href=\"#桥接文件\" class=\"headerlink\" title=\"桥接文件\"></a>桥接文件</h3><ol>\n<li><p>针对 iOS 建立连接</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">setupWebViewJavascriptBridge</span>(<span class=\"params\">callback</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">WebViewJavascriptBridge</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">callback</span>(<span class=\"title class_\">WebViewJavascriptBridge</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">WVJBCallbacks</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">window</span>.<span class=\"property\">WVJBCallbacks</span>.<span class=\"title function_\">push</span>(callback);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">window</span>.<span class=\"property\">WVJBCallbacks</span> = [callback];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> <span class=\"title class_\">WVJBIframe</span> = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;iframe&quot;</span>);</span><br><span class=\"line\">  <span class=\"title class_\">WVJBIframe</span>.<span class=\"property\">style</span>.<span class=\"property\">display</span> = <span class=\"string\">&quot;none&quot;</span>;</span><br><span class=\"line\">  <span class=\"title class_\">WVJBIframe</span>.<span class=\"property\">src</span> = <span class=\"string\">&quot;https://__bridge_loaded__&quot;</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"title function_\">appendChild</span>(<span class=\"title class_\">WVJBIframe</span>);</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"title function_\">removeChild</span>(<span class=\"title class_\">WVJBIframe</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>针对 Android 建立连接方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">connectWebViewJavascriptBridge</span>(<span class=\"params\">callback</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">WebViewJavascriptBridge</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">callback</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">WebViewJavascriptBridge</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(</span><br><span class=\"line\">      <span class=\"string\">&quot;WebViewJavascriptBridgeReady&quot;</span>,</span><br><span class=\"line\">      <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">callback</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">WebViewJavascriptBridge</span>);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"literal\">false</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>适配 iOS 和 android 的桥接</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ua = navigator.<span class=\"property\">userAgent</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> android = <span class=\"regexp\">/(Android);?[\\s\\/]+([\\d.]+)?/</span>.<span class=\"title function_\">test</span>(ua);</span><br><span class=\"line\"><span class=\"keyword\">let</span> ios = <span class=\"regexp\">/\\(i[^;]+;( U;)? CPU.+Mac OS X/</span>.<span class=\"title function_\">test</span>(ua);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">hybridBridgeReady</span>(<span class=\"params\">ready</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ios) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setupWebViewJavascriptBridge</span>(ready);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (android) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">connectWebViewJavascriptBridge</span>(ready);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (android) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">hybridBridgeReady</span>(<span class=\"function\">(<span class=\"params\">bridge</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    bridge.<span class=\"title function_\">init</span>(<span class=\"function\">(<span class=\"params\">message, responseCallback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> data = &#123;</span><br><span class=\"line\">        <span class=\"attr\">documentReady</span>: <span class=\"string\">&quot;ready&quot;</span>,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"title function_\">responseCallback</span>(data);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>js 端注册方法供原生端调用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">hybridBridgeReady</span>(<span class=\"function\">(<span class=\"params\">bridge</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  bridge.<span class=\"title function_\">registerHandler</span>(<span class=\"string\">&quot;JS Echo&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">data, responseCallback</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;JS Echo called with:&quot;</span>, data);</span><br><span class=\"line\">    <span class=\"title function_\">responseCallback</span>(data);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li><p>js 端调用原生端方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">hybridBridgeReady</span>(<span class=\"function\">(<span class=\"params\">bridge</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  bridge.<span class=\"title function_\">callHandler</span>(<span class=\"string\">&quot;ObjC Echo&quot;</span>, &#123; <span class=\"attr\">key</span>: <span class=\"string\">&quot;value&quot;</span> &#125;, <span class=\"keyword\">function</span> <span class=\"title function_\">responseCallback</span>(<span class=\"params\">responseData</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;JS received response:&quot;</span>, responseData);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<p>参考文档</p>\n<ul>\n<li><a href=\"https://github.com/marcuswestin/WebViewJavascriptBridge\">WebViewJavascriptBridge</a></li>\n</ul>"},{"title":"JavaScript Algorithms and Data Structures 源码分析(1) -- 工具类 Comparator","date":"2023-10-29T08:37:53.000Z","_content":"\n`Comparator` 类是一个用于比较两个值的工具类.\n\n```javascript\nexport default class Comparator {\n  /**\n   * 类的构造函数, 接受一个可选的compareFunction参数, 用于自定义比较函数.\n   * 如果没有传入compareFunction, 则会使用默认的比较函数.\n   */\n  constructor(compareFunction) {\n    this.compare = compareFunction || Comparator.defaultCompareFunction;\n  }\n\n  /**\n   * 默认的比较函数, 假设a和b是字符串或数字.\n   * 如果a 等于 b, 则返回0\n   * 如果a 小于 b, 则返回-1\n   * 如果a 大于 b, 则返回1\n   */\n  static defaultCompareFunction(a, b) {\n    if (a === b) {\n      return 0;\n    }\n\n    return a < b ? -1 : 1;\n  }\n\n  /**\n   * 检查两个变量是否相等.\n   * 内部调用this.compare(a, b), 如果返回值为0, 表示相等, 返回true; 否则返回false.\n   */\n  equal(a, b) {\n    return this.compare(a, b) === 0;\n  }\n\n  /**\n   * 检查变量a是否小于b.\n   * 内部调用this.compare(a, b), 如果返回值是-1, 表示a小于b, 返回true; 否则返回false\n   */\n  lessThan(a, b) {\n    return this.compare(a, b) < 0;\n  }\n\n  /**\n   * 检查变量a是否大于b\n   * 内部调用this.compare(a, b), 如果返回值为1, 表示a大于b, 返回true; 否则返回false\n   */\n  greaterThan(a, b) {\n    return this.compare(a, b) > 0;\n  }\n\n  /**\n   * 检查变量a是否小于等于b.\n   */\n  lessThanOrEqual(a, b) {\n    return this.lessThan(a, b) || this.equal(a, b);\n  }\n\n  /**\n   * 检查变量a是否大于等于b\n   */\n  greaterThanOrEqual(a, b) {\n    return this.greaterThan(a, b) || this.equal(a, b);\n  }\n\n  /**\n   * 反转比较顺序. 将当前的比较函数this.compare替换为compareOriginal(b, a), 实现反转比较的效果.\n   */\n  reverse() {\n    const compareOriginal = this.compare;\n    this.compare = (a, b) => compareOriginal(b, a);\n  }\n}\n```\n\n在`Comparator`类种, `compareFunction`是一个可选参数, 可以传入自定义的比较函数. 如果没有传入比较函数, 则会使用默认的比较函数. `compareFunction`应该是一个函数, 接受两个参数`a`和`b`, 返回一个数字, 表示它们的比较结果.\n\n这个类的目的是为了提供一种方便的方式来进行比较操作, 以及在需要时动态地改变比较顺序.\n\n---\n\n- 源码地址: [JavaScript Algorithms and Data Structures](https://github.com/trekhleb/javascript-algorithms/blob/master/src/utils/comparator/Comparator.js)\n","source":"_posts/data-structures-001-comparator.md","raw":"---\ntitle: JavaScript Algorithms and Data Structures 源码分析(1) -- 工具类 Comparator\ndate: 2023-10-29 16:37:53\ntags:\n  - data structures\ncategories:\n  - 数据结构与算法\n---\n\n`Comparator` 类是一个用于比较两个值的工具类.\n\n```javascript\nexport default class Comparator {\n  /**\n   * 类的构造函数, 接受一个可选的compareFunction参数, 用于自定义比较函数.\n   * 如果没有传入compareFunction, 则会使用默认的比较函数.\n   */\n  constructor(compareFunction) {\n    this.compare = compareFunction || Comparator.defaultCompareFunction;\n  }\n\n  /**\n   * 默认的比较函数, 假设a和b是字符串或数字.\n   * 如果a 等于 b, 则返回0\n   * 如果a 小于 b, 则返回-1\n   * 如果a 大于 b, 则返回1\n   */\n  static defaultCompareFunction(a, b) {\n    if (a === b) {\n      return 0;\n    }\n\n    return a < b ? -1 : 1;\n  }\n\n  /**\n   * 检查两个变量是否相等.\n   * 内部调用this.compare(a, b), 如果返回值为0, 表示相等, 返回true; 否则返回false.\n   */\n  equal(a, b) {\n    return this.compare(a, b) === 0;\n  }\n\n  /**\n   * 检查变量a是否小于b.\n   * 内部调用this.compare(a, b), 如果返回值是-1, 表示a小于b, 返回true; 否则返回false\n   */\n  lessThan(a, b) {\n    return this.compare(a, b) < 0;\n  }\n\n  /**\n   * 检查变量a是否大于b\n   * 内部调用this.compare(a, b), 如果返回值为1, 表示a大于b, 返回true; 否则返回false\n   */\n  greaterThan(a, b) {\n    return this.compare(a, b) > 0;\n  }\n\n  /**\n   * 检查变量a是否小于等于b.\n   */\n  lessThanOrEqual(a, b) {\n    return this.lessThan(a, b) || this.equal(a, b);\n  }\n\n  /**\n   * 检查变量a是否大于等于b\n   */\n  greaterThanOrEqual(a, b) {\n    return this.greaterThan(a, b) || this.equal(a, b);\n  }\n\n  /**\n   * 反转比较顺序. 将当前的比较函数this.compare替换为compareOriginal(b, a), 实现反转比较的效果.\n   */\n  reverse() {\n    const compareOriginal = this.compare;\n    this.compare = (a, b) => compareOriginal(b, a);\n  }\n}\n```\n\n在`Comparator`类种, `compareFunction`是一个可选参数, 可以传入自定义的比较函数. 如果没有传入比较函数, 则会使用默认的比较函数. `compareFunction`应该是一个函数, 接受两个参数`a`和`b`, 返回一个数字, 表示它们的比较结果.\n\n这个类的目的是为了提供一种方便的方式来进行比较操作, 以及在需要时动态地改变比较顺序.\n\n---\n\n- 源码地址: [JavaScript Algorithms and Data Structures](https://github.com/trekhleb/javascript-algorithms/blob/master/src/utils/comparator/Comparator.js)\n","slug":"data-structures-001-comparator","published":1,"updated":"2023-10-29T09:51:02.227Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clq4xe1d6000ftz2h93y32ywt","content":"<p><code>Comparator</code> 类是一个用于比较两个值的工具类.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Comparator</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 类的构造函数, 接受一个可选的compareFunction参数, 用于自定义比较函数.</span></span><br><span class=\"line\"><span class=\"comment\">   * 如果没有传入compareFunction, 则会使用默认的比较函数.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">compareFunction</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">compare</span> = compareFunction || <span class=\"title class_\">Comparator</span>.<span class=\"property\">defaultCompareFunction</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 默认的比较函数, 假设a和b是字符串或数字.</span></span><br><span class=\"line\"><span class=\"comment\">   * 如果a 等于 b, 则返回0</span></span><br><span class=\"line\"><span class=\"comment\">   * 如果a 小于 b, 则返回-1</span></span><br><span class=\"line\"><span class=\"comment\">   * 如果a 大于 b, 则返回1</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">defaultCompareFunction</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a === b) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a &lt; b ? -<span class=\"number\">1</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 检查两个变量是否相等.</span></span><br><span class=\"line\"><span class=\"comment\">   * 内部调用this.compare(a, b), 如果返回值为0, 表示相等, 返回true; 否则返回false.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">equal</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">compare</span>(a, b) === <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 检查变量a是否小于b.</span></span><br><span class=\"line\"><span class=\"comment\">   * 内部调用this.compare(a, b), 如果返回值是-1, 表示a小于b, 返回true; 否则返回false</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">lessThan</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">compare</span>(a, b) &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 检查变量a是否大于b</span></span><br><span class=\"line\"><span class=\"comment\">   * 内部调用this.compare(a, b), 如果返回值为1, 表示a大于b, 返回true; 否则返回false</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">greaterThan</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">compare</span>(a, b) &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 检查变量a是否小于等于b.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">lessThanOrEqual</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">lessThan</span>(a, b) || <span class=\"variable language_\">this</span>.<span class=\"title function_\">equal</span>(a, b);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 检查变量a是否大于等于b</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">greaterThanOrEqual</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">greaterThan</span>(a, b) || <span class=\"variable language_\">this</span>.<span class=\"title function_\">equal</span>(a, b);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 反转比较顺序. 将当前的比较函数this.compare替换为compareOriginal(b, a), 实现反转比较的效果.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">reverse</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> compareOriginal = <span class=\"variable language_\">this</span>.<span class=\"property\">compare</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">compare</span> = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> <span class=\"title function_\">compareOriginal</span>(b, a);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>Comparator</code>类种, <code>compareFunction</code>是一个可选参数, 可以传入自定义的比较函数. 如果没有传入比较函数, 则会使用默认的比较函数. <code>compareFunction</code>应该是一个函数, 接受两个参数<code>a</code>和<code>b</code>, 返回一个数字, 表示它们的比较结果.</p>\n<p>这个类的目的是为了提供一种方便的方式来进行比较操作, 以及在需要时动态地改变比较顺序.</p>\n<hr>\n<ul>\n<li>源码地址: <a href=\"https://github.com/trekhleb/javascript-algorithms/blob/master/src/utils/comparator/Comparator.js\">JavaScript Algorithms and Data Structures</a></li>\n</ul>\n","site":{"data":{}},"related_posts":["2023/11/02/data-structures-005-Stack/","2023/11/01/data-structures-004-queue/"],"length":478,"excerpt":"","more":"<p><code>Comparator</code> 类是一个用于比较两个值的工具类.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Comparator</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 类的构造函数, 接受一个可选的compareFunction参数, 用于自定义比较函数.</span></span><br><span class=\"line\"><span class=\"comment\">   * 如果没有传入compareFunction, 则会使用默认的比较函数.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">compareFunction</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">compare</span> = compareFunction || <span class=\"title class_\">Comparator</span>.<span class=\"property\">defaultCompareFunction</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 默认的比较函数, 假设a和b是字符串或数字.</span></span><br><span class=\"line\"><span class=\"comment\">   * 如果a 等于 b, 则返回0</span></span><br><span class=\"line\"><span class=\"comment\">   * 如果a 小于 b, 则返回-1</span></span><br><span class=\"line\"><span class=\"comment\">   * 如果a 大于 b, 则返回1</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">defaultCompareFunction</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a === b) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a &lt; b ? -<span class=\"number\">1</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 检查两个变量是否相等.</span></span><br><span class=\"line\"><span class=\"comment\">   * 内部调用this.compare(a, b), 如果返回值为0, 表示相等, 返回true; 否则返回false.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">equal</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">compare</span>(a, b) === <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 检查变量a是否小于b.</span></span><br><span class=\"line\"><span class=\"comment\">   * 内部调用this.compare(a, b), 如果返回值是-1, 表示a小于b, 返回true; 否则返回false</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">lessThan</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">compare</span>(a, b) &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 检查变量a是否大于b</span></span><br><span class=\"line\"><span class=\"comment\">   * 内部调用this.compare(a, b), 如果返回值为1, 表示a大于b, 返回true; 否则返回false</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">greaterThan</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">compare</span>(a, b) &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 检查变量a是否小于等于b.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">lessThanOrEqual</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">lessThan</span>(a, b) || <span class=\"variable language_\">this</span>.<span class=\"title function_\">equal</span>(a, b);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 检查变量a是否大于等于b</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">greaterThanOrEqual</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">greaterThan</span>(a, b) || <span class=\"variable language_\">this</span>.<span class=\"title function_\">equal</span>(a, b);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 反转比较顺序. 将当前的比较函数this.compare替换为compareOriginal(b, a), 实现反转比较的效果.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">reverse</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> compareOriginal = <span class=\"variable language_\">this</span>.<span class=\"property\">compare</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">compare</span> = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> <span class=\"title function_\">compareOriginal</span>(b, a);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>Comparator</code>类种, <code>compareFunction</code>是一个可选参数, 可以传入自定义的比较函数. 如果没有传入比较函数, 则会使用默认的比较函数. <code>compareFunction</code>应该是一个函数, 接受两个参数<code>a</code>和<code>b</code>, 返回一个数字, 表示它们的比较结果.</p>\n<p>这个类的目的是为了提供一种方便的方式来进行比较操作, 以及在需要时动态地改变比较顺序.</p>\n<hr>\n<ul>\n<li>源码地址: <a href=\"https://github.com/trekhleb/javascript-algorithms/blob/master/src/utils/comparator/Comparator.js\">JavaScript Algorithms and Data Structures</a></li>\n</ul>\n"},{"title":"JavaScript Algorithms and Data Structures 源码分析(4) -- 队列 Queue","date":"2023-11-01T07:38:19.000Z","_content":"\n## 队列\n\n在计算机科学中, 一个 **队列(queue)** 是一种特殊类型的抽象数据类型或集合。集合中的实体按顺序保存。\n\n队列基本操作有两种：入队和出队。从队列的后端位置添加实体，称为入队；从队列的前端位置移除实体，称为出队。\n\n队列中元素先进先出 FIFO (first in, first out)的示意\n\n<!-- more -->\n\n![Queue](../images/data-structures/queue.jpeg)\n\n```javascript\nexport default class Queue {\n  // 初始化队列\n  constructor() {\n    // 使用单向链表实现\n    // 创建一个空的单向链表\n    this.linkedList = new LinkedList();\n  }\n\n  /**\n   * 检查队列是否为空.\n   */\n  isEmpty() {\n    return !this.linkedList.head;\n  }\n\n  /**\n   * 查看队列头部的元素，但不移除它\n   * @return {*}\n   */\n  peek() {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    return this.linkedList.head.value;\n  }\n\n  /**\n   * 在队列的末尾添加一个元素.\n   */\n  enqueue(value) {\n    this.linkedList.append(value);\n  }\n\n  /**\n   * 从队列开头移除元素并返回它\n   */\n  dequeue() {\n    const removedHead = this.linkedList.deleteHead();\n    return removedHead ? removedHead.value : null;\n  }\n\n  /**\n   * 将队列转换为字符串形式\n   * @param [callback]\n   * @return {string}\n   */\n  toString(callback) {\n    return this.linkedList.toString(callback);\n  }\n}\n```\n\n---\n\n- 源码地址: [JavaScript Algorithms and Data Structures](https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/queue/Queue.js)\n","source":"_posts/data-structures-004-queue.md","raw":"---\ntitle: JavaScript Algorithms and Data Structures 源码分析(4) -- 队列 Queue\ndate: 2023-11-01 15:38:19\ntags:\n---\n\n## 队列\n\n在计算机科学中, 一个 **队列(queue)** 是一种特殊类型的抽象数据类型或集合。集合中的实体按顺序保存。\n\n队列基本操作有两种：入队和出队。从队列的后端位置添加实体，称为入队；从队列的前端位置移除实体，称为出队。\n\n队列中元素先进先出 FIFO (first in, first out)的示意\n\n<!-- more -->\n\n![Queue](../images/data-structures/queue.jpeg)\n\n```javascript\nexport default class Queue {\n  // 初始化队列\n  constructor() {\n    // 使用单向链表实现\n    // 创建一个空的单向链表\n    this.linkedList = new LinkedList();\n  }\n\n  /**\n   * 检查队列是否为空.\n   */\n  isEmpty() {\n    return !this.linkedList.head;\n  }\n\n  /**\n   * 查看队列头部的元素，但不移除它\n   * @return {*}\n   */\n  peek() {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    return this.linkedList.head.value;\n  }\n\n  /**\n   * 在队列的末尾添加一个元素.\n   */\n  enqueue(value) {\n    this.linkedList.append(value);\n  }\n\n  /**\n   * 从队列开头移除元素并返回它\n   */\n  dequeue() {\n    const removedHead = this.linkedList.deleteHead();\n    return removedHead ? removedHead.value : null;\n  }\n\n  /**\n   * 将队列转换为字符串形式\n   * @param [callback]\n   * @return {string}\n   */\n  toString(callback) {\n    return this.linkedList.toString(callback);\n  }\n}\n```\n\n---\n\n- 源码地址: [JavaScript Algorithms and Data Structures](https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/queue/Queue.js)\n","slug":"data-structures-004-queue","published":1,"updated":"2023-11-01T10:31:14.042Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clq4xe1d7000itz2hf8dve4nh","content":"<h2 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h2><p>在计算机科学中, 一个 <strong>队列(queue)</strong> 是一种特殊类型的抽象数据类型或集合。集合中的实体按顺序保存。</p>\n<p>队列基本操作有两种：入队和出队。从队列的后端位置添加实体，称为入队；从队列的前端位置移除实体，称为出队。</p>\n<p>队列中元素先进先出 FIFO (first in, first out)的示意</p>\n<span id=\"more\"></span>\n\n<p><img src=\"/../images/data-structures/queue.jpeg\" alt=\"Queue\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Queue</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化队列</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用单向链表实现</span></span><br><span class=\"line\">    <span class=\"comment\">// 创建一个空的单向链表</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">linkedList</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 检查队列是否为空.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">isEmpty</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !<span class=\"variable language_\">this</span>.<span class=\"property\">linkedList</span>.<span class=\"property\">head</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 查看队列头部的元素，但不移除它</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">*</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">peek</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"title function_\">isEmpty</span>()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">linkedList</span>.<span class=\"property\">head</span>.<span class=\"property\">value</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 在队列的末尾添加一个元素.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">enqueue</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">linkedList</span>.<span class=\"title function_\">append</span>(value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 从队列开头移除元素并返回它</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">dequeue</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> removedHead = <span class=\"variable language_\">this</span>.<span class=\"property\">linkedList</span>.<span class=\"title function_\">deleteHead</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> removedHead ? removedHead.<span class=\"property\">value</span> : <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 将队列转换为字符串形式</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> [callback]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">toString</span>(<span class=\"params\">callback</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">linkedList</span>.<span class=\"title function_\">toString</span>(callback);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>源码地址: <a href=\"https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/queue/Queue.js\">JavaScript Algorithms and Data Structures</a></li>\n</ul>\n","site":{"data":{}},"related_posts":["2023/11/02/data-structures-005-Stack/","2023/10/29/data-structures-001-comparator/"],"length":238,"excerpt":"<h2 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h2><p>在计算机科学中, 一个 <strong>队列(queue)</strong> 是一种特殊类型的抽象数据类型或集合。集合中的实体按顺序保存。</p>\n<p>队列基本操作有两种：入队和出队。从队列的后端位置添加实体，称为入队；从队列的前端位置移除实体，称为出队。</p>\n<p>队列中元素先进先出 FIFO (first in, first out)的示意</p>","more":"<p><img src=\"/../images/data-structures/queue.jpeg\" alt=\"Queue\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Queue</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化队列</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用单向链表实现</span></span><br><span class=\"line\">    <span class=\"comment\">// 创建一个空的单向链表</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">linkedList</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 检查队列是否为空.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">isEmpty</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !<span class=\"variable language_\">this</span>.<span class=\"property\">linkedList</span>.<span class=\"property\">head</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 查看队列头部的元素，但不移除它</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">*</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">peek</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"title function_\">isEmpty</span>()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">linkedList</span>.<span class=\"property\">head</span>.<span class=\"property\">value</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 在队列的末尾添加一个元素.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">enqueue</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">linkedList</span>.<span class=\"title function_\">append</span>(value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 从队列开头移除元素并返回它</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">dequeue</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> removedHead = <span class=\"variable language_\">this</span>.<span class=\"property\">linkedList</span>.<span class=\"title function_\">deleteHead</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> removedHead ? removedHead.<span class=\"property\">value</span> : <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 将队列转换为字符串形式</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> [callback]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">toString</span>(<span class=\"params\">callback</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">linkedList</span>.<span class=\"title function_\">toString</span>(callback);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>源码地址: <a href=\"https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/queue/Queue.js\">JavaScript Algorithms and Data Structures</a></li>\n</ul>"},{"title":"JavaScript Algorithms and Data Structures 源码分析(8) -- 优先队列 PriorityQueue","date":"2023-12-14T05:53:35.000Z","_content":"\n## 优先队列\n\n在计算机科学中, **优先级队列(priority queue)** 是一种抽象数据类型, 它类似于常规的队列或栈, 但每个元素都有与之关联的“优先级”。\n\n在优先队列中, 低优先级的元素之前前面应该是高优先级的元素。 如果两个元素具有相同的优先级, 则根据它们在队列中的顺序是它们的出现顺序即可。\n\n优先队列虽通常用堆来实现,但它在概念上与堆不同。优先队列是一个抽象概念，就像“列表”或“图”这样的抽象概念一样;\n\n正如列表可以用链表或数组实现一样，优先队列可以用堆或各种其他方法实现,例如无序数组。\n\n<!-- more -->\n\n## PriorityQueue 类\n\n### constructor() 初始化方法\n\n```javascript\nconstructor() {\n  // 首先调用 MinHip 类的构造函数。\n  super();\n\n  // 创建一个 Map 对象来存储优先级。\n  this.priorities = new Map();\n\n  // 使用自定义比较函数 comparePriority 创建一个 Comparator 对象，\n  // 用于在堆中对元素进行比较时考虑优先级而不是元素的值。\n  this.compare = new Comparator(this.comparePriority.bind(this));\n}\n```\n\n### add(item, priority = 0)方法\n\n```javascript\n/**\n * 将项添加到优先队列中。\n * @param {*} item - 要添加到队列中的项。\n * @param {number} [priority] - 项的优先级。\n * @return {PriorityQueue} - 返回优先队列本身。\n */\nadd(item, priority = 0) {\n  // 使用优先级映射将项及其优先级放入priorities映射中。\n  this.priorities.set(item, priority);\n  // 调用父类的add方法将项添加到队列中。\n  super.add(item);\n  // 返回优先队列本身。\n  return this;\n}\n```\n\n### remove(item, customFindingComparator) 方法\n\n```javascript\n/**\n * 从优先队列中移除元素。\n * @param {*} item - 要移除的元素。\n * @param {Comparator} [customFindingComparator] - 用于查找要移除元素的自定义函数。\n * @return {PriorityQueue} - 更新后的优先队列。\n */\nremove(item, customFindingComparator) {\n  // 调用父类（可能是PriorityQueue）的remove方法来移除元素。\n  super.remove(item, customFindingComparator);\n  // 从priorities集合中删除元素。\n  this.priorities.delete(item);\n  // 返回更新后的优先队列。\n  return this;\n}\n```\n\n### changePriority(item, priority) 方法\n\n```javascript\n/**\n * 改变队列中某个项目的优先级。\n * @param {*} item - 我们要重新设置优先级的项目。\n * @param {number} priority - 新的项目优先级。\n * @return {PriorityQueue} - 返回一个优先队列实例。\n */\nchangePriority(item, priority) {\n  // 使用比较器通过比较值来移除队列中的项目。\n  this.remove(item, new Comparator(this.compareValue));\n  // 将项目以新的优先级添加回队列。\n  this.add(item, priority);\n  // 返回当前优先队列实例。\n  return this;\n}\n```\n\n### findByValue(item)方法\n\n```javascript\n/**\n * 通过值查找项目。\n * @param {*} item - 要查找的项目\n * @return {Number[]} - 返回包含数字的数组\n */\nfindByValue(item) {\n  // 调用 find 方法，并传入 item 和一个使用 compareValue 方法作为参数的 Comparator 对象\n  return this.find(item, new Comparator(this.compareValue));\n}\n```\n\n### hasValue(item) 方法\n\n```javascript\n/**\n * 检查项目是否已经存在于队列中。\n * @param {*} item - 要检查的项目。\n * @return {boolean} - 如果项目存在于队列中，则返回true；否则返回false。\n */\nhasValue(item) {\n  // 调用findByValue方法查找项目，返回一个数字数组。\n  return this.findByValue(item).length > 0;\n}\n```\n\n### comparePriority(a, b) 方法\n\n```javascript\n/**\n * Compares priorities of two items.\n * 比较两个元素的优先级。\n * @param {*} a\n * @param {*} b\n * @return {number}\n */\ncomparePriority(a, b) {\n  // Check if the priorities of `a` and `b` are equal.\n  // 检查元素 `a` 和 `b` 的优先级是否相等。\n  if (this.priorities.get(a) === this.priorities.get(b)) {\n    // If they are equal, return 0.\n    // 如果它们相等，则返回 0。\n    return 0;\n  }\n  // Compare the priorities using the `get` method of the `priorities` map.\n  // 使用 `priorities` map 的 `get` 方法比较优先级。\n  // If the priority of `a` is less than the priority of `b`, return -1,\n  // 如果 `a` 的优先级小于 `b` 的优先级，则返回 -1，\n  // otherwise return 1.\n  // 否则返回 1。\n  return this.priorities.get(a) < this.priorities.get(b) ? -1 : 1;\n}\n```\n\n### compareValue(a, b) 方法\n\n```javascript\n/**\n * 比较两个值的大小。\n * @param {*} a - 第一个值\n * @param {*} b - 第二个值\n * @return {number} - 返回比较结果的数值\n */\ncompareValue(a, b) {\n  // 如果 a 和 b 相等，则返回 0\n  if (a === b) {\n    return 0;\n  }\n  // 如果 a 小于 b，则返回 -1，否则返回 1\n  return a < b ? -1 : 1;\n}\n```\n","source":"_posts/data-structures-008-PriorityQueue.md","raw":"---\ntitle: JavaScript Algorithms and Data Structures 源码分析(8) -- 优先队列 PriorityQueue\ndate: 2023-12-14 13:53:35\ntags:\n  - data structures\ncategories:\n  - 数据结构与算法\n---\n\n## 优先队列\n\n在计算机科学中, **优先级队列(priority queue)** 是一种抽象数据类型, 它类似于常规的队列或栈, 但每个元素都有与之关联的“优先级”。\n\n在优先队列中, 低优先级的元素之前前面应该是高优先级的元素。 如果两个元素具有相同的优先级, 则根据它们在队列中的顺序是它们的出现顺序即可。\n\n优先队列虽通常用堆来实现,但它在概念上与堆不同。优先队列是一个抽象概念，就像“列表”或“图”这样的抽象概念一样;\n\n正如列表可以用链表或数组实现一样，优先队列可以用堆或各种其他方法实现,例如无序数组。\n\n<!-- more -->\n\n## PriorityQueue 类\n\n### constructor() 初始化方法\n\n```javascript\nconstructor() {\n  // 首先调用 MinHip 类的构造函数。\n  super();\n\n  // 创建一个 Map 对象来存储优先级。\n  this.priorities = new Map();\n\n  // 使用自定义比较函数 comparePriority 创建一个 Comparator 对象，\n  // 用于在堆中对元素进行比较时考虑优先级而不是元素的值。\n  this.compare = new Comparator(this.comparePriority.bind(this));\n}\n```\n\n### add(item, priority = 0)方法\n\n```javascript\n/**\n * 将项添加到优先队列中。\n * @param {*} item - 要添加到队列中的项。\n * @param {number} [priority] - 项的优先级。\n * @return {PriorityQueue} - 返回优先队列本身。\n */\nadd(item, priority = 0) {\n  // 使用优先级映射将项及其优先级放入priorities映射中。\n  this.priorities.set(item, priority);\n  // 调用父类的add方法将项添加到队列中。\n  super.add(item);\n  // 返回优先队列本身。\n  return this;\n}\n```\n\n### remove(item, customFindingComparator) 方法\n\n```javascript\n/**\n * 从优先队列中移除元素。\n * @param {*} item - 要移除的元素。\n * @param {Comparator} [customFindingComparator] - 用于查找要移除元素的自定义函数。\n * @return {PriorityQueue} - 更新后的优先队列。\n */\nremove(item, customFindingComparator) {\n  // 调用父类（可能是PriorityQueue）的remove方法来移除元素。\n  super.remove(item, customFindingComparator);\n  // 从priorities集合中删除元素。\n  this.priorities.delete(item);\n  // 返回更新后的优先队列。\n  return this;\n}\n```\n\n### changePriority(item, priority) 方法\n\n```javascript\n/**\n * 改变队列中某个项目的优先级。\n * @param {*} item - 我们要重新设置优先级的项目。\n * @param {number} priority - 新的项目优先级。\n * @return {PriorityQueue} - 返回一个优先队列实例。\n */\nchangePriority(item, priority) {\n  // 使用比较器通过比较值来移除队列中的项目。\n  this.remove(item, new Comparator(this.compareValue));\n  // 将项目以新的优先级添加回队列。\n  this.add(item, priority);\n  // 返回当前优先队列实例。\n  return this;\n}\n```\n\n### findByValue(item)方法\n\n```javascript\n/**\n * 通过值查找项目。\n * @param {*} item - 要查找的项目\n * @return {Number[]} - 返回包含数字的数组\n */\nfindByValue(item) {\n  // 调用 find 方法，并传入 item 和一个使用 compareValue 方法作为参数的 Comparator 对象\n  return this.find(item, new Comparator(this.compareValue));\n}\n```\n\n### hasValue(item) 方法\n\n```javascript\n/**\n * 检查项目是否已经存在于队列中。\n * @param {*} item - 要检查的项目。\n * @return {boolean} - 如果项目存在于队列中，则返回true；否则返回false。\n */\nhasValue(item) {\n  // 调用findByValue方法查找项目，返回一个数字数组。\n  return this.findByValue(item).length > 0;\n}\n```\n\n### comparePriority(a, b) 方法\n\n```javascript\n/**\n * Compares priorities of two items.\n * 比较两个元素的优先级。\n * @param {*} a\n * @param {*} b\n * @return {number}\n */\ncomparePriority(a, b) {\n  // Check if the priorities of `a` and `b` are equal.\n  // 检查元素 `a` 和 `b` 的优先级是否相等。\n  if (this.priorities.get(a) === this.priorities.get(b)) {\n    // If they are equal, return 0.\n    // 如果它们相等，则返回 0。\n    return 0;\n  }\n  // Compare the priorities using the `get` method of the `priorities` map.\n  // 使用 `priorities` map 的 `get` 方法比较优先级。\n  // If the priority of `a` is less than the priority of `b`, return -1,\n  // 如果 `a` 的优先级小于 `b` 的优先级，则返回 -1，\n  // otherwise return 1.\n  // 否则返回 1。\n  return this.priorities.get(a) < this.priorities.get(b) ? -1 : 1;\n}\n```\n\n### compareValue(a, b) 方法\n\n```javascript\n/**\n * 比较两个值的大小。\n * @param {*} a - 第一个值\n * @param {*} b - 第二个值\n * @return {number} - 返回比较结果的数值\n */\ncompareValue(a, b) {\n  // 如果 a 和 b 相等，则返回 0\n  if (a === b) {\n    return 0;\n  }\n  // 如果 a 小于 b，则返回 -1，否则返回 1\n  return a < b ? -1 : 1;\n}\n```\n","slug":"data-structures-008-PriorityQueue","published":1,"updated":"2023-12-14T05:55:26.494Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clq4xe1d7000ltz2h6ridexu4","content":"<h2 id=\"优先队列\"><a href=\"#优先队列\" class=\"headerlink\" title=\"优先队列\"></a>优先队列</h2><p>在计算机科学中, <strong>优先级队列(priority queue)</strong> 是一种抽象数据类型, 它类似于常规的队列或栈, 但每个元素都有与之关联的“优先级”。</p>\n<p>在优先队列中, 低优先级的元素之前前面应该是高优先级的元素。 如果两个元素具有相同的优先级, 则根据它们在队列中的顺序是它们的出现顺序即可。</p>\n<p>优先队列虽通常用堆来实现,但它在概念上与堆不同。优先队列是一个抽象概念，就像“列表”或“图”这样的抽象概念一样;</p>\n<p>正如列表可以用链表或数组实现一样，优先队列可以用堆或各种其他方法实现,例如无序数组。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"PriorityQueue-类\"><a href=\"#PriorityQueue-类\" class=\"headerlink\" title=\"PriorityQueue 类\"></a>PriorityQueue 类</h2><h3 id=\"constructor-初始化方法\"><a href=\"#constructor-初始化方法\" class=\"headerlink\" title=\"constructor() 初始化方法\"></a>constructor() 初始化方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 首先调用 MinHip 类的构造函数。</span></span><br><span class=\"line\">  <span class=\"variable language_\">super</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 创建一个 Map 对象来存储优先级。</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">priorities</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 使用自定义比较函数 comparePriority 创建一个 Comparator 对象，</span></span><br><span class=\"line\">  <span class=\"comment\">// 用于在堆中对元素进行比较时考虑优先级而不是元素的值。</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">compare</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">comparePriority</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"add-item-priority-0-方法\"><a href=\"#add-item-priority-0-方法\" class=\"headerlink\" title=\"add(item, priority &#x3D; 0)方法\"></a>add(item, priority &#x3D; 0)方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将项添加到优先队列中。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">item</span> - 要添加到队列中的项。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; [priority] - 项的优先级。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">PriorityQueue</span>&#125; - 返回优先队列本身。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">add</span>(<span class=\"params\">item, priority = <span class=\"number\">0</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用优先级映射将项及其优先级放入priorities映射中。</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">priorities</span>.<span class=\"title function_\">set</span>(item, priority);</span><br><span class=\"line\">  <span class=\"comment\">// 调用父类的add方法将项添加到队列中。</span></span><br><span class=\"line\">  <span class=\"variable language_\">super</span>.<span class=\"title function_\">add</span>(item);</span><br><span class=\"line\">  <span class=\"comment\">// 返回优先队列本身。</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"remove-item-customFindingComparator-方法\"><a href=\"#remove-item-customFindingComparator-方法\" class=\"headerlink\" title=\"remove(item, customFindingComparator) 方法\"></a>remove(item, customFindingComparator) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 从优先队列中移除元素。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">item</span> - 要移除的元素。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Comparator</span>&#125; [customFindingComparator] - 用于查找要移除元素的自定义函数。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">PriorityQueue</span>&#125; - 更新后的优先队列。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">remove</span>(<span class=\"params\">item, customFindingComparator</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 调用父类（可能是PriorityQueue）的remove方法来移除元素。</span></span><br><span class=\"line\">  <span class=\"variable language_\">super</span>.<span class=\"title function_\">remove</span>(item, customFindingComparator);</span><br><span class=\"line\">  <span class=\"comment\">// 从priorities集合中删除元素。</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">priorities</span>.<span class=\"title function_\">delete</span>(item);</span><br><span class=\"line\">  <span class=\"comment\">// 返回更新后的优先队列。</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"changePriority-item-priority-方法\"><a href=\"#changePriority-item-priority-方法\" class=\"headerlink\" title=\"changePriority(item, priority) 方法\"></a>changePriority(item, priority) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 改变队列中某个项目的优先级。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">item</span> - 我们要重新设置优先级的项目。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">priority</span> - 新的项目优先级。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">PriorityQueue</span>&#125; - 返回一个优先队列实例。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">changePriority</span>(<span class=\"params\">item, priority</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用比较器通过比较值来移除队列中的项目。</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">remove</span>(item, <span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">compareValue</span>));</span><br><span class=\"line\">  <span class=\"comment\">// 将项目以新的优先级添加回队列。</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">add</span>(item, priority);</span><br><span class=\"line\">  <span class=\"comment\">// 返回当前优先队列实例。</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"findByValue-item-方法\"><a href=\"#findByValue-item-方法\" class=\"headerlink\" title=\"findByValue(item)方法\"></a>findByValue(item)方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过值查找项目。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">item</span> - 要查找的项目</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">Number[]</span>&#125; - 返回包含数字的数组</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">findByValue</span>(<span class=\"params\">item</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 调用 find 方法，并传入 item 和一个使用 compareValue 方法作为参数的 Comparator 对象</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">find</span>(item, <span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">compareValue</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hasValue-item-方法\"><a href=\"#hasValue-item-方法\" class=\"headerlink\" title=\"hasValue(item) 方法\"></a>hasValue(item) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 检查项目是否已经存在于队列中。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">item</span> - 要检查的项目。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125; - 如果项目存在于队列中，则返回true；否则返回false。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">hasValue</span>(<span class=\"params\">item</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 调用findByValue方法查找项目，返回一个数字数组。</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">findByValue</span>(item).<span class=\"property\">length</span> &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"comparePriority-a-b-方法\"><a href=\"#comparePriority-a-b-方法\" class=\"headerlink\" title=\"comparePriority(a, b) 方法\"></a>comparePriority(a, b) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Compares priorities of two items.</span></span><br><span class=\"line\"><span class=\"comment\"> * 比较两个元素的优先级。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">a</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">b</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">comparePriority</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Check if the priorities of `a` and `b` are equal.</span></span><br><span class=\"line\">  <span class=\"comment\">// 检查元素 `a` 和 `b` 的优先级是否相等。</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">priorities</span>.<span class=\"title function_\">get</span>(a) === <span class=\"variable language_\">this</span>.<span class=\"property\">priorities</span>.<span class=\"title function_\">get</span>(b)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// If they are equal, return 0.</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果它们相等，则返回 0。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Compare the priorities using the `get` method of the `priorities` map.</span></span><br><span class=\"line\">  <span class=\"comment\">// 使用 `priorities` map 的 `get` 方法比较优先级。</span></span><br><span class=\"line\">  <span class=\"comment\">// If the priority of `a` is less than the priority of `b`, return -1,</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果 `a` 的优先级小于 `b` 的优先级，则返回 -1，</span></span><br><span class=\"line\">  <span class=\"comment\">// otherwise return 1.</span></span><br><span class=\"line\">  <span class=\"comment\">// 否则返回 1。</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">priorities</span>.<span class=\"title function_\">get</span>(a) &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">priorities</span>.<span class=\"title function_\">get</span>(b) ? -<span class=\"number\">1</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"compareValue-a-b-方法\"><a href=\"#compareValue-a-b-方法\" class=\"headerlink\" title=\"compareValue(a, b) 方法\"></a>compareValue(a, b) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 比较两个值的大小。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">a</span> - 第一个值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">b</span> - 第二个值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125; - 返回比较结果的数值</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">compareValue</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果 a 和 b 相等，则返回 0</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (a === b) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 如果 a 小于 b，则返回 -1，否则返回 1</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> a &lt; b ? -<span class=\"number\">1</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"related_posts":[],"length":961,"excerpt":"<h2 id=\"优先队列\"><a href=\"#优先队列\" class=\"headerlink\" title=\"优先队列\"></a>优先队列</h2><p>在计算机科学中, <strong>优先级队列(priority queue)</strong> 是一种抽象数据类型, 它类似于常规的队列或栈, 但每个元素都有与之关联的“优先级”。</p>\n<p>在优先队列中, 低优先级的元素之前前面应该是高优先级的元素。 如果两个元素具有相同的优先级, 则根据它们在队列中的顺序是它们的出现顺序即可。</p>\n<p>优先队列虽通常用堆来实现,但它在概念上与堆不同。优先队列是一个抽象概念，就像“列表”或“图”这样的抽象概念一样;</p>\n<p>正如列表可以用链表或数组实现一样，优先队列可以用堆或各种其他方法实现,例如无序数组。</p>","more":"<h2 id=\"PriorityQueue-类\"><a href=\"#PriorityQueue-类\" class=\"headerlink\" title=\"PriorityQueue 类\"></a>PriorityQueue 类</h2><h3 id=\"constructor-初始化方法\"><a href=\"#constructor-初始化方法\" class=\"headerlink\" title=\"constructor() 初始化方法\"></a>constructor() 初始化方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 首先调用 MinHip 类的构造函数。</span></span><br><span class=\"line\">  <span class=\"variable language_\">super</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 创建一个 Map 对象来存储优先级。</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">priorities</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 使用自定义比较函数 comparePriority 创建一个 Comparator 对象，</span></span><br><span class=\"line\">  <span class=\"comment\">// 用于在堆中对元素进行比较时考虑优先级而不是元素的值。</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">compare</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">comparePriority</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"add-item-priority-0-方法\"><a href=\"#add-item-priority-0-方法\" class=\"headerlink\" title=\"add(item, priority &#x3D; 0)方法\"></a>add(item, priority &#x3D; 0)方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将项添加到优先队列中。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">item</span> - 要添加到队列中的项。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; [priority] - 项的优先级。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">PriorityQueue</span>&#125; - 返回优先队列本身。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">add</span>(<span class=\"params\">item, priority = <span class=\"number\">0</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用优先级映射将项及其优先级放入priorities映射中。</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">priorities</span>.<span class=\"title function_\">set</span>(item, priority);</span><br><span class=\"line\">  <span class=\"comment\">// 调用父类的add方法将项添加到队列中。</span></span><br><span class=\"line\">  <span class=\"variable language_\">super</span>.<span class=\"title function_\">add</span>(item);</span><br><span class=\"line\">  <span class=\"comment\">// 返回优先队列本身。</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"remove-item-customFindingComparator-方法\"><a href=\"#remove-item-customFindingComparator-方法\" class=\"headerlink\" title=\"remove(item, customFindingComparator) 方法\"></a>remove(item, customFindingComparator) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 从优先队列中移除元素。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">item</span> - 要移除的元素。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Comparator</span>&#125; [customFindingComparator] - 用于查找要移除元素的自定义函数。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">PriorityQueue</span>&#125; - 更新后的优先队列。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">remove</span>(<span class=\"params\">item, customFindingComparator</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 调用父类（可能是PriorityQueue）的remove方法来移除元素。</span></span><br><span class=\"line\">  <span class=\"variable language_\">super</span>.<span class=\"title function_\">remove</span>(item, customFindingComparator);</span><br><span class=\"line\">  <span class=\"comment\">// 从priorities集合中删除元素。</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">priorities</span>.<span class=\"title function_\">delete</span>(item);</span><br><span class=\"line\">  <span class=\"comment\">// 返回更新后的优先队列。</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"changePriority-item-priority-方法\"><a href=\"#changePriority-item-priority-方法\" class=\"headerlink\" title=\"changePriority(item, priority) 方法\"></a>changePriority(item, priority) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 改变队列中某个项目的优先级。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">item</span> - 我们要重新设置优先级的项目。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">priority</span> - 新的项目优先级。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">PriorityQueue</span>&#125; - 返回一个优先队列实例。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">changePriority</span>(<span class=\"params\">item, priority</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用比较器通过比较值来移除队列中的项目。</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">remove</span>(item, <span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">compareValue</span>));</span><br><span class=\"line\">  <span class=\"comment\">// 将项目以新的优先级添加回队列。</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">add</span>(item, priority);</span><br><span class=\"line\">  <span class=\"comment\">// 返回当前优先队列实例。</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"findByValue-item-方法\"><a href=\"#findByValue-item-方法\" class=\"headerlink\" title=\"findByValue(item)方法\"></a>findByValue(item)方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过值查找项目。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">item</span> - 要查找的项目</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">Number[]</span>&#125; - 返回包含数字的数组</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">findByValue</span>(<span class=\"params\">item</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 调用 find 方法，并传入 item 和一个使用 compareValue 方法作为参数的 Comparator 对象</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">find</span>(item, <span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">compareValue</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hasValue-item-方法\"><a href=\"#hasValue-item-方法\" class=\"headerlink\" title=\"hasValue(item) 方法\"></a>hasValue(item) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 检查项目是否已经存在于队列中。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">item</span> - 要检查的项目。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125; - 如果项目存在于队列中，则返回true；否则返回false。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">hasValue</span>(<span class=\"params\">item</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 调用findByValue方法查找项目，返回一个数字数组。</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">findByValue</span>(item).<span class=\"property\">length</span> &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"comparePriority-a-b-方法\"><a href=\"#comparePriority-a-b-方法\" class=\"headerlink\" title=\"comparePriority(a, b) 方法\"></a>comparePriority(a, b) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Compares priorities of two items.</span></span><br><span class=\"line\"><span class=\"comment\"> * 比较两个元素的优先级。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">a</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">b</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">comparePriority</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Check if the priorities of `a` and `b` are equal.</span></span><br><span class=\"line\">  <span class=\"comment\">// 检查元素 `a` 和 `b` 的优先级是否相等。</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">priorities</span>.<span class=\"title function_\">get</span>(a) === <span class=\"variable language_\">this</span>.<span class=\"property\">priorities</span>.<span class=\"title function_\">get</span>(b)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// If they are equal, return 0.</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果它们相等，则返回 0。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Compare the priorities using the `get` method of the `priorities` map.</span></span><br><span class=\"line\">  <span class=\"comment\">// 使用 `priorities` map 的 `get` 方法比较优先级。</span></span><br><span class=\"line\">  <span class=\"comment\">// If the priority of `a` is less than the priority of `b`, return -1,</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果 `a` 的优先级小于 `b` 的优先级，则返回 -1，</span></span><br><span class=\"line\">  <span class=\"comment\">// otherwise return 1.</span></span><br><span class=\"line\">  <span class=\"comment\">// 否则返回 1。</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">priorities</span>.<span class=\"title function_\">get</span>(a) &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">priorities</span>.<span class=\"title function_\">get</span>(b) ? -<span class=\"number\">1</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"compareValue-a-b-方法\"><a href=\"#compareValue-a-b-方法\" class=\"headerlink\" title=\"compareValue(a, b) 方法\"></a>compareValue(a, b) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 比较两个值的大小。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">a</span> - 第一个值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">b</span> - 第二个值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125; - 返回比较结果的数值</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">compareValue</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果 a 和 b 相等，则返回 0</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (a === b) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 如果 a 小于 b，则返回 -1，否则返回 1</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> a &lt; b ? -<span class=\"number\">1</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"JavaScript Algorithms and Data Structures 源码分析(6) -- 哈希表(散列) Hash-table","date":"2023-11-24T07:59:01.000Z","_content":"\n## 哈希表\n\n在计算中, 一个 **哈希表(hash table 或 hash map)** 是一种实现 _关联数组(associative array)_\n的抽象数据类型, 该结构可以将 _键映射到值_。\n\n哈希表使用 _哈希函数/散列函数_ 来计算一个值在数组或桶(buckets)中或槽(slots)中对应的索引,可使用该索引找到所需的值。\n\n理想情况下,散列函数将为每个键分配给一个唯一的桶(bucket),但是大多数哈希表设计采用不完美的散列函数,这可能会导致\"哈希冲突(hash collisions)\",也就是散列函数为多个键(key)生成了相同的索引,这种碰撞必须\n以某种方式进行处理。\n\n<!-- more -->\n\n![Hash Table](../images/data-structures/hash-table.jpeg)\n\n通过单独的链接解决哈希冲突\n\n![Hash Collision](../images/data-structures/collision-resolution.jpeg)\n\n### 构造函数 constructor\n\n```javascript\n/**\n * @param {number} hashTableSize 哈希表大小\n */\nconstructor(hashTableSize = defaultHashTableSize) {\n  // 创建指定大小的哈希表，并将每个桶填充为空的链表\n  this.buckets = Array(hashTableSize).fill(null).map(() => new LinkedList());\n\n  // 用于快速追踪哈希表中的所有实际键\n  this.keys = {};\n}\n```\n\n### hash(key) 方法\n\n```javascript\n/**\n * 将键字符串转换为哈希数。\n *\n * @param {string} key 键字符串\n * @return {number} 哈希数\n */\nhash(key) {\n  // 为了简单起见，我们将使用键字符串中所有字符的字符编码之和来计算哈希。\n  //\n  // 但是你也可以使用更复杂的方法，比如多项式字符串哈希，以减少冲突的数量：\n  //\n  // hash = charCodeAt(0) * PRIME^(n-1) + charCodeAt(1) * PRIME^(n-2) + ... + charCodeAt(n-1)\n  //\n  // 其中 charCodeAt(i) 是键字符串的第i个字符的字符编码，n 是键字符串的长度，PRIME 是任何一个素数，比如 31。\n  const hash = Array.from(key).reduce(\n    // 使用 reduce 函数来计算字符编码的累加和\n    (hashAccumulator, keySymbol) => (hashAccumulator + keySymbol.charCodeAt(0)),\n    0,\n  );\n\n  // 将哈希数缩小到哈希表的大小范围内。\n  return hash % this.buckets.length;\n}\n```\n\n用于将给定的键字符串转换为哈希数.\n通过对键字符串中所有字符的字符编码进行累加，得到哈希数。然后使用取模运算符将哈希数缩小到哈希表的大小范围内。\n\n### set(key, value) 方法\n\n```javascript\n/**\n * @param {string} key\n * @param {*} value\n */\nset(key, value) {\n  // 将输入的键计算出哈希值\n  const keyHash = this.hash(key);\n  // 将键和对应的哈希值存储到键值对中\n  this.keys[key] = keyHash;\n  // 找到哈希值对应的桶\n  const bucketLinkedList = this.buckets[keyHash];\n  // 在桶中查找是否存在相同的键\n  const node = bucketLinkedList.find({ callback: (nodeValue) => nodeValue.key === key });\n\n  if (!node) {\n    // 如果不存在相同的键，则在桶中添加新的节点\n    bucketLinkedList.append({ key, value });\n  } else {\n    // 如果存在相同的键，则更新已存在节点的值\n    node.value.value = value;\n  }\n}\n```\n\n这个方法的作用是向哈希表中添加或更新键值对。它接受一个键和一个值作为参数，并根据键的哈希值找到对应的桶。然后，它检查桶中是否已经存在相同的键。如果存在相同的键，则更新已存在节点的值为新的值。如果不存在相同的键，则在桶的末尾添加一个新的节点，该节点包含新的键和值。这样，通过调用 `set` 方法，可以将键值对添加到哈希表中，或者更新已存在键的值。\n\n### delete(key) 方法\n\n```javascript\n/**\n * @param {string} key\n * @return {*}\n */\ndelete(key) {\n  // 计算 key 的哈希值\n  const keyHash = this.hash(key);\n  // 从 keys 对象中删除指定的 key\n  delete this.keys[key];\n  // 获取对应哈希值的链表\n  const bucketLinkedList = this.buckets[keyHash];\n  // 在链表中查找具有相同 key 的节点\n  const node = bucketLinkedList.find({ callback: (nodeValue) => nodeValue.key === key });\n\n  // 如果找到了节点\n  if (node) {\n    // 从链表中删除该节点\n    return bucketLinkedList.delete(node.value);\n  }\n\n  // 如果没有找到节点，则返回 null\n  return null;\n}\n```\n\n作用是从哈希表中删除指定的键值对。它接收一个键值作为参数，并根据键值的哈希值在哈希表中找到相应的链表。然后，它在链表中查找具有相同键值的节点，并将其从链表中删除。最后，它返回被删除的节点，如果没有找到匹配的节点，则返回 `null`。\n\n### get(key) 方法\n\n```javascript\n/**\n * @param {string} key\n * @return {*}\n */\nget(key) {\n  // 根据 key 的哈希值找到对应的桶（链表）\n  const bucketLinkedList = this.buckets[this.hash(key)];\n  // 在桶（链表）中查找具有相同 key 的节点\n  const node = bucketLinkedList.find({ callback: (nodeValue) => nodeValue.key === key });\n\n  // 如果找到了节点，则返回节点的值；否则返回 undefined\n  return node ? node.value.value : undefined;\n}\n```\n\n这个方法的作用是从哈希表中获取与给定键相关联的值。它通过计算键的哈希值，找到对应的桶（链表），然后在桶中查找具有相同键的节点。如果找到了节点，则返回节点的值；否则返回 `undefined`。简而言之，这个方法实现了哈希表的查询功能。\n\n### has(key) 方法\n\n```javascript\n/**\n * @param {string} key\n * @return {boolean}\n */\nhas(key) {\n  // 使用 Object 的 hasOwnProperty 方法来检查 key 是否存在于 this.keys 中\n  return Object.hasOwnProperty.call(this.keys, key);\n}\n```\n\n这个方法的作用是检查给定的 `key` 是否存在于当前对象的 `keys` 属性中。它返回一个布尔值，如果 `key` 存在，则返回 `true`，否则返回 `false`。这个方法可以帮助我们判断一个特定的键是否存在于对象中。\n\n### getKeys() 方法\n\n```javascript\n/**\n * @return {string[]}\n */\ngetKeys() {\n  // 使用 Object.keys() 方法提取 this.keys 对象的所有键，并将它们作为一个数组返回\n  return Object.keys(this.keys);\n}\n```\n\n这个方法的作用是获取 `this.keys` 对象的所有键，并以字符串数组的形式返回这些键。它可以帮助你在需要获取对象键的时候，快速地获取到这些键的列表。\n\n### getValues() 方法\n\n```javascript\n/**\n * 获取哈希表中存储的所有值的列表。\n *\n * @return {*[]}\n */\ngetValues() {\n  return this.buckets.reduce((values, bucket) => {\n    // 将每个桶中的链表节点转换为对应的值，并添加到数组中\n    const bucketValues = bucket.toArray()\n      .map((linkedListNode) => linkedListNode.value.value);\n    // 将所有的值合并到一个数组中\n    return values.concat(bucketValues);\n  }, []);\n}\n```\n\n这个方法的作用是获取哈希表中存储的所有值的列表。它通过遍历哈希表中的每个桶，并将每个桶中的链表节点转换为对应的值，然后将所有的值添加到一个数组中，并返回该数组。这样，我们就可以轻松地获取哈希表中所有存储的值。\n\n---\n\n- 源码地址: [JavaScript Algorithms and Data Structures](https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/hash-table/HashTable.js)\n","source":"_posts/data-structures-006-HashTable.md","raw":"---\ntitle: JavaScript Algorithms and Data Structures 源码分析(6) -- 哈希表(散列) Hash-table\ndate: 2023-11-24 15:59:01\ntags:\n  - data structures\ncategories:\n  - 数据结构与算法\n---\n\n## 哈希表\n\n在计算中, 一个 **哈希表(hash table 或 hash map)** 是一种实现 _关联数组(associative array)_\n的抽象数据类型, 该结构可以将 _键映射到值_。\n\n哈希表使用 _哈希函数/散列函数_ 来计算一个值在数组或桶(buckets)中或槽(slots)中对应的索引,可使用该索引找到所需的值。\n\n理想情况下,散列函数将为每个键分配给一个唯一的桶(bucket),但是大多数哈希表设计采用不完美的散列函数,这可能会导致\"哈希冲突(hash collisions)\",也就是散列函数为多个键(key)生成了相同的索引,这种碰撞必须\n以某种方式进行处理。\n\n<!-- more -->\n\n![Hash Table](../images/data-structures/hash-table.jpeg)\n\n通过单独的链接解决哈希冲突\n\n![Hash Collision](../images/data-structures/collision-resolution.jpeg)\n\n### 构造函数 constructor\n\n```javascript\n/**\n * @param {number} hashTableSize 哈希表大小\n */\nconstructor(hashTableSize = defaultHashTableSize) {\n  // 创建指定大小的哈希表，并将每个桶填充为空的链表\n  this.buckets = Array(hashTableSize).fill(null).map(() => new LinkedList());\n\n  // 用于快速追踪哈希表中的所有实际键\n  this.keys = {};\n}\n```\n\n### hash(key) 方法\n\n```javascript\n/**\n * 将键字符串转换为哈希数。\n *\n * @param {string} key 键字符串\n * @return {number} 哈希数\n */\nhash(key) {\n  // 为了简单起见，我们将使用键字符串中所有字符的字符编码之和来计算哈希。\n  //\n  // 但是你也可以使用更复杂的方法，比如多项式字符串哈希，以减少冲突的数量：\n  //\n  // hash = charCodeAt(0) * PRIME^(n-1) + charCodeAt(1) * PRIME^(n-2) + ... + charCodeAt(n-1)\n  //\n  // 其中 charCodeAt(i) 是键字符串的第i个字符的字符编码，n 是键字符串的长度，PRIME 是任何一个素数，比如 31。\n  const hash = Array.from(key).reduce(\n    // 使用 reduce 函数来计算字符编码的累加和\n    (hashAccumulator, keySymbol) => (hashAccumulator + keySymbol.charCodeAt(0)),\n    0,\n  );\n\n  // 将哈希数缩小到哈希表的大小范围内。\n  return hash % this.buckets.length;\n}\n```\n\n用于将给定的键字符串转换为哈希数.\n通过对键字符串中所有字符的字符编码进行累加，得到哈希数。然后使用取模运算符将哈希数缩小到哈希表的大小范围内。\n\n### set(key, value) 方法\n\n```javascript\n/**\n * @param {string} key\n * @param {*} value\n */\nset(key, value) {\n  // 将输入的键计算出哈希值\n  const keyHash = this.hash(key);\n  // 将键和对应的哈希值存储到键值对中\n  this.keys[key] = keyHash;\n  // 找到哈希值对应的桶\n  const bucketLinkedList = this.buckets[keyHash];\n  // 在桶中查找是否存在相同的键\n  const node = bucketLinkedList.find({ callback: (nodeValue) => nodeValue.key === key });\n\n  if (!node) {\n    // 如果不存在相同的键，则在桶中添加新的节点\n    bucketLinkedList.append({ key, value });\n  } else {\n    // 如果存在相同的键，则更新已存在节点的值\n    node.value.value = value;\n  }\n}\n```\n\n这个方法的作用是向哈希表中添加或更新键值对。它接受一个键和一个值作为参数，并根据键的哈希值找到对应的桶。然后，它检查桶中是否已经存在相同的键。如果存在相同的键，则更新已存在节点的值为新的值。如果不存在相同的键，则在桶的末尾添加一个新的节点，该节点包含新的键和值。这样，通过调用 `set` 方法，可以将键值对添加到哈希表中，或者更新已存在键的值。\n\n### delete(key) 方法\n\n```javascript\n/**\n * @param {string} key\n * @return {*}\n */\ndelete(key) {\n  // 计算 key 的哈希值\n  const keyHash = this.hash(key);\n  // 从 keys 对象中删除指定的 key\n  delete this.keys[key];\n  // 获取对应哈希值的链表\n  const bucketLinkedList = this.buckets[keyHash];\n  // 在链表中查找具有相同 key 的节点\n  const node = bucketLinkedList.find({ callback: (nodeValue) => nodeValue.key === key });\n\n  // 如果找到了节点\n  if (node) {\n    // 从链表中删除该节点\n    return bucketLinkedList.delete(node.value);\n  }\n\n  // 如果没有找到节点，则返回 null\n  return null;\n}\n```\n\n作用是从哈希表中删除指定的键值对。它接收一个键值作为参数，并根据键值的哈希值在哈希表中找到相应的链表。然后，它在链表中查找具有相同键值的节点，并将其从链表中删除。最后，它返回被删除的节点，如果没有找到匹配的节点，则返回 `null`。\n\n### get(key) 方法\n\n```javascript\n/**\n * @param {string} key\n * @return {*}\n */\nget(key) {\n  // 根据 key 的哈希值找到对应的桶（链表）\n  const bucketLinkedList = this.buckets[this.hash(key)];\n  // 在桶（链表）中查找具有相同 key 的节点\n  const node = bucketLinkedList.find({ callback: (nodeValue) => nodeValue.key === key });\n\n  // 如果找到了节点，则返回节点的值；否则返回 undefined\n  return node ? node.value.value : undefined;\n}\n```\n\n这个方法的作用是从哈希表中获取与给定键相关联的值。它通过计算键的哈希值，找到对应的桶（链表），然后在桶中查找具有相同键的节点。如果找到了节点，则返回节点的值；否则返回 `undefined`。简而言之，这个方法实现了哈希表的查询功能。\n\n### has(key) 方法\n\n```javascript\n/**\n * @param {string} key\n * @return {boolean}\n */\nhas(key) {\n  // 使用 Object 的 hasOwnProperty 方法来检查 key 是否存在于 this.keys 中\n  return Object.hasOwnProperty.call(this.keys, key);\n}\n```\n\n这个方法的作用是检查给定的 `key` 是否存在于当前对象的 `keys` 属性中。它返回一个布尔值，如果 `key` 存在，则返回 `true`，否则返回 `false`。这个方法可以帮助我们判断一个特定的键是否存在于对象中。\n\n### getKeys() 方法\n\n```javascript\n/**\n * @return {string[]}\n */\ngetKeys() {\n  // 使用 Object.keys() 方法提取 this.keys 对象的所有键，并将它们作为一个数组返回\n  return Object.keys(this.keys);\n}\n```\n\n这个方法的作用是获取 `this.keys` 对象的所有键，并以字符串数组的形式返回这些键。它可以帮助你在需要获取对象键的时候，快速地获取到这些键的列表。\n\n### getValues() 方法\n\n```javascript\n/**\n * 获取哈希表中存储的所有值的列表。\n *\n * @return {*[]}\n */\ngetValues() {\n  return this.buckets.reduce((values, bucket) => {\n    // 将每个桶中的链表节点转换为对应的值，并添加到数组中\n    const bucketValues = bucket.toArray()\n      .map((linkedListNode) => linkedListNode.value.value);\n    // 将所有的值合并到一个数组中\n    return values.concat(bucketValues);\n  }, []);\n}\n```\n\n这个方法的作用是获取哈希表中存储的所有值的列表。它通过遍历哈希表中的每个桶，并将每个桶中的链表节点转换为对应的值，然后将所有的值添加到一个数组中，并返回该数组。这样，我们就可以轻松地获取哈希表中所有存储的值。\n\n---\n\n- 源码地址: [JavaScript Algorithms and Data Structures](https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/hash-table/HashTable.js)\n","slug":"data-structures-006-HashTable","published":1,"updated":"2023-11-24T08:02:31.377Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clq4xe1d8000qtz2h894ngk0f","content":"<h2 id=\"哈希表\"><a href=\"#哈希表\" class=\"headerlink\" title=\"哈希表\"></a>哈希表</h2><p>在计算中, 一个 <strong>哈希表(hash table 或 hash map)</strong> 是一种实现 <em>关联数组(associative array)</em><br>的抽象数据类型, 该结构可以将 _键映射到值_。</p>\n<p>哈希表使用 <em>哈希函数&#x2F;散列函数</em> 来计算一个值在数组或桶(buckets)中或槽(slots)中对应的索引,可使用该索引找到所需的值。</p>\n<p>理想情况下,散列函数将为每个键分配给一个唯一的桶(bucket),但是大多数哈希表设计采用不完美的散列函数,这可能会导致”哈希冲突(hash collisions)”,也就是散列函数为多个键(key)生成了相同的索引,这种碰撞必须<br>以某种方式进行处理。</p>\n<span id=\"more\"></span>\n\n<p><img src=\"/../images/data-structures/hash-table.jpeg\" alt=\"Hash Table\"></p>\n<p>通过单独的链接解决哈希冲突</p>\n<p><img src=\"/../images/data-structures/collision-resolution.jpeg\" alt=\"Hash Collision\"></p>\n<h3 id=\"构造函数-constructor\"><a href=\"#构造函数-constructor\" class=\"headerlink\" title=\"构造函数 constructor\"></a>构造函数 constructor</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; hashTableSize 哈希表大小</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\">hashTableSize = defaultHashTableSize</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建指定大小的哈希表，并将每个桶填充为空的链表</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">buckets</span> = <span class=\"title class_\">Array</span>(hashTableSize).<span class=\"title function_\">fill</span>(<span class=\"literal\">null</span>).<span class=\"title function_\">map</span>(<span class=\"function\">() =&gt;</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 用于快速追踪哈希表中的所有实际键</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">keys</span> = &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hash-key-方法\"><a href=\"#hash-key-方法\" class=\"headerlink\" title=\"hash(key) 方法\"></a>hash(key) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将键字符串转换为哈希数。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; key 键字符串</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125; 哈希数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">hash</span>(<span class=\"params\">key</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 为了简单起见，我们将使用键字符串中所有字符的字符编码之和来计算哈希。</span></span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"comment\">// 但是你也可以使用更复杂的方法，比如多项式字符串哈希，以减少冲突的数量：</span></span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"comment\">// hash = charCodeAt(0) * PRIME^(n-1) + charCodeAt(1) * PRIME^(n-2) + ... + charCodeAt(n-1)</span></span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"comment\">// 其中 charCodeAt(i) 是键字符串的第i个字符的字符编码，n 是键字符串的长度，PRIME 是任何一个素数，比如 31。</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> hash = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(key).<span class=\"title function_\">reduce</span>(</span><br><span class=\"line\">    <span class=\"comment\">// 使用 reduce 函数来计算字符编码的累加和</span></span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">hashAccumulator, keySymbol</span>) =&gt;</span> (hashAccumulator + keySymbol.<span class=\"title function_\">charCodeAt</span>(<span class=\"number\">0</span>)),</span><br><span class=\"line\">    <span class=\"number\">0</span>,</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将哈希数缩小到哈希表的大小范围内。</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> hash % <span class=\"variable language_\">this</span>.<span class=\"property\">buckets</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用于将给定的键字符串转换为哈希数.<br>通过对键字符串中所有字符的字符编码进行累加，得到哈希数。然后使用取模运算符将哈希数缩小到哈希表的大小范围内。</p>\n<h3 id=\"set-key-value-方法\"><a href=\"#set-key-value-方法\" class=\"headerlink\" title=\"set(key, value) 方法\"></a>set(key, value) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">key</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">value</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">set</span>(<span class=\"params\">key, value</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将输入的键计算出哈希值</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> keyHash = <span class=\"variable language_\">this</span>.<span class=\"title function_\">hash</span>(key);</span><br><span class=\"line\">  <span class=\"comment\">// 将键和对应的哈希值存储到键值对中</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">keys</span>[key] = keyHash;</span><br><span class=\"line\">  <span class=\"comment\">// 找到哈希值对应的桶</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> bucketLinkedList = <span class=\"variable language_\">this</span>.<span class=\"property\">buckets</span>[keyHash];</span><br><span class=\"line\">  <span class=\"comment\">// 在桶中查找是否存在相同的键</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> node = bucketLinkedList.<span class=\"title function_\">find</span>(&#123; <span class=\"attr\">callback</span>: <span class=\"function\">(<span class=\"params\">nodeValue</span>) =&gt;</span> nodeValue.<span class=\"property\">key</span> === key &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!node) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果不存在相同的键，则在桶中添加新的节点</span></span><br><span class=\"line\">    bucketLinkedList.<span class=\"title function_\">append</span>(&#123; key, value &#125;);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果存在相同的键，则更新已存在节点的值</span></span><br><span class=\"line\">    node.<span class=\"property\">value</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个方法的作用是向哈希表中添加或更新键值对。它接受一个键和一个值作为参数，并根据键的哈希值找到对应的桶。然后，它检查桶中是否已经存在相同的键。如果存在相同的键，则更新已存在节点的值为新的值。如果不存在相同的键，则在桶的末尾添加一个新的节点，该节点包含新的键和值。这样，通过调用 <code>set</code> 方法，可以将键值对添加到哈希表中，或者更新已存在键的值。</p>\n<h3 id=\"delete-key-方法\"><a href=\"#delete-key-方法\" class=\"headerlink\" title=\"delete(key) 方法\"></a>delete(key) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">key</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">*</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">delete</span>(<span class=\"params\">key</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 计算 key 的哈希值</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> keyHash = <span class=\"variable language_\">this</span>.<span class=\"title function_\">hash</span>(key);</span><br><span class=\"line\">  <span class=\"comment\">// 从 keys 对象中删除指定的 key</span></span><br><span class=\"line\">  <span class=\"keyword\">delete</span> <span class=\"variable language_\">this</span>.<span class=\"property\">keys</span>[key];</span><br><span class=\"line\">  <span class=\"comment\">// 获取对应哈希值的链表</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> bucketLinkedList = <span class=\"variable language_\">this</span>.<span class=\"property\">buckets</span>[keyHash];</span><br><span class=\"line\">  <span class=\"comment\">// 在链表中查找具有相同 key 的节点</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> node = bucketLinkedList.<span class=\"title function_\">find</span>(&#123; <span class=\"attr\">callback</span>: <span class=\"function\">(<span class=\"params\">nodeValue</span>) =&gt;</span> nodeValue.<span class=\"property\">key</span> === key &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果找到了节点</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 从链表中删除该节点</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> bucketLinkedList.<span class=\"title function_\">delete</span>(node.<span class=\"property\">value</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果没有找到节点，则返回 null</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>作用是从哈希表中删除指定的键值对。它接收一个键值作为参数，并根据键值的哈希值在哈希表中找到相应的链表。然后，它在链表中查找具有相同键值的节点，并将其从链表中删除。最后，它返回被删除的节点，如果没有找到匹配的节点，则返回 <code>null</code>。</p>\n<h3 id=\"get-key-方法\"><a href=\"#get-key-方法\" class=\"headerlink\" title=\"get(key) 方法\"></a>get(key) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">key</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">*</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">get</span>(<span class=\"params\">key</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 根据 key 的哈希值找到对应的桶（链表）</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> bucketLinkedList = <span class=\"variable language_\">this</span>.<span class=\"property\">buckets</span>[<span class=\"variable language_\">this</span>.<span class=\"title function_\">hash</span>(key)];</span><br><span class=\"line\">  <span class=\"comment\">// 在桶（链表）中查找具有相同 key 的节点</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> node = bucketLinkedList.<span class=\"title function_\">find</span>(&#123; <span class=\"attr\">callback</span>: <span class=\"function\">(<span class=\"params\">nodeValue</span>) =&gt;</span> nodeValue.<span class=\"property\">key</span> === key &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果找到了节点，则返回节点的值；否则返回 undefined</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> node ? node.<span class=\"property\">value</span>.<span class=\"property\">value</span> : <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个方法的作用是从哈希表中获取与给定键相关联的值。它通过计算键的哈希值，找到对应的桶（链表），然后在桶中查找具有相同键的节点。如果找到了节点，则返回节点的值；否则返回 <code>undefined</code>。简而言之，这个方法实现了哈希表的查询功能。</p>\n<h3 id=\"has-key-方法\"><a href=\"#has-key-方法\" class=\"headerlink\" title=\"has(key) 方法\"></a>has(key) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">key</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">has</span>(<span class=\"params\">key</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用 Object 的 hasOwnProperty 方法来检查 key 是否存在于 this.keys 中</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Object</span>.<span class=\"property\">hasOwnProperty</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">keys</span>, key);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个方法的作用是检查给定的 <code>key</code> 是否存在于当前对象的 <code>keys</code> 属性中。它返回一个布尔值，如果 <code>key</code> 存在，则返回 <code>true</code>，否则返回 <code>false</code>。这个方法可以帮助我们判断一个特定的键是否存在于对象中。</p>\n<h3 id=\"getKeys-方法\"><a href=\"#getKeys-方法\" class=\"headerlink\" title=\"getKeys() 方法\"></a>getKeys() 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">getKeys</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用 Object.keys() 方法提取 this.keys 对象的所有键，并将它们作为一个数组返回</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">keys</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个方法的作用是获取 <code>this.keys</code> 对象的所有键，并以字符串数组的形式返回这些键。它可以帮助你在需要获取对象键的时候，快速地获取到这些键的列表。</p>\n<h3 id=\"getValues-方法\"><a href=\"#getValues-方法\" class=\"headerlink\" title=\"getValues() 方法\"></a>getValues() 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取哈希表中存储的所有值的列表。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">*[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">getValues</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">buckets</span>.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">values, bucket</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将每个桶中的链表节点转换为对应的值，并添加到数组中</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> bucketValues = bucket.<span class=\"title function_\">toArray</span>()</span><br><span class=\"line\">      .<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">linkedListNode</span>) =&gt;</span> linkedListNode.<span class=\"property\">value</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 将所有的值合并到一个数组中</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> values.<span class=\"title function_\">concat</span>(bucketValues);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个方法的作用是获取哈希表中存储的所有值的列表。它通过遍历哈希表中的每个桶，并将每个桶中的链表节点转换为对应的值，然后将所有的值添加到一个数组中，并返回该数组。这样，我们就可以轻松地获取哈希表中所有存储的值。</p>\n<hr>\n<ul>\n<li>源码地址: <a href=\"https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/hash-table/HashTable.js\">JavaScript Algorithms and Data Structures</a></li>\n</ul>\n","site":{"data":{}},"related_posts":[],"length":1568,"excerpt":"<h2 id=\"哈希表\"><a href=\"#哈希表\" class=\"headerlink\" title=\"哈希表\"></a>哈希表</h2><p>在计算中, 一个 <strong>哈希表(hash table 或 hash map)</strong> 是一种实现 <em>关联数组(associative array)</em><br>的抽象数据类型, 该结构可以将 _键映射到值_。</p>\n<p>哈希表使用 <em>哈希函数&#x2F;散列函数</em> 来计算一个值在数组或桶(buckets)中或槽(slots)中对应的索引,可使用该索引找到所需的值。</p>\n<p>理想情况下,散列函数将为每个键分配给一个唯一的桶(bucket),但是大多数哈希表设计采用不完美的散列函数,这可能会导致”哈希冲突(hash collisions)”,也就是散列函数为多个键(key)生成了相同的索引,这种碰撞必须<br>以某种方式进行处理。</p>","more":"<p><img src=\"/../images/data-structures/hash-table.jpeg\" alt=\"Hash Table\"></p>\n<p>通过单独的链接解决哈希冲突</p>\n<p><img src=\"/../images/data-structures/collision-resolution.jpeg\" alt=\"Hash Collision\"></p>\n<h3 id=\"构造函数-constructor\"><a href=\"#构造函数-constructor\" class=\"headerlink\" title=\"构造函数 constructor\"></a>构造函数 constructor</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; hashTableSize 哈希表大小</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\">hashTableSize = defaultHashTableSize</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建指定大小的哈希表，并将每个桶填充为空的链表</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">buckets</span> = <span class=\"title class_\">Array</span>(hashTableSize).<span class=\"title function_\">fill</span>(<span class=\"literal\">null</span>).<span class=\"title function_\">map</span>(<span class=\"function\">() =&gt;</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 用于快速追踪哈希表中的所有实际键</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">keys</span> = &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hash-key-方法\"><a href=\"#hash-key-方法\" class=\"headerlink\" title=\"hash(key) 方法\"></a>hash(key) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将键字符串转换为哈希数。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; key 键字符串</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125; 哈希数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">hash</span>(<span class=\"params\">key</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 为了简单起见，我们将使用键字符串中所有字符的字符编码之和来计算哈希。</span></span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"comment\">// 但是你也可以使用更复杂的方法，比如多项式字符串哈希，以减少冲突的数量：</span></span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"comment\">// hash = charCodeAt(0) * PRIME^(n-1) + charCodeAt(1) * PRIME^(n-2) + ... + charCodeAt(n-1)</span></span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"comment\">// 其中 charCodeAt(i) 是键字符串的第i个字符的字符编码，n 是键字符串的长度，PRIME 是任何一个素数，比如 31。</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> hash = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(key).<span class=\"title function_\">reduce</span>(</span><br><span class=\"line\">    <span class=\"comment\">// 使用 reduce 函数来计算字符编码的累加和</span></span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">hashAccumulator, keySymbol</span>) =&gt;</span> (hashAccumulator + keySymbol.<span class=\"title function_\">charCodeAt</span>(<span class=\"number\">0</span>)),</span><br><span class=\"line\">    <span class=\"number\">0</span>,</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将哈希数缩小到哈希表的大小范围内。</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> hash % <span class=\"variable language_\">this</span>.<span class=\"property\">buckets</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用于将给定的键字符串转换为哈希数.<br>通过对键字符串中所有字符的字符编码进行累加，得到哈希数。然后使用取模运算符将哈希数缩小到哈希表的大小范围内。</p>\n<h3 id=\"set-key-value-方法\"><a href=\"#set-key-value-方法\" class=\"headerlink\" title=\"set(key, value) 方法\"></a>set(key, value) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">key</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">value</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">set</span>(<span class=\"params\">key, value</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将输入的键计算出哈希值</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> keyHash = <span class=\"variable language_\">this</span>.<span class=\"title function_\">hash</span>(key);</span><br><span class=\"line\">  <span class=\"comment\">// 将键和对应的哈希值存储到键值对中</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">keys</span>[key] = keyHash;</span><br><span class=\"line\">  <span class=\"comment\">// 找到哈希值对应的桶</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> bucketLinkedList = <span class=\"variable language_\">this</span>.<span class=\"property\">buckets</span>[keyHash];</span><br><span class=\"line\">  <span class=\"comment\">// 在桶中查找是否存在相同的键</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> node = bucketLinkedList.<span class=\"title function_\">find</span>(&#123; <span class=\"attr\">callback</span>: <span class=\"function\">(<span class=\"params\">nodeValue</span>) =&gt;</span> nodeValue.<span class=\"property\">key</span> === key &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!node) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果不存在相同的键，则在桶中添加新的节点</span></span><br><span class=\"line\">    bucketLinkedList.<span class=\"title function_\">append</span>(&#123; key, value &#125;);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果存在相同的键，则更新已存在节点的值</span></span><br><span class=\"line\">    node.<span class=\"property\">value</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个方法的作用是向哈希表中添加或更新键值对。它接受一个键和一个值作为参数，并根据键的哈希值找到对应的桶。然后，它检查桶中是否已经存在相同的键。如果存在相同的键，则更新已存在节点的值为新的值。如果不存在相同的键，则在桶的末尾添加一个新的节点，该节点包含新的键和值。这样，通过调用 <code>set</code> 方法，可以将键值对添加到哈希表中，或者更新已存在键的值。</p>\n<h3 id=\"delete-key-方法\"><a href=\"#delete-key-方法\" class=\"headerlink\" title=\"delete(key) 方法\"></a>delete(key) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">key</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">*</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">delete</span>(<span class=\"params\">key</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 计算 key 的哈希值</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> keyHash = <span class=\"variable language_\">this</span>.<span class=\"title function_\">hash</span>(key);</span><br><span class=\"line\">  <span class=\"comment\">// 从 keys 对象中删除指定的 key</span></span><br><span class=\"line\">  <span class=\"keyword\">delete</span> <span class=\"variable language_\">this</span>.<span class=\"property\">keys</span>[key];</span><br><span class=\"line\">  <span class=\"comment\">// 获取对应哈希值的链表</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> bucketLinkedList = <span class=\"variable language_\">this</span>.<span class=\"property\">buckets</span>[keyHash];</span><br><span class=\"line\">  <span class=\"comment\">// 在链表中查找具有相同 key 的节点</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> node = bucketLinkedList.<span class=\"title function_\">find</span>(&#123; <span class=\"attr\">callback</span>: <span class=\"function\">(<span class=\"params\">nodeValue</span>) =&gt;</span> nodeValue.<span class=\"property\">key</span> === key &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果找到了节点</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 从链表中删除该节点</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> bucketLinkedList.<span class=\"title function_\">delete</span>(node.<span class=\"property\">value</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果没有找到节点，则返回 null</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>作用是从哈希表中删除指定的键值对。它接收一个键值作为参数，并根据键值的哈希值在哈希表中找到相应的链表。然后，它在链表中查找具有相同键值的节点，并将其从链表中删除。最后，它返回被删除的节点，如果没有找到匹配的节点，则返回 <code>null</code>。</p>\n<h3 id=\"get-key-方法\"><a href=\"#get-key-方法\" class=\"headerlink\" title=\"get(key) 方法\"></a>get(key) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">key</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">*</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">get</span>(<span class=\"params\">key</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 根据 key 的哈希值找到对应的桶（链表）</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> bucketLinkedList = <span class=\"variable language_\">this</span>.<span class=\"property\">buckets</span>[<span class=\"variable language_\">this</span>.<span class=\"title function_\">hash</span>(key)];</span><br><span class=\"line\">  <span class=\"comment\">// 在桶（链表）中查找具有相同 key 的节点</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> node = bucketLinkedList.<span class=\"title function_\">find</span>(&#123; <span class=\"attr\">callback</span>: <span class=\"function\">(<span class=\"params\">nodeValue</span>) =&gt;</span> nodeValue.<span class=\"property\">key</span> === key &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果找到了节点，则返回节点的值；否则返回 undefined</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> node ? node.<span class=\"property\">value</span>.<span class=\"property\">value</span> : <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个方法的作用是从哈希表中获取与给定键相关联的值。它通过计算键的哈希值，找到对应的桶（链表），然后在桶中查找具有相同键的节点。如果找到了节点，则返回节点的值；否则返回 <code>undefined</code>。简而言之，这个方法实现了哈希表的查询功能。</p>\n<h3 id=\"has-key-方法\"><a href=\"#has-key-方法\" class=\"headerlink\" title=\"has(key) 方法\"></a>has(key) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">key</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">has</span>(<span class=\"params\">key</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用 Object 的 hasOwnProperty 方法来检查 key 是否存在于 this.keys 中</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Object</span>.<span class=\"property\">hasOwnProperty</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">keys</span>, key);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个方法的作用是检查给定的 <code>key</code> 是否存在于当前对象的 <code>keys</code> 属性中。它返回一个布尔值，如果 <code>key</code> 存在，则返回 <code>true</code>，否则返回 <code>false</code>。这个方法可以帮助我们判断一个特定的键是否存在于对象中。</p>\n<h3 id=\"getKeys-方法\"><a href=\"#getKeys-方法\" class=\"headerlink\" title=\"getKeys() 方法\"></a>getKeys() 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">getKeys</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用 Object.keys() 方法提取 this.keys 对象的所有键，并将它们作为一个数组返回</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">keys</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个方法的作用是获取 <code>this.keys</code> 对象的所有键，并以字符串数组的形式返回这些键。它可以帮助你在需要获取对象键的时候，快速地获取到这些键的列表。</p>\n<h3 id=\"getValues-方法\"><a href=\"#getValues-方法\" class=\"headerlink\" title=\"getValues() 方法\"></a>getValues() 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取哈希表中存储的所有值的列表。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">*[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">getValues</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">buckets</span>.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">values, bucket</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将每个桶中的链表节点转换为对应的值，并添加到数组中</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> bucketValues = bucket.<span class=\"title function_\">toArray</span>()</span><br><span class=\"line\">      .<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">linkedListNode</span>) =&gt;</span> linkedListNode.<span class=\"property\">value</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 将所有的值合并到一个数组中</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> values.<span class=\"title function_\">concat</span>(bucketValues);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个方法的作用是获取哈希表中存储的所有值的列表。它通过遍历哈希表中的每个桶，并将每个桶中的链表节点转换为对应的值，然后将所有的值添加到一个数组中，并返回该数组。这样，我们就可以轻松地获取哈希表中所有存储的值。</p>\n<hr>\n<ul>\n<li>源码地址: <a href=\"https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/hash-table/HashTable.js\">JavaScript Algorithms and Data Structures</a></li>\n</ul>"},{"title":"JavaScript Algorithms and Data Structures 源码分析(9) -- 字典树 Trie","date":"2023-12-14T05:59:53.000Z","_content":"\n## 字典树\n\n在计算机科学中, **字典树(trie,中文又被称为”单词查找树“或 ”键树“)**, 也称为数字树,有时候也被称为基数树或前缀树（因为它们可以通过前缀搜索）,它是一种搜索树--一种已排序的数据结构,通常用于存储动态集或键为字符串的关联数组。\n\n与二叉搜索树不同, 树上没有节点存储与该节点关联的键; 相反,节点在树上的位置定义了与之关联的键。一个节点的全部后代节点都有一个与该节点关联的通用的字符串前缀, 与根节点关联的是空字符串。\n\n值对于字典树中关联的节点来说,不是必需的,相反,值往往和相关的叶子相关,以及与一些键相关的内部节点相关。\n\n<!-- more -->\n\n![trie](../images/data-structures/trie.jpg)\n\n## TrieNode\n\n### constructor(character, isCompleteWord = false)初始化方法\n\n```javascript\n/**\n * 构造函数\n * @param {string} character - 字符参数\n * @param {boolean} isCompleteWord - 是否为完整单词\n */\nconstructor(character, isCompleteWord = false) {\n  this.character = character; // 将传入的字符参数赋值给对象的character属性\n  this.isCompleteWord = isCompleteWord; // 将传入的isCompleteWord参数赋值给对象的isCompleteWord属性\n  this.children = new HashTable(); // 创建一个新的HashTable对象，并将其赋值给对象的children属性\n}\n```\n\n### getChild(character) 方法\n\n```javascript\n/**\n * 获取子节点\n * @param {string} character - 子节点的字符\n * @return {TrieNode} - 子节点对象\n */\ngetChild(character) {\n  // 使用character作为键从children映射中获取子节点\n  return this.children.get(character);\n}\n```\n\n### addChild(character, isCompleteWord = false) 方法\n\n```javascript\n/**\n * @param {string} character  // 参数：要添加的字符\n * @param {boolean} isCompleteWord  // 参数：是否是完整的单词\n * @return {TrieNode}  // 返回值：添加的子节点\n */\naddChild(character, isCompleteWord = false) {\n  // 如果当前节点的子节点集合中不存在该字符\n  if (!this.children.has(character)) {\n    // 创建新的子节点，并将其添加到子节点集合中\n    this.children.set(character, new TrieNode(character, isCompleteWord));\n  }\n\n  // 获取子节点\n  const childNode = this.children.get(character);\n\n  // 在类似于将 \"car\" 添加到 \"carpet\" 之后的情况下，需要将 \"r\" 字符标记为完整的单词\n  childNode.isCompleteWord = childNode.isCompleteWord || isCompleteWord;\n\n  // 返回子节点\n  return childNode;\n}\n```\n\n### removeChild(character) 方法\n\n```javascript\n/**\n * @param {string} character\n * @return {TrieNode}\n */\nremoveChild(character) {\n  // 通过给定的字符找到对应的子节点\n  const childNode = this.getChild(character);\n\n  // 只有当子节点存在、不是完整的单词、且没有子节点时，才删除子节点\n  if (\n    childNode\n    && !childNode.isCompleteWord\n    && !childNode.hasChildren()\n  ) {\n    // 从父节点的子节点集合中删除该子节点\n    this.children.delete(character);\n  }\n\n  // 返回当前 TrieNode 实例\n  return this;\n}\n```\n\n### hasChild(character) 方法\n\n```javascript\n/**\n * @param {string} character\n * @return {boolean}\n */\nhasChild(character) {\n  return this.children.has(character);\n}\n```\n\n### hasChildren() 方法\n\n```javascript\n/**\n * Check whether current TrieNode has children or not.\n * 检查当前 TrieNode 是否有子节点。\n * @return {boolean}\n * 返回一个布尔值，表示当前 TrieNode 是否有子节点。\n */\nhasChildren() {\n  // Get the keys of the children and check the length of the keys array.\n  // 获取子节点的键，并检查键数组的长度。\n  return this.children.getKeys().length !== 0;\n}\n```\n\n### suggestChildren() 方法\n\n```javascript\n/**\n * @return {string[]}\n */\nsuggestChildren() {\n  // 使用扩展运算符 (...) 创建一个新数组，其中包含从 children 对象获取的所有键\n  return [...this.children.getKeys()];\n}\n```\n\n### toString() 方法\n\n```js\n/**\n * 返回对象的字符串表示形式。\n * @return {string}\n */\ntoString() {\n  // 获取子节点作为字符串的表示形式\n  let childrenAsString = this.suggestChildren().toString();\n  // 如果存在子节点，则在字符串末尾添加冒号\n  childrenAsString = childrenAsString ? `:${childrenAsString}` : '';\n  // 如果当前节点为完整单词，则在字符串末尾添加星号\n  const isCompleteString = this.isCompleteWord ? '*' : '';\n\n  // 返回由字符、完整标记和子节点字符串组成的字符串\n  return `${this.character}${isCompleteString}${childrenAsString}`;\n}\n```\n\n## Trie 类\n\n### constructor() 初始化方法\n\n```js\nconstructor() {\n  // 创建一个新的TrieNode对象，并将其赋值给当前对象的head属性\n  this.head = new TrieNode(HEAD_CHARACTER);\n}\n```\n\n### addWord(word) 方法\n\n```js\n/**\n * 将单词添加到 Trie 中\n * @param {string} word - 要添加的单词\n * @return {Trie} - 返回 Trie 对象\n */\naddWord(word) {\n  // 将单词转为字符数组\n  const characters = Array.from(word);\n  // 初始化当前节点为 Trie 的根节点\n  let currentNode = this.head;\n\n  // 遍历单词的每个字符\n  for (let charIndex = 0; charIndex < characters.length; charIndex += 1) {\n    // 判断是否为单词的最后一个字符\n    const isComplete = charIndex === characters.length - 1;\n    // 将当前字符添加为当前节点的子节点，并更新当前节点为添加的子节点\n    currentNode = currentNode.addChild(characters[charIndex], isComplete);\n  }\n\n  // 返回 Trie 对象\n  return this;\n}\n```\n\n### deleteWord(word) 方法\n\n```js\n/**\n * @param {string} word\n * @return {Trie}\n */\ndeleteWord(word) {\n  // 定义深度优先删除函数，参数为当前节点和字符索引（默认为0）\n  const depthFirstDelete = (currentNode, charIndex = 0) => {\n    // 如果字符索引超出了单词的长度，说明要删除的字符超出了单词的范围，直接返回\n    if (charIndex >= word.length) {\n      return;\n    }\n\n    // 获取当前字符\n    const character = word[charIndex];\n    // 获取当前字符对应的下一个节点\n    const nextNode = currentNode.getChild(character);\n\n    // 如果下一个节点为空，说明要删除的单词没有被添加到Trie中，直接返回\n    if (nextNode == null) {\n      return;\n    }\n\n    // 递归调用深度优先删除函数，继续删除下一个字符\n    depthFirstDelete(nextNode, charIndex + 1);\n\n    // 如果当前字符是单词的最后一个字符，将下一个节点的isCompleteWord标记设为false\n    if (charIndex === (word.length - 1)) {\n      nextNode.isCompleteWord = false;\n    }\n\n    // 只有当下一个节点没有子节点且isCompleteWord为false时，才删除该子节点\n    currentNode.removeChild(character);\n  };\n\n  // 从头节点开始进行深度优先删除\n  depthFirstDelete(this.head);\n\n  //返回Trie对象本身\n  return this;\n}\n```\n\n### suggestNextCharacters(word) 方法\n\n```js\n/**\n * @param {string} word\n * @return {string[]}\n */\nsuggestNextCharacters(word) {\n  // 获取给定单词的最后一个字符节点\n  const lastCharacter = this.getLastCharacterNode(word);\n\n  // 如果最后一个字符节点不存在\n  if (!lastCharacter) {\n    // 返回null\n    return null;\n  }\n\n  // 返回最后一个字符节点的建议下一个字符\n  return lastCharacter.suggestChildren();\n}\n```\n\n### doesWordExist(word) 方法\n\n```js\n/**\n * 检查 Trie 中是否存在完整的单词。\n *\n * @param {string} word - 要检查的单词\n * @return {boolean} - 如果单词存在，则返回 true，否则返回 false\n */\ndoesWordExist(word) {\n  // 获取单词的最后一个字符节点\n  const lastCharacter = this.getLastCharacterNode(word);\n\n  // 如果最后一个字符存在且被标记为完整单词，则返回 true，否则返回 false\n  return !!lastCharacter && lastCharacter.isCompleteWord;\n}\n```\n\n### getLastCharacterNode(word) 方法\n\n```js\n/**\n * @param {string} word\n * @return {TrieNode}\n */\ngetLastCharacterNode(word) {\n  const characters = Array.from(word); // 将字符串转换为字符数组\n  let currentNode = this.head; // 初始化当前节点为头节点\n\n  for (let charIndex = 0; charIndex < characters.length; charIndex += 1) { // 循环遍历字符数组\n    if (!currentNode.hasChild(characters[charIndex])) { // 如果当前节点没有该字符的子节点\n      return null; // 返回空\n    }\n\n    currentNode = currentNode.getChild(characters[charIndex]); // 更新当前节点为该字符的子节点\n  }\n\n  return currentNode; // 返回最后访问的节点\n}\n```\n","source":"_posts/data-structures-009-Trie.md","raw":"---\ntitle: JavaScript Algorithms and Data Structures 源码分析(9) -- 字典树 Trie\ndate: 2023-12-14 13:59:53\ntags:\n  - data structures\ncategories:\n  - 数据结构与算法\n---\n\n## 字典树\n\n在计算机科学中, **字典树(trie,中文又被称为”单词查找树“或 ”键树“)**, 也称为数字树,有时候也被称为基数树或前缀树（因为它们可以通过前缀搜索）,它是一种搜索树--一种已排序的数据结构,通常用于存储动态集或键为字符串的关联数组。\n\n与二叉搜索树不同, 树上没有节点存储与该节点关联的键; 相反,节点在树上的位置定义了与之关联的键。一个节点的全部后代节点都有一个与该节点关联的通用的字符串前缀, 与根节点关联的是空字符串。\n\n值对于字典树中关联的节点来说,不是必需的,相反,值往往和相关的叶子相关,以及与一些键相关的内部节点相关。\n\n<!-- more -->\n\n![trie](../images/data-structures/trie.jpg)\n\n## TrieNode\n\n### constructor(character, isCompleteWord = false)初始化方法\n\n```javascript\n/**\n * 构造函数\n * @param {string} character - 字符参数\n * @param {boolean} isCompleteWord - 是否为完整单词\n */\nconstructor(character, isCompleteWord = false) {\n  this.character = character; // 将传入的字符参数赋值给对象的character属性\n  this.isCompleteWord = isCompleteWord; // 将传入的isCompleteWord参数赋值给对象的isCompleteWord属性\n  this.children = new HashTable(); // 创建一个新的HashTable对象，并将其赋值给对象的children属性\n}\n```\n\n### getChild(character) 方法\n\n```javascript\n/**\n * 获取子节点\n * @param {string} character - 子节点的字符\n * @return {TrieNode} - 子节点对象\n */\ngetChild(character) {\n  // 使用character作为键从children映射中获取子节点\n  return this.children.get(character);\n}\n```\n\n### addChild(character, isCompleteWord = false) 方法\n\n```javascript\n/**\n * @param {string} character  // 参数：要添加的字符\n * @param {boolean} isCompleteWord  // 参数：是否是完整的单词\n * @return {TrieNode}  // 返回值：添加的子节点\n */\naddChild(character, isCompleteWord = false) {\n  // 如果当前节点的子节点集合中不存在该字符\n  if (!this.children.has(character)) {\n    // 创建新的子节点，并将其添加到子节点集合中\n    this.children.set(character, new TrieNode(character, isCompleteWord));\n  }\n\n  // 获取子节点\n  const childNode = this.children.get(character);\n\n  // 在类似于将 \"car\" 添加到 \"carpet\" 之后的情况下，需要将 \"r\" 字符标记为完整的单词\n  childNode.isCompleteWord = childNode.isCompleteWord || isCompleteWord;\n\n  // 返回子节点\n  return childNode;\n}\n```\n\n### removeChild(character) 方法\n\n```javascript\n/**\n * @param {string} character\n * @return {TrieNode}\n */\nremoveChild(character) {\n  // 通过给定的字符找到对应的子节点\n  const childNode = this.getChild(character);\n\n  // 只有当子节点存在、不是完整的单词、且没有子节点时，才删除子节点\n  if (\n    childNode\n    && !childNode.isCompleteWord\n    && !childNode.hasChildren()\n  ) {\n    // 从父节点的子节点集合中删除该子节点\n    this.children.delete(character);\n  }\n\n  // 返回当前 TrieNode 实例\n  return this;\n}\n```\n\n### hasChild(character) 方法\n\n```javascript\n/**\n * @param {string} character\n * @return {boolean}\n */\nhasChild(character) {\n  return this.children.has(character);\n}\n```\n\n### hasChildren() 方法\n\n```javascript\n/**\n * Check whether current TrieNode has children or not.\n * 检查当前 TrieNode 是否有子节点。\n * @return {boolean}\n * 返回一个布尔值，表示当前 TrieNode 是否有子节点。\n */\nhasChildren() {\n  // Get the keys of the children and check the length of the keys array.\n  // 获取子节点的键，并检查键数组的长度。\n  return this.children.getKeys().length !== 0;\n}\n```\n\n### suggestChildren() 方法\n\n```javascript\n/**\n * @return {string[]}\n */\nsuggestChildren() {\n  // 使用扩展运算符 (...) 创建一个新数组，其中包含从 children 对象获取的所有键\n  return [...this.children.getKeys()];\n}\n```\n\n### toString() 方法\n\n```js\n/**\n * 返回对象的字符串表示形式。\n * @return {string}\n */\ntoString() {\n  // 获取子节点作为字符串的表示形式\n  let childrenAsString = this.suggestChildren().toString();\n  // 如果存在子节点，则在字符串末尾添加冒号\n  childrenAsString = childrenAsString ? `:${childrenAsString}` : '';\n  // 如果当前节点为完整单词，则在字符串末尾添加星号\n  const isCompleteString = this.isCompleteWord ? '*' : '';\n\n  // 返回由字符、完整标记和子节点字符串组成的字符串\n  return `${this.character}${isCompleteString}${childrenAsString}`;\n}\n```\n\n## Trie 类\n\n### constructor() 初始化方法\n\n```js\nconstructor() {\n  // 创建一个新的TrieNode对象，并将其赋值给当前对象的head属性\n  this.head = new TrieNode(HEAD_CHARACTER);\n}\n```\n\n### addWord(word) 方法\n\n```js\n/**\n * 将单词添加到 Trie 中\n * @param {string} word - 要添加的单词\n * @return {Trie} - 返回 Trie 对象\n */\naddWord(word) {\n  // 将单词转为字符数组\n  const characters = Array.from(word);\n  // 初始化当前节点为 Trie 的根节点\n  let currentNode = this.head;\n\n  // 遍历单词的每个字符\n  for (let charIndex = 0; charIndex < characters.length; charIndex += 1) {\n    // 判断是否为单词的最后一个字符\n    const isComplete = charIndex === characters.length - 1;\n    // 将当前字符添加为当前节点的子节点，并更新当前节点为添加的子节点\n    currentNode = currentNode.addChild(characters[charIndex], isComplete);\n  }\n\n  // 返回 Trie 对象\n  return this;\n}\n```\n\n### deleteWord(word) 方法\n\n```js\n/**\n * @param {string} word\n * @return {Trie}\n */\ndeleteWord(word) {\n  // 定义深度优先删除函数，参数为当前节点和字符索引（默认为0）\n  const depthFirstDelete = (currentNode, charIndex = 0) => {\n    // 如果字符索引超出了单词的长度，说明要删除的字符超出了单词的范围，直接返回\n    if (charIndex >= word.length) {\n      return;\n    }\n\n    // 获取当前字符\n    const character = word[charIndex];\n    // 获取当前字符对应的下一个节点\n    const nextNode = currentNode.getChild(character);\n\n    // 如果下一个节点为空，说明要删除的单词没有被添加到Trie中，直接返回\n    if (nextNode == null) {\n      return;\n    }\n\n    // 递归调用深度优先删除函数，继续删除下一个字符\n    depthFirstDelete(nextNode, charIndex + 1);\n\n    // 如果当前字符是单词的最后一个字符，将下一个节点的isCompleteWord标记设为false\n    if (charIndex === (word.length - 1)) {\n      nextNode.isCompleteWord = false;\n    }\n\n    // 只有当下一个节点没有子节点且isCompleteWord为false时，才删除该子节点\n    currentNode.removeChild(character);\n  };\n\n  // 从头节点开始进行深度优先删除\n  depthFirstDelete(this.head);\n\n  //返回Trie对象本身\n  return this;\n}\n```\n\n### suggestNextCharacters(word) 方法\n\n```js\n/**\n * @param {string} word\n * @return {string[]}\n */\nsuggestNextCharacters(word) {\n  // 获取给定单词的最后一个字符节点\n  const lastCharacter = this.getLastCharacterNode(word);\n\n  // 如果最后一个字符节点不存在\n  if (!lastCharacter) {\n    // 返回null\n    return null;\n  }\n\n  // 返回最后一个字符节点的建议下一个字符\n  return lastCharacter.suggestChildren();\n}\n```\n\n### doesWordExist(word) 方法\n\n```js\n/**\n * 检查 Trie 中是否存在完整的单词。\n *\n * @param {string} word - 要检查的单词\n * @return {boolean} - 如果单词存在，则返回 true，否则返回 false\n */\ndoesWordExist(word) {\n  // 获取单词的最后一个字符节点\n  const lastCharacter = this.getLastCharacterNode(word);\n\n  // 如果最后一个字符存在且被标记为完整单词，则返回 true，否则返回 false\n  return !!lastCharacter && lastCharacter.isCompleteWord;\n}\n```\n\n### getLastCharacterNode(word) 方法\n\n```js\n/**\n * @param {string} word\n * @return {TrieNode}\n */\ngetLastCharacterNode(word) {\n  const characters = Array.from(word); // 将字符串转换为字符数组\n  let currentNode = this.head; // 初始化当前节点为头节点\n\n  for (let charIndex = 0; charIndex < characters.length; charIndex += 1) { // 循环遍历字符数组\n    if (!currentNode.hasChild(characters[charIndex])) { // 如果当前节点没有该字符的子节点\n      return null; // 返回空\n    }\n\n    currentNode = currentNode.getChild(characters[charIndex]); // 更新当前节点为该字符的子节点\n  }\n\n  return currentNode; // 返回最后访问的节点\n}\n```\n","slug":"data-structures-009-Trie","published":1,"updated":"2023-12-14T06:01:28.240Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clq4xe1d9000utz2hatlg1s3f","content":"<h2 id=\"字典树\"><a href=\"#字典树\" class=\"headerlink\" title=\"字典树\"></a>字典树</h2><p>在计算机科学中, <strong>字典树(trie,中文又被称为”单词查找树“或 ”键树“)</strong>, 也称为数字树,有时候也被称为基数树或前缀树（因为它们可以通过前缀搜索）,它是一种搜索树–一种已排序的数据结构,通常用于存储动态集或键为字符串的关联数组。</p>\n<p>与二叉搜索树不同, 树上没有节点存储与该节点关联的键; 相反,节点在树上的位置定义了与之关联的键。一个节点的全部后代节点都有一个与该节点关联的通用的字符串前缀, 与根节点关联的是空字符串。</p>\n<p>值对于字典树中关联的节点来说,不是必需的,相反,值往往和相关的叶子相关,以及与一些键相关的内部节点相关。</p>\n<span id=\"more\"></span>\n\n<p><img src=\"/../images/data-structures/trie.jpg\" alt=\"trie\"></p>\n<h2 id=\"TrieNode\"><a href=\"#TrieNode\" class=\"headerlink\" title=\"TrieNode\"></a>TrieNode</h2><h3 id=\"constructor-character-isCompleteWord-false-初始化方法\"><a href=\"#constructor-character-isCompleteWord-false-初始化方法\" class=\"headerlink\" title=\"constructor(character, isCompleteWord &#x3D; false)初始化方法\"></a>constructor(character, isCompleteWord &#x3D; false)初始化方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 构造函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">character</span> - 字符参数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">boolean</span>&#125; <span class=\"variable\">isCompleteWord</span> - 是否为完整单词</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\">character, isCompleteWord = <span class=\"literal\">false</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">character</span> = character; <span class=\"comment\">// 将传入的字符参数赋值给对象的character属性</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">isCompleteWord</span> = isCompleteWord; <span class=\"comment\">// 将传入的isCompleteWord参数赋值给对象的isCompleteWord属性</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">children</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">HashTable</span>(); <span class=\"comment\">// 创建一个新的HashTable对象，并将其赋值给对象的children属性</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"getChild-character-方法\"><a href=\"#getChild-character-方法\" class=\"headerlink\" title=\"getChild(character) 方法\"></a>getChild(character) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取子节点</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">character</span> - 子节点的字符</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">TrieNode</span>&#125; - 子节点对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">getChild</span>(<span class=\"params\">character</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用character作为键从children映射中获取子节点</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">children</span>.<span class=\"title function_\">get</span>(character);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"addChild-character-isCompleteWord-false-方法\"><a href=\"#addChild-character-isCompleteWord-false-方法\" class=\"headerlink\" title=\"addChild(character, isCompleteWord &#x3D; false) 方法\"></a>addChild(character, isCompleteWord &#x3D; false) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; character  // 参数：要添加的字符</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">boolean</span>&#125; isCompleteWord  // 参数：是否是完整的单词</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">TrieNode</span>&#125;  // 返回值：添加的子节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">addChild</span>(<span class=\"params\">character, isCompleteWord = <span class=\"literal\">false</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果当前节点的子节点集合中不存在该字符</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">children</span>.<span class=\"title function_\">has</span>(character)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建新的子节点，并将其添加到子节点集合中</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">children</span>.<span class=\"title function_\">set</span>(character, <span class=\"keyword\">new</span> <span class=\"title class_\">TrieNode</span>(character, isCompleteWord));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 获取子节点</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> childNode = <span class=\"variable language_\">this</span>.<span class=\"property\">children</span>.<span class=\"title function_\">get</span>(character);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 在类似于将 &quot;car&quot; 添加到 &quot;carpet&quot; 之后的情况下，需要将 &quot;r&quot; 字符标记为完整的单词</span></span><br><span class=\"line\">  childNode.<span class=\"property\">isCompleteWord</span> = childNode.<span class=\"property\">isCompleteWord</span> || isCompleteWord;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回子节点</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> childNode;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"removeChild-character-方法\"><a href=\"#removeChild-character-方法\" class=\"headerlink\" title=\"removeChild(character) 方法\"></a>removeChild(character) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">character</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">TrieNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">removeChild</span>(<span class=\"params\">character</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 通过给定的字符找到对应的子节点</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> childNode = <span class=\"variable language_\">this</span>.<span class=\"title function_\">getChild</span>(character);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 只有当子节点存在、不是完整的单词、且没有子节点时，才删除子节点</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (</span><br><span class=\"line\">    childNode</span><br><span class=\"line\">    &amp;&amp; !childNode.<span class=\"property\">isCompleteWord</span></span><br><span class=\"line\">    &amp;&amp; !childNode.<span class=\"title function_\">hasChildren</span>()</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 从父节点的子节点集合中删除该子节点</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">children</span>.<span class=\"title function_\">delete</span>(character);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回当前 TrieNode 实例</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hasChild-character-方法\"><a href=\"#hasChild-character-方法\" class=\"headerlink\" title=\"hasChild(character) 方法\"></a>hasChild(character) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">character</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">hasChild</span>(<span class=\"params\">character</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">children</span>.<span class=\"title function_\">has</span>(character);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hasChildren-方法\"><a href=\"#hasChildren-方法\" class=\"headerlink\" title=\"hasChildren() 方法\"></a>hasChildren() 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Check whether current TrieNode has children or not.</span></span><br><span class=\"line\"><span class=\"comment\"> * 检查当前 TrieNode 是否有子节点。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回一个布尔值，表示当前 TrieNode 是否有子节点。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">hasChildren</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Get the keys of the children and check the length of the keys array.</span></span><br><span class=\"line\">  <span class=\"comment\">// 获取子节点的键，并检查键数组的长度。</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">children</span>.<span class=\"title function_\">getKeys</span>().<span class=\"property\">length</span> !== <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"suggestChildren-方法\"><a href=\"#suggestChildren-方法\" class=\"headerlink\" title=\"suggestChildren() 方法\"></a>suggestChildren() 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">suggestChildren</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用扩展运算符 (...) 创建一个新数组，其中包含从 children 对象获取的所有键</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> [...<span class=\"variable language_\">this</span>.<span class=\"property\">children</span>.<span class=\"title function_\">getKeys</span>()];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"toString-方法\"><a href=\"#toString-方法\" class=\"headerlink\" title=\"toString() 方法\"></a>toString() 方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回对象的字符串表示形式。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">toString</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取子节点作为字符串的表示形式</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> childrenAsString = <span class=\"variable language_\">this</span>.<span class=\"title function_\">suggestChildren</span>().<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">  <span class=\"comment\">// 如果存在子节点，则在字符串末尾添加冒号</span></span><br><span class=\"line\">  childrenAsString = childrenAsString ? <span class=\"string\">`:<span class=\"subst\">$&#123;childrenAsString&#125;</span>`</span> : <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 如果当前节点为完整单词，则在字符串末尾添加星号</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> isCompleteString = <span class=\"variable language_\">this</span>.<span class=\"property\">isCompleteWord</span> ? <span class=\"string\">&#x27;*&#x27;</span> : <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回由字符、完整标记和子节点字符串组成的字符串</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.character&#125;</span><span class=\"subst\">$&#123;isCompleteString&#125;</span><span class=\"subst\">$&#123;childrenAsString&#125;</span>`</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Trie-类\"><a href=\"#Trie-类\" class=\"headerlink\" title=\"Trie 类\"></a>Trie 类</h2><h3 id=\"constructor-初始化方法\"><a href=\"#constructor-初始化方法\" class=\"headerlink\" title=\"constructor() 初始化方法\"></a>constructor() 初始化方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建一个新的TrieNode对象，并将其赋值给当前对象的head属性</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">TrieNode</span>(<span class=\"variable constant_\">HEAD_CHARACTER</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"addWord-word-方法\"><a href=\"#addWord-word-方法\" class=\"headerlink\" title=\"addWord(word) 方法\"></a>addWord(word) 方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将单词添加到 Trie 中</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">word</span> - 要添加的单词</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">Trie</span>&#125; - 返回 Trie 对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">addWord</span>(<span class=\"params\">word</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将单词转为字符数组</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> characters = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(word);</span><br><span class=\"line\">  <span class=\"comment\">// 初始化当前节点为 Trie 的根节点</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentNode = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 遍历单词的每个字符</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> charIndex = <span class=\"number\">0</span>; charIndex &lt; characters.<span class=\"property\">length</span>; charIndex += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断是否为单词的最后一个字符</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> isComplete = charIndex === characters.<span class=\"property\">length</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 将当前字符添加为当前节点的子节点，并更新当前节点为添加的子节点</span></span><br><span class=\"line\">    currentNode = currentNode.<span class=\"title function_\">addChild</span>(characters[charIndex], isComplete);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回 Trie 对象</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"deleteWord-word-方法\"><a href=\"#deleteWord-word-方法\" class=\"headerlink\" title=\"deleteWord(word) 方法\"></a>deleteWord(word) 方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">word</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">Trie</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">deleteWord</span>(<span class=\"params\">word</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义深度优先删除函数，参数为当前节点和字符索引（默认为0）</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">depthFirstDelete</span> = (<span class=\"params\">currentNode, charIndex = <span class=\"number\">0</span></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果字符索引超出了单词的长度，说明要删除的字符超出了单词的范围，直接返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (charIndex &gt;= word.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取当前字符</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> character = word[charIndex];</span><br><span class=\"line\">    <span class=\"comment\">// 获取当前字符对应的下一个节点</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextNode = currentNode.<span class=\"title function_\">getChild</span>(character);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果下一个节点为空，说明要删除的单词没有被添加到Trie中，直接返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextNode == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 递归调用深度优先删除函数，继续删除下一个字符</span></span><br><span class=\"line\">    <span class=\"title function_\">depthFirstDelete</span>(nextNode, charIndex + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果当前字符是单词的最后一个字符，将下一个节点的isCompleteWord标记设为false</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (charIndex === (word.<span class=\"property\">length</span> - <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">      nextNode.<span class=\"property\">isCompleteWord</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 只有当下一个节点没有子节点且isCompleteWord为false时，才删除该子节点</span></span><br><span class=\"line\">    currentNode.<span class=\"title function_\">removeChild</span>(character);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 从头节点开始进行深度优先删除</span></span><br><span class=\"line\">  <span class=\"title function_\">depthFirstDelete</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">head</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//返回Trie对象本身</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"suggestNextCharacters-word-方法\"><a href=\"#suggestNextCharacters-word-方法\" class=\"headerlink\" title=\"suggestNextCharacters(word) 方法\"></a>suggestNextCharacters(word) 方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">word</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">suggestNextCharacters</span>(<span class=\"params\">word</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取给定单词的最后一个字符节点</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> lastCharacter = <span class=\"variable language_\">this</span>.<span class=\"title function_\">getLastCharacterNode</span>(word);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果最后一个字符节点不存在</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!lastCharacter) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 返回null</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回最后一个字符节点的建议下一个字符</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> lastCharacter.<span class=\"title function_\">suggestChildren</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"doesWordExist-word-方法\"><a href=\"#doesWordExist-word-方法\" class=\"headerlink\" title=\"doesWordExist(word) 方法\"></a>doesWordExist(word) 方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 检查 Trie 中是否存在完整的单词。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">word</span> - 要检查的单词</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125; - 如果单词存在，则返回 true，否则返回 false</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">doesWordExist</span>(<span class=\"params\">word</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取单词的最后一个字符节点</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> lastCharacter = <span class=\"variable language_\">this</span>.<span class=\"title function_\">getLastCharacterNode</span>(word);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果最后一个字符存在且被标记为完整单词，则返回 true，否则返回 false</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> !!lastCharacter &amp;&amp; lastCharacter.<span class=\"property\">isCompleteWord</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"getLastCharacterNode-word-方法\"><a href=\"#getLastCharacterNode-word-方法\" class=\"headerlink\" title=\"getLastCharacterNode(word) 方法\"></a>getLastCharacterNode(word) 方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">word</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">TrieNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">getLastCharacterNode</span>(<span class=\"params\">word</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> characters = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(word); <span class=\"comment\">// 将字符串转换为字符数组</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentNode = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>; <span class=\"comment\">// 初始化当前节点为头节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> charIndex = <span class=\"number\">0</span>; charIndex &lt; characters.<span class=\"property\">length</span>; charIndex += <span class=\"number\">1</span>) &#123; <span class=\"comment\">// 循环遍历字符数组</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!currentNode.<span class=\"title function_\">hasChild</span>(characters[charIndex])) &#123; <span class=\"comment\">// 如果当前节点没有该字符的子节点</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span>; <span class=\"comment\">// 返回空</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    currentNode = currentNode.<span class=\"title function_\">getChild</span>(characters[charIndex]); <span class=\"comment\">// 更新当前节点为该字符的子节点</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentNode; <span class=\"comment\">// 返回最后访问的节点</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"related_posts":[],"length":1552,"excerpt":"<h2 id=\"字典树\"><a href=\"#字典树\" class=\"headerlink\" title=\"字典树\"></a>字典树</h2><p>在计算机科学中, <strong>字典树(trie,中文又被称为”单词查找树“或 ”键树“)</strong>, 也称为数字树,有时候也被称为基数树或前缀树（因为它们可以通过前缀搜索）,它是一种搜索树–一种已排序的数据结构,通常用于存储动态集或键为字符串的关联数组。</p>\n<p>与二叉搜索树不同, 树上没有节点存储与该节点关联的键; 相反,节点在树上的位置定义了与之关联的键。一个节点的全部后代节点都有一个与该节点关联的通用的字符串前缀, 与根节点关联的是空字符串。</p>\n<p>值对于字典树中关联的节点来说,不是必需的,相反,值往往和相关的叶子相关,以及与一些键相关的内部节点相关。</p>","more":"<p><img src=\"/../images/data-structures/trie.jpg\" alt=\"trie\"></p>\n<h2 id=\"TrieNode\"><a href=\"#TrieNode\" class=\"headerlink\" title=\"TrieNode\"></a>TrieNode</h2><h3 id=\"constructor-character-isCompleteWord-false-初始化方法\"><a href=\"#constructor-character-isCompleteWord-false-初始化方法\" class=\"headerlink\" title=\"constructor(character, isCompleteWord &#x3D; false)初始化方法\"></a>constructor(character, isCompleteWord &#x3D; false)初始化方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 构造函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">character</span> - 字符参数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">boolean</span>&#125; <span class=\"variable\">isCompleteWord</span> - 是否为完整单词</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\">character, isCompleteWord = <span class=\"literal\">false</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">character</span> = character; <span class=\"comment\">// 将传入的字符参数赋值给对象的character属性</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">isCompleteWord</span> = isCompleteWord; <span class=\"comment\">// 将传入的isCompleteWord参数赋值给对象的isCompleteWord属性</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">children</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">HashTable</span>(); <span class=\"comment\">// 创建一个新的HashTable对象，并将其赋值给对象的children属性</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"getChild-character-方法\"><a href=\"#getChild-character-方法\" class=\"headerlink\" title=\"getChild(character) 方法\"></a>getChild(character) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取子节点</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">character</span> - 子节点的字符</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">TrieNode</span>&#125; - 子节点对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">getChild</span>(<span class=\"params\">character</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用character作为键从children映射中获取子节点</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">children</span>.<span class=\"title function_\">get</span>(character);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"addChild-character-isCompleteWord-false-方法\"><a href=\"#addChild-character-isCompleteWord-false-方法\" class=\"headerlink\" title=\"addChild(character, isCompleteWord &#x3D; false) 方法\"></a>addChild(character, isCompleteWord &#x3D; false) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; character  // 参数：要添加的字符</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">boolean</span>&#125; isCompleteWord  // 参数：是否是完整的单词</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">TrieNode</span>&#125;  // 返回值：添加的子节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">addChild</span>(<span class=\"params\">character, isCompleteWord = <span class=\"literal\">false</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果当前节点的子节点集合中不存在该字符</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">children</span>.<span class=\"title function_\">has</span>(character)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建新的子节点，并将其添加到子节点集合中</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">children</span>.<span class=\"title function_\">set</span>(character, <span class=\"keyword\">new</span> <span class=\"title class_\">TrieNode</span>(character, isCompleteWord));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 获取子节点</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> childNode = <span class=\"variable language_\">this</span>.<span class=\"property\">children</span>.<span class=\"title function_\">get</span>(character);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 在类似于将 &quot;car&quot; 添加到 &quot;carpet&quot; 之后的情况下，需要将 &quot;r&quot; 字符标记为完整的单词</span></span><br><span class=\"line\">  childNode.<span class=\"property\">isCompleteWord</span> = childNode.<span class=\"property\">isCompleteWord</span> || isCompleteWord;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回子节点</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> childNode;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"removeChild-character-方法\"><a href=\"#removeChild-character-方法\" class=\"headerlink\" title=\"removeChild(character) 方法\"></a>removeChild(character) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">character</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">TrieNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">removeChild</span>(<span class=\"params\">character</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 通过给定的字符找到对应的子节点</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> childNode = <span class=\"variable language_\">this</span>.<span class=\"title function_\">getChild</span>(character);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 只有当子节点存在、不是完整的单词、且没有子节点时，才删除子节点</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (</span><br><span class=\"line\">    childNode</span><br><span class=\"line\">    &amp;&amp; !childNode.<span class=\"property\">isCompleteWord</span></span><br><span class=\"line\">    &amp;&amp; !childNode.<span class=\"title function_\">hasChildren</span>()</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 从父节点的子节点集合中删除该子节点</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">children</span>.<span class=\"title function_\">delete</span>(character);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回当前 TrieNode 实例</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hasChild-character-方法\"><a href=\"#hasChild-character-方法\" class=\"headerlink\" title=\"hasChild(character) 方法\"></a>hasChild(character) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">character</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">hasChild</span>(<span class=\"params\">character</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">children</span>.<span class=\"title function_\">has</span>(character);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hasChildren-方法\"><a href=\"#hasChildren-方法\" class=\"headerlink\" title=\"hasChildren() 方法\"></a>hasChildren() 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Check whether current TrieNode has children or not.</span></span><br><span class=\"line\"><span class=\"comment\"> * 检查当前 TrieNode 是否有子节点。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回一个布尔值，表示当前 TrieNode 是否有子节点。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">hasChildren</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Get the keys of the children and check the length of the keys array.</span></span><br><span class=\"line\">  <span class=\"comment\">// 获取子节点的键，并检查键数组的长度。</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">children</span>.<span class=\"title function_\">getKeys</span>().<span class=\"property\">length</span> !== <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"suggestChildren-方法\"><a href=\"#suggestChildren-方法\" class=\"headerlink\" title=\"suggestChildren() 方法\"></a>suggestChildren() 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">suggestChildren</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用扩展运算符 (...) 创建一个新数组，其中包含从 children 对象获取的所有键</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> [...<span class=\"variable language_\">this</span>.<span class=\"property\">children</span>.<span class=\"title function_\">getKeys</span>()];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"toString-方法\"><a href=\"#toString-方法\" class=\"headerlink\" title=\"toString() 方法\"></a>toString() 方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回对象的字符串表示形式。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">toString</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取子节点作为字符串的表示形式</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> childrenAsString = <span class=\"variable language_\">this</span>.<span class=\"title function_\">suggestChildren</span>().<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">  <span class=\"comment\">// 如果存在子节点，则在字符串末尾添加冒号</span></span><br><span class=\"line\">  childrenAsString = childrenAsString ? <span class=\"string\">`:<span class=\"subst\">$&#123;childrenAsString&#125;</span>`</span> : <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 如果当前节点为完整单词，则在字符串末尾添加星号</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> isCompleteString = <span class=\"variable language_\">this</span>.<span class=\"property\">isCompleteWord</span> ? <span class=\"string\">&#x27;*&#x27;</span> : <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回由字符、完整标记和子节点字符串组成的字符串</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.character&#125;</span><span class=\"subst\">$&#123;isCompleteString&#125;</span><span class=\"subst\">$&#123;childrenAsString&#125;</span>`</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Trie-类\"><a href=\"#Trie-类\" class=\"headerlink\" title=\"Trie 类\"></a>Trie 类</h2><h3 id=\"constructor-初始化方法\"><a href=\"#constructor-初始化方法\" class=\"headerlink\" title=\"constructor() 初始化方法\"></a>constructor() 初始化方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建一个新的TrieNode对象，并将其赋值给当前对象的head属性</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">TrieNode</span>(<span class=\"variable constant_\">HEAD_CHARACTER</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"addWord-word-方法\"><a href=\"#addWord-word-方法\" class=\"headerlink\" title=\"addWord(word) 方法\"></a>addWord(word) 方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将单词添加到 Trie 中</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">word</span> - 要添加的单词</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">Trie</span>&#125; - 返回 Trie 对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">addWord</span>(<span class=\"params\">word</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将单词转为字符数组</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> characters = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(word);</span><br><span class=\"line\">  <span class=\"comment\">// 初始化当前节点为 Trie 的根节点</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentNode = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 遍历单词的每个字符</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> charIndex = <span class=\"number\">0</span>; charIndex &lt; characters.<span class=\"property\">length</span>; charIndex += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断是否为单词的最后一个字符</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> isComplete = charIndex === characters.<span class=\"property\">length</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 将当前字符添加为当前节点的子节点，并更新当前节点为添加的子节点</span></span><br><span class=\"line\">    currentNode = currentNode.<span class=\"title function_\">addChild</span>(characters[charIndex], isComplete);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回 Trie 对象</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"deleteWord-word-方法\"><a href=\"#deleteWord-word-方法\" class=\"headerlink\" title=\"deleteWord(word) 方法\"></a>deleteWord(word) 方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">word</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">Trie</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">deleteWord</span>(<span class=\"params\">word</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义深度优先删除函数，参数为当前节点和字符索引（默认为0）</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">depthFirstDelete</span> = (<span class=\"params\">currentNode, charIndex = <span class=\"number\">0</span></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果字符索引超出了单词的长度，说明要删除的字符超出了单词的范围，直接返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (charIndex &gt;= word.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取当前字符</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> character = word[charIndex];</span><br><span class=\"line\">    <span class=\"comment\">// 获取当前字符对应的下一个节点</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextNode = currentNode.<span class=\"title function_\">getChild</span>(character);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果下一个节点为空，说明要删除的单词没有被添加到Trie中，直接返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextNode == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 递归调用深度优先删除函数，继续删除下一个字符</span></span><br><span class=\"line\">    <span class=\"title function_\">depthFirstDelete</span>(nextNode, charIndex + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果当前字符是单词的最后一个字符，将下一个节点的isCompleteWord标记设为false</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (charIndex === (word.<span class=\"property\">length</span> - <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">      nextNode.<span class=\"property\">isCompleteWord</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 只有当下一个节点没有子节点且isCompleteWord为false时，才删除该子节点</span></span><br><span class=\"line\">    currentNode.<span class=\"title function_\">removeChild</span>(character);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 从头节点开始进行深度优先删除</span></span><br><span class=\"line\">  <span class=\"title function_\">depthFirstDelete</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">head</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//返回Trie对象本身</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"suggestNextCharacters-word-方法\"><a href=\"#suggestNextCharacters-word-方法\" class=\"headerlink\" title=\"suggestNextCharacters(word) 方法\"></a>suggestNextCharacters(word) 方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">word</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">suggestNextCharacters</span>(<span class=\"params\">word</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取给定单词的最后一个字符节点</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> lastCharacter = <span class=\"variable language_\">this</span>.<span class=\"title function_\">getLastCharacterNode</span>(word);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果最后一个字符节点不存在</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!lastCharacter) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 返回null</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回最后一个字符节点的建议下一个字符</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> lastCharacter.<span class=\"title function_\">suggestChildren</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"doesWordExist-word-方法\"><a href=\"#doesWordExist-word-方法\" class=\"headerlink\" title=\"doesWordExist(word) 方法\"></a>doesWordExist(word) 方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 检查 Trie 中是否存在完整的单词。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">word</span> - 要检查的单词</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125; - 如果单词存在，则返回 true，否则返回 false</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">doesWordExist</span>(<span class=\"params\">word</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取单词的最后一个字符节点</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> lastCharacter = <span class=\"variable language_\">this</span>.<span class=\"title function_\">getLastCharacterNode</span>(word);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果最后一个字符存在且被标记为完整单词，则返回 true，否则返回 false</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> !!lastCharacter &amp;&amp; lastCharacter.<span class=\"property\">isCompleteWord</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"getLastCharacterNode-word-方法\"><a href=\"#getLastCharacterNode-word-方法\" class=\"headerlink\" title=\"getLastCharacterNode(word) 方法\"></a>getLastCharacterNode(word) 方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">word</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">TrieNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">getLastCharacterNode</span>(<span class=\"params\">word</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> characters = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(word); <span class=\"comment\">// 将字符串转换为字符数组</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentNode = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>; <span class=\"comment\">// 初始化当前节点为头节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> charIndex = <span class=\"number\">0</span>; charIndex &lt; characters.<span class=\"property\">length</span>; charIndex += <span class=\"number\">1</span>) &#123; <span class=\"comment\">// 循环遍历字符数组</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!currentNode.<span class=\"title function_\">hasChild</span>(characters[charIndex])) &#123; <span class=\"comment\">// 如果当前节点没有该字符的子节点</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span>; <span class=\"comment\">// 返回空</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    currentNode = currentNode.<span class=\"title function_\">getChild</span>(characters[charIndex]); <span class=\"comment\">// 更新当前节点为该字符的子节点</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentNode; <span class=\"comment\">// 返回最后访问的节点</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"JavaScript Algorithms and Data Structures 源码分析(7) -- 堆 Heap","date":"2023-11-24T08:04:44.000Z","_content":"\n## 堆 (数据结构)\n\n在计算机科学中, 一个 **堆(heap)** 是一种特殊的基于树的数据结构，它满足下面描述的堆属性。\n\n在一个 _最小堆(min heap)_ 中, 如果 `P` 是 `C` 的一个父级节点, 那么 `P` 的 key(或 value)应小于或等于 `C` 的对应值.\n\n<!-- more -->\n\n![min heap](../images/data-structures/min-heap.jpeg)\n\n在一个 _最大堆(max heap)_ 中, `P` 的 key(或 value)大于 `C` 的对应值。\n\n![max heap](../images/data-structures/max-heap.jpeg)\n\n![Array Representation](../images/data-structures/array-representation.jpeg)\n\n在堆“顶部”的没有父级节点的节点,被称之为根节点。\n\n## Heap 类\n\n### 构造函数 constructor\n\n```javascript\n/**\n * @constructs Heap\n * @param {Function} [comparatorFunction] - 可选参数，用于比较元素的函数\n */\nconstructor(comparatorFunction) {\n  // 如果直接构造 Heap 的实例，则抛出错误\n  if (new.target === Heap) {\n    throw new TypeError('Cannot construct Heap instance directly');\n  }\n\n  // 用于存储堆的数组表示\n  this.heapContainer = [];\n\n  // 使用传入的 comparatorFunction 创建一个 Comparator 对象\n  this.compare = new Comparator(comparatorFunction);\n}\n```\n\n### getLeftChildIndex(parentIndex) 方法\n\n```javascript\n/**\n * @param {number} parentIndex 父节点的索引\n * @return {number} 左子节点的索引\n */\ngetLeftChildIndex(parentIndex) {\n  return (2 * parentIndex) + 1;\n}\n```\n\n### getRightChildIndex(parentIndex) 方法\n\n```javascript\n/**\n * @param {number} parentIndex 父节点的索引\n * @return {number} 右子节点的索引\n */\ngetRightChildIndex(parentIndex) {\n  return (2 * parentIndex) + 2;\n}\n```\n\n### getParentIndex(childIndex) 方法\n\n```javascript\n/**\n * @param {number} childIndex 子节点索引\n * @return {number} 返回父节点索引\n */\ngetParentIndex(childIndex) {\n  return Math.floor((childIndex - 1) / 2); // 使用数学公式计算父节点索引\n}\n```\n\n### hasParent(childIndex) 方法\n\n```javascript\n/**\n * 检查给定的子节点索引是否有父节点\n * @param {number} childIndex - 子节点索引\n * @return {boolean} - 如果有父节点则返回 `true`，否则返回 `false`\n */\nhasParent(childIndex) {\n  // 调用 `getParentIndex` 方法获取父节点的索引，并判断是否大于等于 0\n  return this.getParentIndex(childIndex) >= 0;\n}\n```\n\n### hasLeftChild(parentIndex) 方法\n\n```javascript\n/**\n * @param {number} parentIndex 父节点的索引\n * @return {boolean} 返回值为布尔类型，表示是否存在左子节点\n */\nhasLeftChild(parentIndex) {\n  // 获取左子节点的索引\n  return this.getLeftChildIndex(parentIndex) < this.heapContainer.length; // 判断左子节点的索引是否小于堆容器的长度\n}\n```\n\n### hasRightChild(parentIndex) 方法\n\n```javascript\n/**\n * @param {number} parentIndex 父节点的索引\n * @return {boolean} 返回值为布尔类型，表示是否存在右子节点\n */\nhasRightChild(parentIndex) {\n  // 检查右子节点的索引是否小于堆容器的长度\n  return this.getRightChildIndex(parentIndex) < this.heapContainer.length;\n}\n```\n\n### leftChild(parentIndex) 方法\n\n```javascript\n/**\n * @param {number} parentIndex 父节点索引\n * @return {*} 左子节点元素\n */\nleftChild(parentIndex) {\n  return this.heapContainer[this.getLeftChildIndex(parentIndex)];\n}\n```\n\n### rightChild(parentIndex) 方法\n\n```javascript\n/**\n * 获取指定父节点的右子节点的值\n * @param {number} parentIndex 父节点的索引\n * @return {*} 右子节点的值\n */\nrightChild(parentIndex) {\n  // 获取右子节点的索引\n  return this.heapContainer[this.getRightChildIndex(parentIndex)];\n}\n```\n\n### parent(childIndex) 方法\n\n```javascript\n/**\n * @param {number} childIndex 子节点的索引\n * @return {*} 返回父节点的元素\n */\nparent(childIndex) {\n  // 获取父节点的索引\n  const parentIndex = this.getParentIndex(childIndex);\n  // 返回父节点的元素\n  return this.heapContainer[parentIndex];\n}\n```\n\n### swap(indexOne, indexTwo) 方法\n\n```javascript\n/**\n * @param {number} indexOne  // 第一个索引\n * @param {number} indexTwo  // 第二个索引\n */\nswap(indexOne, indexTwo) {\n  const tmp = this.heapContainer[indexTwo];  // 将第二个索引处的值存储在临时变量 tmp 中\n  this.heapContainer[indexTwo] = this.heapContainer[indexOne];  // 将第一个索引处的值赋值给第二个索引处\n  this.heapContainer[indexOne] = tmp;  // 将临时变量 tmp 的值赋值给第一个索引处\n}\n```\n\n### peek() 方法\n\n```javascript\n/**\n * 获取堆顶元素\n * @return {*}\n */\npeek() {\n  // 如果堆容器为空\n  if (this.heapContainer.length === 0) {\n    // 返回空值\n    return null;\n  }\n\n  // 返回堆容器中的第一个元素\n  return this.heapContainer[0];\n}\n```\n\n### poll() 方法\n\n```javascript\n/**\n * 从堆中移除并返回顶部元素\n * @return {*} 返回移除的顶部元素\n */\npoll() {\n  // 如果堆为空，返回空\n  if (this.heapContainer.length === 0) {\n    return null;\n  }\n\n  // 如果堆只有一个元素，移除并返回该元素\n  if (this.heapContainer.length === 1) {\n    return this.heapContainer.pop();\n  }\n\n  // 获取堆顶元素\n  const item = this.heapContainer[0];\n\n  // 将堆尾元素移动到堆顶\n  this.heapContainer[0] = this.heapContainer.pop();\n\n  // 通过 heapifyDown 函数维护堆的性质\n  this.heapifyDown();\n\n  // 返回原始的堆顶元素\n  return item;\n}\n```\n\n### add(item) 方法\n\n```javascript\n/**\n * 添加一个元素到堆中\n * @param {*} item 要添加的元素\n * @return {Heap} 返回添加元素后的堆\n */\nadd(item) {\n  this.heapContainer.push(item); // 将元素添加到堆数组中\n  this.heapifyUp(); // 调整堆的结构，保持堆的性质\n  return this; // 返回添加元素后的堆\n}\n```\n\n### remove(item, comparator = this.compare) 方法\n\n```javascript\n/**\n * @param {*} item\n * @param {Comparator} [comparator]\n * @return {Heap}\n */\nremove(item, comparator = this.compare) {\n  // 找到要移除的item的数量\n  const numberOfItemsToRemove = this.find(item, comparator).length;\n\n  for (let iteration = 0; iteration < numberOfItemsToRemove; iteration += 1) {\n    // 在每次移除后，需要重新找到要移除的item的索引，因为每次堆化过程后，索引都会发生变化\n    const indexToRemove = this.find(item, comparator).pop();\n\n    // 如果要移除的是堆中的最后一个子节点，则直接删除它，无需进行堆化操作\n    if (indexToRemove === (this.heapContainer.length - 1)) {\n      this.heapContainer.pop();\n    } else {\n      // 将堆中的最后一个元素移动到空缺位置\n      this.heapContainer[indexToRemove] = this.heapContainer.pop();\n\n      // 获取父节点\n      const parentItem = this.parent(indexToRemove);\n\n      // 如果没有父节点或者父节点与要删除的节点的顺序正确，则执行堆化向下操作，否则执行堆化向上操作\n      if (\n        this.hasLeftChild(indexToRemove)\n        && (\n          !parentItem\n          || this.pairIsInCorrectOrder(parentItem, this.heapContainer[indexToRemove])\n        )\n      ) {\n        this.heapifyDown(indexToRemove);\n      } else {\n        this.heapifyUp(indexToRemove);\n      }\n    }\n  }\n\n  return this;\n}\n```\n\n### find(item, comparator = this.compare) 方法\n\n```javascript\n/**\n * @param {*} item // 要查找的元素\n * @param {Comparator} [comparator] // 比较器函数，用于比较元素\n * @return {Number[]} // 返回一个包含匹配元素索引的数组\n */\nfind(item, comparator = this.compare) {\n  const foundItemIndices = []; // 存储匹配元素索引的数组\n\n  for (let itemIndex = 0; itemIndex < this.heapContainer.length; itemIndex += 1) { // 遍历 heapContainer 数组\n    if (comparator.equal(item, this.heapContainer[itemIndex])) { // 使用比较器函数比较元素是否相等\n      foundItemIndices.push(itemIndex); // 将匹配元素的索引添加到 foundItemIndices 数组中\n    }\n  }\n\n  return foundItemIndices; // 返回包含匹配元素索引的数组\n}\n```\n\n### isEmpty() 方法\n\n```javascript\n/**\n * @return {boolean} 返回一个布尔值\n */\nisEmpty() {\n  // 检查数组 heapContainer 是否为空\n  return !this.heapContainer.length;\n}\n```\n\n### toString() 方法\n\n```javascript\n/**\n * 返回堆对象的字符串表示形式\n * @return {string} 字符串表示形式\n */\ntoString() {\n  return this.heapContainer.toString(); // 将堆容器转换为字符串\n}\n```\n\n### heapifyUp(customStartIndex) 方法\n\n```javascript\n/**\n * @param {number} [customStartIndex]  // 可选参数，指定堆化过程的起始索引\n */\nheapifyUp(customStartIndex) {  // 定义名为 heapifyUp 的方法，用于维护二叉堆数据结构的堆属性\n  // 将堆容器的最后一个元素（数组中的最后一个元素或树中的左下角元素）提取出来，并将其上移，直到它与其父元素满足正确的顺序关系\n  let currentIndex = customStartIndex || this.heapContainer.length - 1;  // 将当前索引设置为 customStartIndex（如果提供了）或堆容器的最后一个元素的索引\n\n  while (\n    this.hasParent(currentIndex)  // 当前元素有父元素\n    && !this.pairIsInCorrectOrder(this.parent(currentIndex), this.heapContainer[currentIndex])  // 当前元素与其父元素不满足正确的顺序关系\n  ) {\n    this.swap(currentIndex, this.getParentIndex(currentIndex));  // 交换当前元素与其父元素的位置\n    currentIndex = this.getParentIndex(currentIndex);  // 将当前索引更新为父元素的索引\n  }\n}\n```\n\n该方法使用一个 while 循环来比较当前元素与其父元素，并在它们不满足正确的顺序关系时进行交换。循环会一直执行，直到当前元素到达正确的位置或成为堆的根节点。\n\n### heapifyDown(customStartIndex = 0) 方法\n\n```javascript\n/**\n * @param {number} [customStartIndex] // 可选参数，指定开始堆化的索引位置，默认为0\n */\nheapifyDown(customStartIndex = 0) {\n  // 比较父节点与其子节点，并与合适的子节点交换位置\n  // 对交换后的子节点继续进行相同的操作\n  let currentIndex = customStartIndex; // 当前节点的索引\n  let nextIndex = null; // 下一个节点的索引\n\n  while (this.hasLeftChild(currentIndex)) { // 当前节点存在左子节点时循环\n    if (\n      this.hasRightChild(currentIndex) // 当前节点存在右子节点\n      && this.pairIsInCorrectOrder(this.rightChild(currentIndex), this.leftChild(currentIndex)) // 右子节点和左子节点的顺序是否正确\n    ) {\n      nextIndex = this.getRightChildIndex(currentIndex); // 右子节点的索引\n    } else {\n      nextIndex = this.getLeftChildIndex(currentIndex); // 左子节点的索引\n    }\n\n    if (this.pairIsInCorrectOrder(\n      this.heapContainer[currentIndex], // 当前节点的值\n      this.heapContainer[nextIndex], // 下一个节点的值\n    )) {\n      break; // 如果当前节点与下一个节点的顺序正确，则跳出循环\n    }\n\n    this.swap(currentIndex, nextIndex); // 交换当前节点与下一个节点的位置\n    currentIndex = nextIndex; // 更新当前节点的索引为下一个节点的索引\n  }\n}\n```\n\n这个方法是用于执行堆向下调整的过程。它接受一个可选的参数 `customStartIndex`，用于指定开始堆化的索引位置，默认为 0。该方法比较父节点与其子节点，并根据堆的类型（最小堆或最大堆）与合适的子节点交换位置。然后，它继续对交换后的子节点进行相同的操作，直到元素在堆中达到正确的位置为止。\n\n###\n\n```javascript\n/**\n * 检查堆元素对是否按正确顺序排列。\n * 对于MinHeap，第一个元素必须始终小于或等于第二个元素。\n * 对于MaxHeap，第一个元素必须始终大于或等于第二个元素。\n *\n * @param {*} firstElement 第一个元素\n * @param {*} secondElement 第二个元素\n * @return {boolean} 返回布尔值，表示元素对是否按正确顺序排列\n */\n/* istanbul ignore next */\npairIsInCorrectOrder(firstElement, secondElement) {\n  throw new Error(`\n    You have to implement heap pair comparision method\n    for ${firstElement} and ${secondElement} values.\n  `);\n}\n```\n\n这段代码用于检查堆中的元素对是否按正确的顺序排列。根据堆的类型，有两种情况：\n\n对于 `MinHeap`，第一个元素必须始终小于或等于第二个元素。\n对于 `MaxHeap`，第一个元素必须始终大于或等于第二个元素。\n该函数接受两个参数，表示需要进行比较的元素对。然后，它抛出一个错误，并提供了一个错误消息，指示需要实现堆元素对比较的方法。错误消息中包含了第一个元素和第二个元素的值。\n\n## MaxHeap 类\n\n### pairIsInCorrectOrder(firstElement, secondElement) 方法\n\n```javascript\n/**\n * 检查堆元素对是否按照正确的顺序排列。\n * 对于最小堆，第一个元素必须始终小于或等于第二个元素。\n * 对于最大堆，第一个元素必须始终大于或等于第二个元素。\n *\n * @param {*} firstElement 第一个元素\n * @param {*} secondElement 第二个元素\n * @return {boolean} 返回一个布尔值，表示第一个元素是否大于或等于第二个元素\n */\npairIsInCorrectOrder(firstElement, secondElement) {\n  return this.compare.greaterThanOrEqual(firstElement, secondElement);\n}\n```\n\n这个方法用于检查堆元素对是否按照正确的顺序排列。根据堆的类型（最小堆或最大堆），第一个元素必须始终小于或等于第二个元素（最小堆），或者第一个元素必须始终大于或等于第二个元素（最大堆）。\n\n## MinHeap 类\n\n### pairIsInCorrectOrder(firstElement, secondElement) 方法\n\n```javascript\n/**\n * 检查堆元素对是否处于正确的顺序。\n * 对于 MinHeap，第一个元素必须始终小于或等于第二个元素。\n * 对于 MaxHeap，第一个元素必须始终大于或等于第二个元素。\n *\n * @param {*} firstElement 第一个元素\n * @param {*} secondElement 第二个元素\n * @return {boolean} 返回布尔值，表示堆元素对是否处于正确的顺序\n */\npairIsInCorrectOrder(firstElement, secondElement) {\n  // 使用堆的比较器来比较第一个元素和第二个元素的大小，并返回结果\n  return this.compare.lessThanOrEqual(firstElement, secondElement);\n}\n```\n\n---\n\n- 源码地址: [JavaScript Algorithms and Data Structures](https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/heap/Heap.js)\n","source":"_posts/data-structures-007-Heap.md","raw":"---\ntitle: JavaScript Algorithms and Data Structures 源码分析(7) -- 堆 Heap\ndate: 2023-11-24 16:04:44\ntags:\n  - data structures\ncategories:\n  - 数据结构与算法\n---\n\n## 堆 (数据结构)\n\n在计算机科学中, 一个 **堆(heap)** 是一种特殊的基于树的数据结构，它满足下面描述的堆属性。\n\n在一个 _最小堆(min heap)_ 中, 如果 `P` 是 `C` 的一个父级节点, 那么 `P` 的 key(或 value)应小于或等于 `C` 的对应值.\n\n<!-- more -->\n\n![min heap](../images/data-structures/min-heap.jpeg)\n\n在一个 _最大堆(max heap)_ 中, `P` 的 key(或 value)大于 `C` 的对应值。\n\n![max heap](../images/data-structures/max-heap.jpeg)\n\n![Array Representation](../images/data-structures/array-representation.jpeg)\n\n在堆“顶部”的没有父级节点的节点,被称之为根节点。\n\n## Heap 类\n\n### 构造函数 constructor\n\n```javascript\n/**\n * @constructs Heap\n * @param {Function} [comparatorFunction] - 可选参数，用于比较元素的函数\n */\nconstructor(comparatorFunction) {\n  // 如果直接构造 Heap 的实例，则抛出错误\n  if (new.target === Heap) {\n    throw new TypeError('Cannot construct Heap instance directly');\n  }\n\n  // 用于存储堆的数组表示\n  this.heapContainer = [];\n\n  // 使用传入的 comparatorFunction 创建一个 Comparator 对象\n  this.compare = new Comparator(comparatorFunction);\n}\n```\n\n### getLeftChildIndex(parentIndex) 方法\n\n```javascript\n/**\n * @param {number} parentIndex 父节点的索引\n * @return {number} 左子节点的索引\n */\ngetLeftChildIndex(parentIndex) {\n  return (2 * parentIndex) + 1;\n}\n```\n\n### getRightChildIndex(parentIndex) 方法\n\n```javascript\n/**\n * @param {number} parentIndex 父节点的索引\n * @return {number} 右子节点的索引\n */\ngetRightChildIndex(parentIndex) {\n  return (2 * parentIndex) + 2;\n}\n```\n\n### getParentIndex(childIndex) 方法\n\n```javascript\n/**\n * @param {number} childIndex 子节点索引\n * @return {number} 返回父节点索引\n */\ngetParentIndex(childIndex) {\n  return Math.floor((childIndex - 1) / 2); // 使用数学公式计算父节点索引\n}\n```\n\n### hasParent(childIndex) 方法\n\n```javascript\n/**\n * 检查给定的子节点索引是否有父节点\n * @param {number} childIndex - 子节点索引\n * @return {boolean} - 如果有父节点则返回 `true`，否则返回 `false`\n */\nhasParent(childIndex) {\n  // 调用 `getParentIndex` 方法获取父节点的索引，并判断是否大于等于 0\n  return this.getParentIndex(childIndex) >= 0;\n}\n```\n\n### hasLeftChild(parentIndex) 方法\n\n```javascript\n/**\n * @param {number} parentIndex 父节点的索引\n * @return {boolean} 返回值为布尔类型，表示是否存在左子节点\n */\nhasLeftChild(parentIndex) {\n  // 获取左子节点的索引\n  return this.getLeftChildIndex(parentIndex) < this.heapContainer.length; // 判断左子节点的索引是否小于堆容器的长度\n}\n```\n\n### hasRightChild(parentIndex) 方法\n\n```javascript\n/**\n * @param {number} parentIndex 父节点的索引\n * @return {boolean} 返回值为布尔类型，表示是否存在右子节点\n */\nhasRightChild(parentIndex) {\n  // 检查右子节点的索引是否小于堆容器的长度\n  return this.getRightChildIndex(parentIndex) < this.heapContainer.length;\n}\n```\n\n### leftChild(parentIndex) 方法\n\n```javascript\n/**\n * @param {number} parentIndex 父节点索引\n * @return {*} 左子节点元素\n */\nleftChild(parentIndex) {\n  return this.heapContainer[this.getLeftChildIndex(parentIndex)];\n}\n```\n\n### rightChild(parentIndex) 方法\n\n```javascript\n/**\n * 获取指定父节点的右子节点的值\n * @param {number} parentIndex 父节点的索引\n * @return {*} 右子节点的值\n */\nrightChild(parentIndex) {\n  // 获取右子节点的索引\n  return this.heapContainer[this.getRightChildIndex(parentIndex)];\n}\n```\n\n### parent(childIndex) 方法\n\n```javascript\n/**\n * @param {number} childIndex 子节点的索引\n * @return {*} 返回父节点的元素\n */\nparent(childIndex) {\n  // 获取父节点的索引\n  const parentIndex = this.getParentIndex(childIndex);\n  // 返回父节点的元素\n  return this.heapContainer[parentIndex];\n}\n```\n\n### swap(indexOne, indexTwo) 方法\n\n```javascript\n/**\n * @param {number} indexOne  // 第一个索引\n * @param {number} indexTwo  // 第二个索引\n */\nswap(indexOne, indexTwo) {\n  const tmp = this.heapContainer[indexTwo];  // 将第二个索引处的值存储在临时变量 tmp 中\n  this.heapContainer[indexTwo] = this.heapContainer[indexOne];  // 将第一个索引处的值赋值给第二个索引处\n  this.heapContainer[indexOne] = tmp;  // 将临时变量 tmp 的值赋值给第一个索引处\n}\n```\n\n### peek() 方法\n\n```javascript\n/**\n * 获取堆顶元素\n * @return {*}\n */\npeek() {\n  // 如果堆容器为空\n  if (this.heapContainer.length === 0) {\n    // 返回空值\n    return null;\n  }\n\n  // 返回堆容器中的第一个元素\n  return this.heapContainer[0];\n}\n```\n\n### poll() 方法\n\n```javascript\n/**\n * 从堆中移除并返回顶部元素\n * @return {*} 返回移除的顶部元素\n */\npoll() {\n  // 如果堆为空，返回空\n  if (this.heapContainer.length === 0) {\n    return null;\n  }\n\n  // 如果堆只有一个元素，移除并返回该元素\n  if (this.heapContainer.length === 1) {\n    return this.heapContainer.pop();\n  }\n\n  // 获取堆顶元素\n  const item = this.heapContainer[0];\n\n  // 将堆尾元素移动到堆顶\n  this.heapContainer[0] = this.heapContainer.pop();\n\n  // 通过 heapifyDown 函数维护堆的性质\n  this.heapifyDown();\n\n  // 返回原始的堆顶元素\n  return item;\n}\n```\n\n### add(item) 方法\n\n```javascript\n/**\n * 添加一个元素到堆中\n * @param {*} item 要添加的元素\n * @return {Heap} 返回添加元素后的堆\n */\nadd(item) {\n  this.heapContainer.push(item); // 将元素添加到堆数组中\n  this.heapifyUp(); // 调整堆的结构，保持堆的性质\n  return this; // 返回添加元素后的堆\n}\n```\n\n### remove(item, comparator = this.compare) 方法\n\n```javascript\n/**\n * @param {*} item\n * @param {Comparator} [comparator]\n * @return {Heap}\n */\nremove(item, comparator = this.compare) {\n  // 找到要移除的item的数量\n  const numberOfItemsToRemove = this.find(item, comparator).length;\n\n  for (let iteration = 0; iteration < numberOfItemsToRemove; iteration += 1) {\n    // 在每次移除后，需要重新找到要移除的item的索引，因为每次堆化过程后，索引都会发生变化\n    const indexToRemove = this.find(item, comparator).pop();\n\n    // 如果要移除的是堆中的最后一个子节点，则直接删除它，无需进行堆化操作\n    if (indexToRemove === (this.heapContainer.length - 1)) {\n      this.heapContainer.pop();\n    } else {\n      // 将堆中的最后一个元素移动到空缺位置\n      this.heapContainer[indexToRemove] = this.heapContainer.pop();\n\n      // 获取父节点\n      const parentItem = this.parent(indexToRemove);\n\n      // 如果没有父节点或者父节点与要删除的节点的顺序正确，则执行堆化向下操作，否则执行堆化向上操作\n      if (\n        this.hasLeftChild(indexToRemove)\n        && (\n          !parentItem\n          || this.pairIsInCorrectOrder(parentItem, this.heapContainer[indexToRemove])\n        )\n      ) {\n        this.heapifyDown(indexToRemove);\n      } else {\n        this.heapifyUp(indexToRemove);\n      }\n    }\n  }\n\n  return this;\n}\n```\n\n### find(item, comparator = this.compare) 方法\n\n```javascript\n/**\n * @param {*} item // 要查找的元素\n * @param {Comparator} [comparator] // 比较器函数，用于比较元素\n * @return {Number[]} // 返回一个包含匹配元素索引的数组\n */\nfind(item, comparator = this.compare) {\n  const foundItemIndices = []; // 存储匹配元素索引的数组\n\n  for (let itemIndex = 0; itemIndex < this.heapContainer.length; itemIndex += 1) { // 遍历 heapContainer 数组\n    if (comparator.equal(item, this.heapContainer[itemIndex])) { // 使用比较器函数比较元素是否相等\n      foundItemIndices.push(itemIndex); // 将匹配元素的索引添加到 foundItemIndices 数组中\n    }\n  }\n\n  return foundItemIndices; // 返回包含匹配元素索引的数组\n}\n```\n\n### isEmpty() 方法\n\n```javascript\n/**\n * @return {boolean} 返回一个布尔值\n */\nisEmpty() {\n  // 检查数组 heapContainer 是否为空\n  return !this.heapContainer.length;\n}\n```\n\n### toString() 方法\n\n```javascript\n/**\n * 返回堆对象的字符串表示形式\n * @return {string} 字符串表示形式\n */\ntoString() {\n  return this.heapContainer.toString(); // 将堆容器转换为字符串\n}\n```\n\n### heapifyUp(customStartIndex) 方法\n\n```javascript\n/**\n * @param {number} [customStartIndex]  // 可选参数，指定堆化过程的起始索引\n */\nheapifyUp(customStartIndex) {  // 定义名为 heapifyUp 的方法，用于维护二叉堆数据结构的堆属性\n  // 将堆容器的最后一个元素（数组中的最后一个元素或树中的左下角元素）提取出来，并将其上移，直到它与其父元素满足正确的顺序关系\n  let currentIndex = customStartIndex || this.heapContainer.length - 1;  // 将当前索引设置为 customStartIndex（如果提供了）或堆容器的最后一个元素的索引\n\n  while (\n    this.hasParent(currentIndex)  // 当前元素有父元素\n    && !this.pairIsInCorrectOrder(this.parent(currentIndex), this.heapContainer[currentIndex])  // 当前元素与其父元素不满足正确的顺序关系\n  ) {\n    this.swap(currentIndex, this.getParentIndex(currentIndex));  // 交换当前元素与其父元素的位置\n    currentIndex = this.getParentIndex(currentIndex);  // 将当前索引更新为父元素的索引\n  }\n}\n```\n\n该方法使用一个 while 循环来比较当前元素与其父元素，并在它们不满足正确的顺序关系时进行交换。循环会一直执行，直到当前元素到达正确的位置或成为堆的根节点。\n\n### heapifyDown(customStartIndex = 0) 方法\n\n```javascript\n/**\n * @param {number} [customStartIndex] // 可选参数，指定开始堆化的索引位置，默认为0\n */\nheapifyDown(customStartIndex = 0) {\n  // 比较父节点与其子节点，并与合适的子节点交换位置\n  // 对交换后的子节点继续进行相同的操作\n  let currentIndex = customStartIndex; // 当前节点的索引\n  let nextIndex = null; // 下一个节点的索引\n\n  while (this.hasLeftChild(currentIndex)) { // 当前节点存在左子节点时循环\n    if (\n      this.hasRightChild(currentIndex) // 当前节点存在右子节点\n      && this.pairIsInCorrectOrder(this.rightChild(currentIndex), this.leftChild(currentIndex)) // 右子节点和左子节点的顺序是否正确\n    ) {\n      nextIndex = this.getRightChildIndex(currentIndex); // 右子节点的索引\n    } else {\n      nextIndex = this.getLeftChildIndex(currentIndex); // 左子节点的索引\n    }\n\n    if (this.pairIsInCorrectOrder(\n      this.heapContainer[currentIndex], // 当前节点的值\n      this.heapContainer[nextIndex], // 下一个节点的值\n    )) {\n      break; // 如果当前节点与下一个节点的顺序正确，则跳出循环\n    }\n\n    this.swap(currentIndex, nextIndex); // 交换当前节点与下一个节点的位置\n    currentIndex = nextIndex; // 更新当前节点的索引为下一个节点的索引\n  }\n}\n```\n\n这个方法是用于执行堆向下调整的过程。它接受一个可选的参数 `customStartIndex`，用于指定开始堆化的索引位置，默认为 0。该方法比较父节点与其子节点，并根据堆的类型（最小堆或最大堆）与合适的子节点交换位置。然后，它继续对交换后的子节点进行相同的操作，直到元素在堆中达到正确的位置为止。\n\n###\n\n```javascript\n/**\n * 检查堆元素对是否按正确顺序排列。\n * 对于MinHeap，第一个元素必须始终小于或等于第二个元素。\n * 对于MaxHeap，第一个元素必须始终大于或等于第二个元素。\n *\n * @param {*} firstElement 第一个元素\n * @param {*} secondElement 第二个元素\n * @return {boolean} 返回布尔值，表示元素对是否按正确顺序排列\n */\n/* istanbul ignore next */\npairIsInCorrectOrder(firstElement, secondElement) {\n  throw new Error(`\n    You have to implement heap pair comparision method\n    for ${firstElement} and ${secondElement} values.\n  `);\n}\n```\n\n这段代码用于检查堆中的元素对是否按正确的顺序排列。根据堆的类型，有两种情况：\n\n对于 `MinHeap`，第一个元素必须始终小于或等于第二个元素。\n对于 `MaxHeap`，第一个元素必须始终大于或等于第二个元素。\n该函数接受两个参数，表示需要进行比较的元素对。然后，它抛出一个错误，并提供了一个错误消息，指示需要实现堆元素对比较的方法。错误消息中包含了第一个元素和第二个元素的值。\n\n## MaxHeap 类\n\n### pairIsInCorrectOrder(firstElement, secondElement) 方法\n\n```javascript\n/**\n * 检查堆元素对是否按照正确的顺序排列。\n * 对于最小堆，第一个元素必须始终小于或等于第二个元素。\n * 对于最大堆，第一个元素必须始终大于或等于第二个元素。\n *\n * @param {*} firstElement 第一个元素\n * @param {*} secondElement 第二个元素\n * @return {boolean} 返回一个布尔值，表示第一个元素是否大于或等于第二个元素\n */\npairIsInCorrectOrder(firstElement, secondElement) {\n  return this.compare.greaterThanOrEqual(firstElement, secondElement);\n}\n```\n\n这个方法用于检查堆元素对是否按照正确的顺序排列。根据堆的类型（最小堆或最大堆），第一个元素必须始终小于或等于第二个元素（最小堆），或者第一个元素必须始终大于或等于第二个元素（最大堆）。\n\n## MinHeap 类\n\n### pairIsInCorrectOrder(firstElement, secondElement) 方法\n\n```javascript\n/**\n * 检查堆元素对是否处于正确的顺序。\n * 对于 MinHeap，第一个元素必须始终小于或等于第二个元素。\n * 对于 MaxHeap，第一个元素必须始终大于或等于第二个元素。\n *\n * @param {*} firstElement 第一个元素\n * @param {*} secondElement 第二个元素\n * @return {boolean} 返回布尔值，表示堆元素对是否处于正确的顺序\n */\npairIsInCorrectOrder(firstElement, secondElement) {\n  // 使用堆的比较器来比较第一个元素和第二个元素的大小，并返回结果\n  return this.compare.lessThanOrEqual(firstElement, secondElement);\n}\n```\n\n---\n\n- 源码地址: [JavaScript Algorithms and Data Structures](https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/heap/Heap.js)\n","slug":"data-structures-007-Heap","published":1,"updated":"2023-11-24T08:07:21.625Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clq4xe1da000ztz2h3ic538s3","content":"<h2 id=\"堆-数据结构\"><a href=\"#堆-数据结构\" class=\"headerlink\" title=\"堆 (数据结构)\"></a>堆 (数据结构)</h2><p>在计算机科学中, 一个 <strong>堆(heap)</strong> 是一种特殊的基于树的数据结构，它满足下面描述的堆属性。</p>\n<p>在一个 <em>最小堆(min heap)</em> 中, 如果 <code>P</code> 是 <code>C</code> 的一个父级节点, 那么 <code>P</code> 的 key(或 value)应小于或等于 <code>C</code> 的对应值.</p>\n<span id=\"more\"></span>\n\n<p><img src=\"/../images/data-structures/min-heap.jpeg\" alt=\"min heap\"></p>\n<p>在一个 <em>最大堆(max heap)</em> 中, <code>P</code> 的 key(或 value)大于 <code>C</code> 的对应值。</p>\n<p><img src=\"/../images/data-structures/max-heap.jpeg\" alt=\"max heap\"></p>\n<p><img src=\"/../images/data-structures/array-representation.jpeg\" alt=\"Array Representation\"></p>\n<p>在堆“顶部”的没有父级节点的节点,被称之为根节点。</p>\n<h2 id=\"Heap-类\"><a href=\"#Heap-类\" class=\"headerlink\" title=\"Heap 类\"></a>Heap 类</h2><h3 id=\"构造函数-constructor\"><a href=\"#构造函数-constructor\" class=\"headerlink\" title=\"构造函数 constructor\"></a>构造函数 constructor</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@constructs</span> <span class=\"variable\">Heap</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; [comparatorFunction] - 可选参数，用于比较元素的函数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\">comparatorFunction</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果直接构造 Heap 的实例，则抛出错误</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">new</span>.<span class=\"property\">target</span> === <span class=\"title class_\">Heap</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&#x27;Cannot construct Heap instance directly&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 用于存储堆的数组表示</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span> = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 使用传入的 comparatorFunction 创建一个 Comparator 对象</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">compare</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>(comparatorFunction);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"getLeftChildIndex-parentIndex-方法\"><a href=\"#getLeftChildIndex-parentIndex-方法\" class=\"headerlink\" title=\"getLeftChildIndex(parentIndex) 方法\"></a>getLeftChildIndex(parentIndex) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; parentIndex 父节点的索引</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125; 左子节点的索引</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">getLeftChildIndex</span>(<span class=\"params\">parentIndex</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"number\">2</span> * parentIndex) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"getRightChildIndex-parentIndex-方法\"><a href=\"#getRightChildIndex-parentIndex-方法\" class=\"headerlink\" title=\"getRightChildIndex(parentIndex) 方法\"></a>getRightChildIndex(parentIndex) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; parentIndex 父节点的索引</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125; 右子节点的索引</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">getRightChildIndex</span>(<span class=\"params\">parentIndex</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"number\">2</span> * parentIndex) + <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"getParentIndex-childIndex-方法\"><a href=\"#getParentIndex-childIndex-方法\" class=\"headerlink\" title=\"getParentIndex(childIndex) 方法\"></a>getParentIndex(childIndex) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; childIndex 子节点索引</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125; 返回父节点索引</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">getParentIndex</span>(<span class=\"params\">childIndex</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((childIndex - <span class=\"number\">1</span>) / <span class=\"number\">2</span>); <span class=\"comment\">// 使用数学公式计算父节点索引</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hasParent-childIndex-方法\"><a href=\"#hasParent-childIndex-方法\" class=\"headerlink\" title=\"hasParent(childIndex) 方法\"></a>hasParent(childIndex) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 检查给定的子节点索引是否有父节点</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">childIndex</span> - 子节点索引</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125; - 如果有父节点则返回 `true`，否则返回 `false`</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">hasParent</span>(<span class=\"params\">childIndex</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 调用 `getParentIndex` 方法获取父节点的索引，并判断是否大于等于 0</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">getParentIndex</span>(childIndex) &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hasLeftChild-parentIndex-方法\"><a href=\"#hasLeftChild-parentIndex-方法\" class=\"headerlink\" title=\"hasLeftChild(parentIndex) 方法\"></a>hasLeftChild(parentIndex) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; parentIndex 父节点的索引</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125; 返回值为布尔类型，表示是否存在左子节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">hasLeftChild</span>(<span class=\"params\">parentIndex</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取左子节点的索引</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">getLeftChildIndex</span>(parentIndex) &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>.<span class=\"property\">length</span>; <span class=\"comment\">// 判断左子节点的索引是否小于堆容器的长度</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hasRightChild-parentIndex-方法\"><a href=\"#hasRightChild-parentIndex-方法\" class=\"headerlink\" title=\"hasRightChild(parentIndex) 方法\"></a>hasRightChild(parentIndex) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; parentIndex 父节点的索引</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125; 返回值为布尔类型，表示是否存在右子节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">hasRightChild</span>(<span class=\"params\">parentIndex</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 检查右子节点的索引是否小于堆容器的长度</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">getRightChildIndex</span>(parentIndex) &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"leftChild-parentIndex-方法\"><a href=\"#leftChild-parentIndex-方法\" class=\"headerlink\" title=\"leftChild(parentIndex) 方法\"></a>leftChild(parentIndex) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; parentIndex 父节点索引</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">*</span>&#125; 左子节点元素</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">leftChild</span>(<span class=\"params\">parentIndex</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>[<span class=\"variable language_\">this</span>.<span class=\"title function_\">getLeftChildIndex</span>(parentIndex)];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"rightChild-parentIndex-方法\"><a href=\"#rightChild-parentIndex-方法\" class=\"headerlink\" title=\"rightChild(parentIndex) 方法\"></a>rightChild(parentIndex) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取指定父节点的右子节点的值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; parentIndex 父节点的索引</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">*</span>&#125; 右子节点的值</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">rightChild</span>(<span class=\"params\">parentIndex</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取右子节点的索引</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>[<span class=\"variable language_\">this</span>.<span class=\"title function_\">getRightChildIndex</span>(parentIndex)];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"parent-childIndex-方法\"><a href=\"#parent-childIndex-方法\" class=\"headerlink\" title=\"parent(childIndex) 方法\"></a>parent(childIndex) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; childIndex 子节点的索引</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">*</span>&#125; 返回父节点的元素</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">parent</span>(<span class=\"params\">childIndex</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取父节点的索引</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> parentIndex = <span class=\"variable language_\">this</span>.<span class=\"title function_\">getParentIndex</span>(childIndex);</span><br><span class=\"line\">  <span class=\"comment\">// 返回父节点的元素</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>[parentIndex];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"swap-indexOne-indexTwo-方法\"><a href=\"#swap-indexOne-indexTwo-方法\" class=\"headerlink\" title=\"swap(indexOne, indexTwo) 方法\"></a>swap(indexOne, indexTwo) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; indexOne  // 第一个索引</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; indexTwo  // 第二个索引</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">swap</span>(<span class=\"params\">indexOne, indexTwo</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> tmp = <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>[indexTwo];  <span class=\"comment\">// 将第二个索引处的值存储在临时变量 tmp 中</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>[indexTwo] = <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>[indexOne];  <span class=\"comment\">// 将第一个索引处的值赋值给第二个索引处</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>[indexOne] = tmp;  <span class=\"comment\">// 将临时变量 tmp 的值赋值给第一个索引处</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"peek-方法\"><a href=\"#peek-方法\" class=\"headerlink\" title=\"peek() 方法\"></a>peek() 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取堆顶元素</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">*</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">peek</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果堆容器为空</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>.<span class=\"property\">length</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 返回空值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回堆容器中的第一个元素</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"poll-方法\"><a href=\"#poll-方法\" class=\"headerlink\" title=\"poll() 方法\"></a>poll() 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 从堆中移除并返回顶部元素</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">*</span>&#125; 返回移除的顶部元素</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">poll</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果堆为空，返回空</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>.<span class=\"property\">length</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果堆只有一个元素，移除并返回该元素</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>.<span class=\"property\">length</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 获取堆顶元素</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> item = <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将堆尾元素移动到堆顶</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>[<span class=\"number\">0</span>] = <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 通过 heapifyDown 函数维护堆的性质</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">heapifyDown</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回原始的堆顶元素</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> item;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"add-item-方法\"><a href=\"#add-item-方法\" class=\"headerlink\" title=\"add(item) 方法\"></a>add(item) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 添加一个元素到堆中</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; item 要添加的元素</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">Heap</span>&#125; 返回添加元素后的堆</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">add</span>(<span class=\"params\">item</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>.<span class=\"title function_\">push</span>(item); <span class=\"comment\">// 将元素添加到堆数组中</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">heapifyUp</span>(); <span class=\"comment\">// 调整堆的结构，保持堆的性质</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>; <span class=\"comment\">// 返回添加元素后的堆</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"remove-item-comparator-this-compare-方法\"><a href=\"#remove-item-comparator-this-compare-方法\" class=\"headerlink\" title=\"remove(item, comparator &#x3D; this.compare) 方法\"></a>remove(item, comparator &#x3D; this.compare) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">item</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Comparator</span>&#125; [comparator]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">Heap</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">remove</span>(<span class=\"params\">item, comparator = <span class=\"variable language_\">this</span>.compare</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 找到要移除的item的数量</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> numberOfItemsToRemove = <span class=\"variable language_\">this</span>.<span class=\"title function_\">find</span>(item, comparator).<span class=\"property\">length</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> iteration = <span class=\"number\">0</span>; iteration &lt; numberOfItemsToRemove; iteration += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在每次移除后，需要重新找到要移除的item的索引，因为每次堆化过程后，索引都会发生变化</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> indexToRemove = <span class=\"variable language_\">this</span>.<span class=\"title function_\">find</span>(item, comparator).<span class=\"title function_\">pop</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果要移除的是堆中的最后一个子节点，则直接删除它，无需进行堆化操作</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (indexToRemove === (<span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 将堆中的最后一个元素移动到空缺位置</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>[indexToRemove] = <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 获取父节点</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> parentItem = <span class=\"variable language_\">this</span>.<span class=\"title function_\">parent</span>(indexToRemove);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 如果没有父节点或者父节点与要删除的节点的顺序正确，则执行堆化向下操作，否则执行堆化向上操作</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">hasLeftChild</span>(indexToRemove)</span><br><span class=\"line\">        &amp;&amp; (</span><br><span class=\"line\">          !parentItem</span><br><span class=\"line\">          || <span class=\"variable language_\">this</span>.<span class=\"title function_\">pairIsInCorrectOrder</span>(parentItem, <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>[indexToRemove])</span><br><span class=\"line\">        )</span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">heapifyDown</span>(indexToRemove);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">heapifyUp</span>(indexToRemove);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"find-item-comparator-this-compare-方法\"><a href=\"#find-item-comparator-this-compare-方法\" class=\"headerlink\" title=\"find(item, comparator &#x3D; this.compare) 方法\"></a>find(item, comparator &#x3D; this.compare) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; item // 要查找的元素</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Comparator</span>&#125; [comparator] // 比较器函数，用于比较元素</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">Number[]</span>&#125; // 返回一个包含匹配元素索引的数组</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">find</span>(<span class=\"params\">item, comparator = <span class=\"variable language_\">this</span>.compare</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> foundItemIndices = []; <span class=\"comment\">// 存储匹配元素索引的数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> itemIndex = <span class=\"number\">0</span>; itemIndex &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>.<span class=\"property\">length</span>; itemIndex += <span class=\"number\">1</span>) &#123; <span class=\"comment\">// 遍历 heapContainer 数组</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (comparator.<span class=\"title function_\">equal</span>(item, <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>[itemIndex])) &#123; <span class=\"comment\">// 使用比较器函数比较元素是否相等</span></span><br><span class=\"line\">      foundItemIndices.<span class=\"title function_\">push</span>(itemIndex); <span class=\"comment\">// 将匹配元素的索引添加到 foundItemIndices 数组中</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> foundItemIndices; <span class=\"comment\">// 返回包含匹配元素索引的数组</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"isEmpty-方法\"><a href=\"#isEmpty-方法\" class=\"headerlink\" title=\"isEmpty() 方法\"></a>isEmpty() 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125; 返回一个布尔值</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">isEmpty</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 检查数组 heapContainer 是否为空</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> !<span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"toString-方法\"><a href=\"#toString-方法\" class=\"headerlink\" title=\"toString() 方法\"></a>toString() 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回堆对象的字符串表示形式</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string</span>&#125; 字符串表示形式</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">toString</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>.<span class=\"title function_\">toString</span>(); <span class=\"comment\">// 将堆容器转换为字符串</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"heapifyUp-customStartIndex-方法\"><a href=\"#heapifyUp-customStartIndex-方法\" class=\"headerlink\" title=\"heapifyUp(customStartIndex) 方法\"></a>heapifyUp(customStartIndex) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; [customStartIndex]  // 可选参数，指定堆化过程的起始索引</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">heapifyUp</span>(<span class=\"params\">customStartIndex</span>) &#123;  <span class=\"comment\">// 定义名为 heapifyUp 的方法，用于维护二叉堆数据结构的堆属性</span></span><br><span class=\"line\">  <span class=\"comment\">// 将堆容器的最后一个元素（数组中的最后一个元素或树中的左下角元素）提取出来，并将其上移，直到它与其父元素满足正确的顺序关系</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentIndex = customStartIndex || <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>;  <span class=\"comment\">// 将当前索引设置为 customStartIndex（如果提供了）或堆容器的最后一个元素的索引</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">hasParent</span>(currentIndex)  <span class=\"comment\">// 当前元素有父元素</span></span><br><span class=\"line\">    &amp;&amp; !<span class=\"variable language_\">this</span>.<span class=\"title function_\">pairIsInCorrectOrder</span>(<span class=\"variable language_\">this</span>.<span class=\"title function_\">parent</span>(currentIndex), <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>[currentIndex])  <span class=\"comment\">// 当前元素与其父元素不满足正确的顺序关系</span></span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">swap</span>(currentIndex, <span class=\"variable language_\">this</span>.<span class=\"title function_\">getParentIndex</span>(currentIndex));  <span class=\"comment\">// 交换当前元素与其父元素的位置</span></span><br><span class=\"line\">    currentIndex = <span class=\"variable language_\">this</span>.<span class=\"title function_\">getParentIndex</span>(currentIndex);  <span class=\"comment\">// 将当前索引更新为父元素的索引</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该方法使用一个 while 循环来比较当前元素与其父元素，并在它们不满足正确的顺序关系时进行交换。循环会一直执行，直到当前元素到达正确的位置或成为堆的根节点。</p>\n<h3 id=\"heapifyDown-customStartIndex-0-方法\"><a href=\"#heapifyDown-customStartIndex-0-方法\" class=\"headerlink\" title=\"heapifyDown(customStartIndex &#x3D; 0) 方法\"></a>heapifyDown(customStartIndex &#x3D; 0) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; [customStartIndex] // 可选参数，指定开始堆化的索引位置，默认为0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">heapifyDown</span>(<span class=\"params\">customStartIndex = <span class=\"number\">0</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 比较父节点与其子节点，并与合适的子节点交换位置</span></span><br><span class=\"line\">  <span class=\"comment\">// 对交换后的子节点继续进行相同的操作</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentIndex = customStartIndex; <span class=\"comment\">// 当前节点的索引</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> nextIndex = <span class=\"literal\">null</span>; <span class=\"comment\">// 下一个节点的索引</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"variable language_\">this</span>.<span class=\"title function_\">hasLeftChild</span>(currentIndex)) &#123; <span class=\"comment\">// 当前节点存在左子节点时循环</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">hasRightChild</span>(currentIndex) <span class=\"comment\">// 当前节点存在右子节点</span></span><br><span class=\"line\">      &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"title function_\">pairIsInCorrectOrder</span>(<span class=\"variable language_\">this</span>.<span class=\"title function_\">rightChild</span>(currentIndex), <span class=\"variable language_\">this</span>.<span class=\"title function_\">leftChild</span>(currentIndex)) <span class=\"comment\">// 右子节点和左子节点的顺序是否正确</span></span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      nextIndex = <span class=\"variable language_\">this</span>.<span class=\"title function_\">getRightChildIndex</span>(currentIndex); <span class=\"comment\">// 右子节点的索引</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      nextIndex = <span class=\"variable language_\">this</span>.<span class=\"title function_\">getLeftChildIndex</span>(currentIndex); <span class=\"comment\">// 左子节点的索引</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"title function_\">pairIsInCorrectOrder</span>(</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>[currentIndex], <span class=\"comment\">// 当前节点的值</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>[nextIndex], <span class=\"comment\">// 下一个节点的值</span></span><br><span class=\"line\">    )) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>; <span class=\"comment\">// 如果当前节点与下一个节点的顺序正确，则跳出循环</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">swap</span>(currentIndex, nextIndex); <span class=\"comment\">// 交换当前节点与下一个节点的位置</span></span><br><span class=\"line\">    currentIndex = nextIndex; <span class=\"comment\">// 更新当前节点的索引为下一个节点的索引</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个方法是用于执行堆向下调整的过程。它接受一个可选的参数 <code>customStartIndex</code>，用于指定开始堆化的索引位置，默认为 0。该方法比较父节点与其子节点，并根据堆的类型（最小堆或最大堆）与合适的子节点交换位置。然后，它继续对交换后的子节点进行相同的操作，直到元素在堆中达到正确的位置为止。</p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 检查堆元素对是否按正确顺序排列。</span></span><br><span class=\"line\"><span class=\"comment\"> * 对于MinHeap，第一个元素必须始终小于或等于第二个元素。</span></span><br><span class=\"line\"><span class=\"comment\"> * 对于MaxHeap，第一个元素必须始终大于或等于第二个元素。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; firstElement 第一个元素</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; secondElement 第二个元素</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125; 返回布尔值，表示元素对是否按正确顺序排列</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* istanbul ignore next */</span></span><br><span class=\"line\"><span class=\"title function_\">pairIsInCorrectOrder</span>(<span class=\"params\">firstElement, secondElement</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    You have to implement heap pair comparision method</span></span><br><span class=\"line\"><span class=\"string\">    for <span class=\"subst\">$&#123;firstElement&#125;</span> and <span class=\"subst\">$&#123;secondElement&#125;</span> values.</span></span><br><span class=\"line\"><span class=\"string\">  `</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这段代码用于检查堆中的元素对是否按正确的顺序排列。根据堆的类型，有两种情况：</p>\n<p>对于 <code>MinHeap</code>，第一个元素必须始终小于或等于第二个元素。<br>对于 <code>MaxHeap</code>，第一个元素必须始终大于或等于第二个元素。<br>该函数接受两个参数，表示需要进行比较的元素对。然后，它抛出一个错误，并提供了一个错误消息，指示需要实现堆元素对比较的方法。错误消息中包含了第一个元素和第二个元素的值。</p>\n<h2 id=\"MaxHeap-类\"><a href=\"#MaxHeap-类\" class=\"headerlink\" title=\"MaxHeap 类\"></a>MaxHeap 类</h2><h3 id=\"pairIsInCorrectOrder-firstElement-secondElement-方法\"><a href=\"#pairIsInCorrectOrder-firstElement-secondElement-方法\" class=\"headerlink\" title=\"pairIsInCorrectOrder(firstElement, secondElement) 方法\"></a>pairIsInCorrectOrder(firstElement, secondElement) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 检查堆元素对是否按照正确的顺序排列。</span></span><br><span class=\"line\"><span class=\"comment\"> * 对于最小堆，第一个元素必须始终小于或等于第二个元素。</span></span><br><span class=\"line\"><span class=\"comment\"> * 对于最大堆，第一个元素必须始终大于或等于第二个元素。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; firstElement 第一个元素</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; secondElement 第二个元素</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125; 返回一个布尔值，表示第一个元素是否大于或等于第二个元素</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">pairIsInCorrectOrder</span>(<span class=\"params\">firstElement, secondElement</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">compare</span>.<span class=\"title function_\">greaterThanOrEqual</span>(firstElement, secondElement);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个方法用于检查堆元素对是否按照正确的顺序排列。根据堆的类型（最小堆或最大堆），第一个元素必须始终小于或等于第二个元素（最小堆），或者第一个元素必须始终大于或等于第二个元素（最大堆）。</p>\n<h2 id=\"MinHeap-类\"><a href=\"#MinHeap-类\" class=\"headerlink\" title=\"MinHeap 类\"></a>MinHeap 类</h2><h3 id=\"pairIsInCorrectOrder-firstElement-secondElement-方法-1\"><a href=\"#pairIsInCorrectOrder-firstElement-secondElement-方法-1\" class=\"headerlink\" title=\"pairIsInCorrectOrder(firstElement, secondElement) 方法\"></a>pairIsInCorrectOrder(firstElement, secondElement) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 检查堆元素对是否处于正确的顺序。</span></span><br><span class=\"line\"><span class=\"comment\"> * 对于 MinHeap，第一个元素必须始终小于或等于第二个元素。</span></span><br><span class=\"line\"><span class=\"comment\"> * 对于 MaxHeap，第一个元素必须始终大于或等于第二个元素。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; firstElement 第一个元素</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; secondElement 第二个元素</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125; 返回布尔值，表示堆元素对是否处于正确的顺序</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">pairIsInCorrectOrder</span>(<span class=\"params\">firstElement, secondElement</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用堆的比较器来比较第一个元素和第二个元素的大小，并返回结果</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">compare</span>.<span class=\"title function_\">lessThanOrEqual</span>(firstElement, secondElement);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>源码地址: <a href=\"https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/heap/Heap.js\">JavaScript Algorithms and Data Structures</a></li>\n</ul>\n","site":{"data":{}},"related_posts":[],"length":2610,"excerpt":"<h2 id=\"堆-数据结构\"><a href=\"#堆-数据结构\" class=\"headerlink\" title=\"堆 (数据结构)\"></a>堆 (数据结构)</h2><p>在计算机科学中, 一个 <strong>堆(heap)</strong> 是一种特殊的基于树的数据结构，它满足下面描述的堆属性。</p>\n<p>在一个 <em>最小堆(min heap)</em> 中, 如果 <code>P</code> 是 <code>C</code> 的一个父级节点, 那么 <code>P</code> 的 key(或 value)应小于或等于 <code>C</code> 的对应值.</p>","more":"<p><img src=\"/../images/data-structures/min-heap.jpeg\" alt=\"min heap\"></p>\n<p>在一个 <em>最大堆(max heap)</em> 中, <code>P</code> 的 key(或 value)大于 <code>C</code> 的对应值。</p>\n<p><img src=\"/../images/data-structures/max-heap.jpeg\" alt=\"max heap\"></p>\n<p><img src=\"/../images/data-structures/array-representation.jpeg\" alt=\"Array Representation\"></p>\n<p>在堆“顶部”的没有父级节点的节点,被称之为根节点。</p>\n<h2 id=\"Heap-类\"><a href=\"#Heap-类\" class=\"headerlink\" title=\"Heap 类\"></a>Heap 类</h2><h3 id=\"构造函数-constructor\"><a href=\"#构造函数-constructor\" class=\"headerlink\" title=\"构造函数 constructor\"></a>构造函数 constructor</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@constructs</span> <span class=\"variable\">Heap</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; [comparatorFunction] - 可选参数，用于比较元素的函数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\">comparatorFunction</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果直接构造 Heap 的实例，则抛出错误</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">new</span>.<span class=\"property\">target</span> === <span class=\"title class_\">Heap</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&#x27;Cannot construct Heap instance directly&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 用于存储堆的数组表示</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span> = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 使用传入的 comparatorFunction 创建一个 Comparator 对象</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">compare</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>(comparatorFunction);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"getLeftChildIndex-parentIndex-方法\"><a href=\"#getLeftChildIndex-parentIndex-方法\" class=\"headerlink\" title=\"getLeftChildIndex(parentIndex) 方法\"></a>getLeftChildIndex(parentIndex) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; parentIndex 父节点的索引</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125; 左子节点的索引</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">getLeftChildIndex</span>(<span class=\"params\">parentIndex</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"number\">2</span> * parentIndex) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"getRightChildIndex-parentIndex-方法\"><a href=\"#getRightChildIndex-parentIndex-方法\" class=\"headerlink\" title=\"getRightChildIndex(parentIndex) 方法\"></a>getRightChildIndex(parentIndex) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; parentIndex 父节点的索引</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125; 右子节点的索引</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">getRightChildIndex</span>(<span class=\"params\">parentIndex</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"number\">2</span> * parentIndex) + <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"getParentIndex-childIndex-方法\"><a href=\"#getParentIndex-childIndex-方法\" class=\"headerlink\" title=\"getParentIndex(childIndex) 方法\"></a>getParentIndex(childIndex) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; childIndex 子节点索引</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125; 返回父节点索引</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">getParentIndex</span>(<span class=\"params\">childIndex</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((childIndex - <span class=\"number\">1</span>) / <span class=\"number\">2</span>); <span class=\"comment\">// 使用数学公式计算父节点索引</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hasParent-childIndex-方法\"><a href=\"#hasParent-childIndex-方法\" class=\"headerlink\" title=\"hasParent(childIndex) 方法\"></a>hasParent(childIndex) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 检查给定的子节点索引是否有父节点</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">childIndex</span> - 子节点索引</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125; - 如果有父节点则返回 `true`，否则返回 `false`</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">hasParent</span>(<span class=\"params\">childIndex</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 调用 `getParentIndex` 方法获取父节点的索引，并判断是否大于等于 0</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">getParentIndex</span>(childIndex) &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hasLeftChild-parentIndex-方法\"><a href=\"#hasLeftChild-parentIndex-方法\" class=\"headerlink\" title=\"hasLeftChild(parentIndex) 方法\"></a>hasLeftChild(parentIndex) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; parentIndex 父节点的索引</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125; 返回值为布尔类型，表示是否存在左子节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">hasLeftChild</span>(<span class=\"params\">parentIndex</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取左子节点的索引</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">getLeftChildIndex</span>(parentIndex) &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>.<span class=\"property\">length</span>; <span class=\"comment\">// 判断左子节点的索引是否小于堆容器的长度</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hasRightChild-parentIndex-方法\"><a href=\"#hasRightChild-parentIndex-方法\" class=\"headerlink\" title=\"hasRightChild(parentIndex) 方法\"></a>hasRightChild(parentIndex) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; parentIndex 父节点的索引</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125; 返回值为布尔类型，表示是否存在右子节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">hasRightChild</span>(<span class=\"params\">parentIndex</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 检查右子节点的索引是否小于堆容器的长度</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">getRightChildIndex</span>(parentIndex) &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"leftChild-parentIndex-方法\"><a href=\"#leftChild-parentIndex-方法\" class=\"headerlink\" title=\"leftChild(parentIndex) 方法\"></a>leftChild(parentIndex) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; parentIndex 父节点索引</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">*</span>&#125; 左子节点元素</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">leftChild</span>(<span class=\"params\">parentIndex</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>[<span class=\"variable language_\">this</span>.<span class=\"title function_\">getLeftChildIndex</span>(parentIndex)];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"rightChild-parentIndex-方法\"><a href=\"#rightChild-parentIndex-方法\" class=\"headerlink\" title=\"rightChild(parentIndex) 方法\"></a>rightChild(parentIndex) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取指定父节点的右子节点的值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; parentIndex 父节点的索引</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">*</span>&#125; 右子节点的值</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">rightChild</span>(<span class=\"params\">parentIndex</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取右子节点的索引</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>[<span class=\"variable language_\">this</span>.<span class=\"title function_\">getRightChildIndex</span>(parentIndex)];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"parent-childIndex-方法\"><a href=\"#parent-childIndex-方法\" class=\"headerlink\" title=\"parent(childIndex) 方法\"></a>parent(childIndex) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; childIndex 子节点的索引</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">*</span>&#125; 返回父节点的元素</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">parent</span>(<span class=\"params\">childIndex</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取父节点的索引</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> parentIndex = <span class=\"variable language_\">this</span>.<span class=\"title function_\">getParentIndex</span>(childIndex);</span><br><span class=\"line\">  <span class=\"comment\">// 返回父节点的元素</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>[parentIndex];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"swap-indexOne-indexTwo-方法\"><a href=\"#swap-indexOne-indexTwo-方法\" class=\"headerlink\" title=\"swap(indexOne, indexTwo) 方法\"></a>swap(indexOne, indexTwo) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; indexOne  // 第一个索引</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; indexTwo  // 第二个索引</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">swap</span>(<span class=\"params\">indexOne, indexTwo</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> tmp = <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>[indexTwo];  <span class=\"comment\">// 将第二个索引处的值存储在临时变量 tmp 中</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>[indexTwo] = <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>[indexOne];  <span class=\"comment\">// 将第一个索引处的值赋值给第二个索引处</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>[indexOne] = tmp;  <span class=\"comment\">// 将临时变量 tmp 的值赋值给第一个索引处</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"peek-方法\"><a href=\"#peek-方法\" class=\"headerlink\" title=\"peek() 方法\"></a>peek() 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取堆顶元素</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">*</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">peek</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果堆容器为空</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>.<span class=\"property\">length</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 返回空值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回堆容器中的第一个元素</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"poll-方法\"><a href=\"#poll-方法\" class=\"headerlink\" title=\"poll() 方法\"></a>poll() 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 从堆中移除并返回顶部元素</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">*</span>&#125; 返回移除的顶部元素</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">poll</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果堆为空，返回空</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>.<span class=\"property\">length</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果堆只有一个元素，移除并返回该元素</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>.<span class=\"property\">length</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 获取堆顶元素</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> item = <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将堆尾元素移动到堆顶</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>[<span class=\"number\">0</span>] = <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 通过 heapifyDown 函数维护堆的性质</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">heapifyDown</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回原始的堆顶元素</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> item;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"add-item-方法\"><a href=\"#add-item-方法\" class=\"headerlink\" title=\"add(item) 方法\"></a>add(item) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 添加一个元素到堆中</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; item 要添加的元素</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">Heap</span>&#125; 返回添加元素后的堆</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">add</span>(<span class=\"params\">item</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>.<span class=\"title function_\">push</span>(item); <span class=\"comment\">// 将元素添加到堆数组中</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">heapifyUp</span>(); <span class=\"comment\">// 调整堆的结构，保持堆的性质</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>; <span class=\"comment\">// 返回添加元素后的堆</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"remove-item-comparator-this-compare-方法\"><a href=\"#remove-item-comparator-this-compare-方法\" class=\"headerlink\" title=\"remove(item, comparator &#x3D; this.compare) 方法\"></a>remove(item, comparator &#x3D; this.compare) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">item</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Comparator</span>&#125; [comparator]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">Heap</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">remove</span>(<span class=\"params\">item, comparator = <span class=\"variable language_\">this</span>.compare</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 找到要移除的item的数量</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> numberOfItemsToRemove = <span class=\"variable language_\">this</span>.<span class=\"title function_\">find</span>(item, comparator).<span class=\"property\">length</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> iteration = <span class=\"number\">0</span>; iteration &lt; numberOfItemsToRemove; iteration += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在每次移除后，需要重新找到要移除的item的索引，因为每次堆化过程后，索引都会发生变化</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> indexToRemove = <span class=\"variable language_\">this</span>.<span class=\"title function_\">find</span>(item, comparator).<span class=\"title function_\">pop</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果要移除的是堆中的最后一个子节点，则直接删除它，无需进行堆化操作</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (indexToRemove === (<span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 将堆中的最后一个元素移动到空缺位置</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>[indexToRemove] = <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 获取父节点</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> parentItem = <span class=\"variable language_\">this</span>.<span class=\"title function_\">parent</span>(indexToRemove);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 如果没有父节点或者父节点与要删除的节点的顺序正确，则执行堆化向下操作，否则执行堆化向上操作</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">hasLeftChild</span>(indexToRemove)</span><br><span class=\"line\">        &amp;&amp; (</span><br><span class=\"line\">          !parentItem</span><br><span class=\"line\">          || <span class=\"variable language_\">this</span>.<span class=\"title function_\">pairIsInCorrectOrder</span>(parentItem, <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>[indexToRemove])</span><br><span class=\"line\">        )</span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">heapifyDown</span>(indexToRemove);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">heapifyUp</span>(indexToRemove);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"find-item-comparator-this-compare-方法\"><a href=\"#find-item-comparator-this-compare-方法\" class=\"headerlink\" title=\"find(item, comparator &#x3D; this.compare) 方法\"></a>find(item, comparator &#x3D; this.compare) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; item // 要查找的元素</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Comparator</span>&#125; [comparator] // 比较器函数，用于比较元素</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">Number[]</span>&#125; // 返回一个包含匹配元素索引的数组</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">find</span>(<span class=\"params\">item, comparator = <span class=\"variable language_\">this</span>.compare</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> foundItemIndices = []; <span class=\"comment\">// 存储匹配元素索引的数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> itemIndex = <span class=\"number\">0</span>; itemIndex &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>.<span class=\"property\">length</span>; itemIndex += <span class=\"number\">1</span>) &#123; <span class=\"comment\">// 遍历 heapContainer 数组</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (comparator.<span class=\"title function_\">equal</span>(item, <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>[itemIndex])) &#123; <span class=\"comment\">// 使用比较器函数比较元素是否相等</span></span><br><span class=\"line\">      foundItemIndices.<span class=\"title function_\">push</span>(itemIndex); <span class=\"comment\">// 将匹配元素的索引添加到 foundItemIndices 数组中</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> foundItemIndices; <span class=\"comment\">// 返回包含匹配元素索引的数组</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"isEmpty-方法\"><a href=\"#isEmpty-方法\" class=\"headerlink\" title=\"isEmpty() 方法\"></a>isEmpty() 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125; 返回一个布尔值</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">isEmpty</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 检查数组 heapContainer 是否为空</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> !<span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"toString-方法\"><a href=\"#toString-方法\" class=\"headerlink\" title=\"toString() 方法\"></a>toString() 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回堆对象的字符串表示形式</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string</span>&#125; 字符串表示形式</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">toString</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>.<span class=\"title function_\">toString</span>(); <span class=\"comment\">// 将堆容器转换为字符串</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"heapifyUp-customStartIndex-方法\"><a href=\"#heapifyUp-customStartIndex-方法\" class=\"headerlink\" title=\"heapifyUp(customStartIndex) 方法\"></a>heapifyUp(customStartIndex) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; [customStartIndex]  // 可选参数，指定堆化过程的起始索引</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">heapifyUp</span>(<span class=\"params\">customStartIndex</span>) &#123;  <span class=\"comment\">// 定义名为 heapifyUp 的方法，用于维护二叉堆数据结构的堆属性</span></span><br><span class=\"line\">  <span class=\"comment\">// 将堆容器的最后一个元素（数组中的最后一个元素或树中的左下角元素）提取出来，并将其上移，直到它与其父元素满足正确的顺序关系</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentIndex = customStartIndex || <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>;  <span class=\"comment\">// 将当前索引设置为 customStartIndex（如果提供了）或堆容器的最后一个元素的索引</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">hasParent</span>(currentIndex)  <span class=\"comment\">// 当前元素有父元素</span></span><br><span class=\"line\">    &amp;&amp; !<span class=\"variable language_\">this</span>.<span class=\"title function_\">pairIsInCorrectOrder</span>(<span class=\"variable language_\">this</span>.<span class=\"title function_\">parent</span>(currentIndex), <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>[currentIndex])  <span class=\"comment\">// 当前元素与其父元素不满足正确的顺序关系</span></span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">swap</span>(currentIndex, <span class=\"variable language_\">this</span>.<span class=\"title function_\">getParentIndex</span>(currentIndex));  <span class=\"comment\">// 交换当前元素与其父元素的位置</span></span><br><span class=\"line\">    currentIndex = <span class=\"variable language_\">this</span>.<span class=\"title function_\">getParentIndex</span>(currentIndex);  <span class=\"comment\">// 将当前索引更新为父元素的索引</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该方法使用一个 while 循环来比较当前元素与其父元素，并在它们不满足正确的顺序关系时进行交换。循环会一直执行，直到当前元素到达正确的位置或成为堆的根节点。</p>\n<h3 id=\"heapifyDown-customStartIndex-0-方法\"><a href=\"#heapifyDown-customStartIndex-0-方法\" class=\"headerlink\" title=\"heapifyDown(customStartIndex &#x3D; 0) 方法\"></a>heapifyDown(customStartIndex &#x3D; 0) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; [customStartIndex] // 可选参数，指定开始堆化的索引位置，默认为0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">heapifyDown</span>(<span class=\"params\">customStartIndex = <span class=\"number\">0</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 比较父节点与其子节点，并与合适的子节点交换位置</span></span><br><span class=\"line\">  <span class=\"comment\">// 对交换后的子节点继续进行相同的操作</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentIndex = customStartIndex; <span class=\"comment\">// 当前节点的索引</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> nextIndex = <span class=\"literal\">null</span>; <span class=\"comment\">// 下一个节点的索引</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"variable language_\">this</span>.<span class=\"title function_\">hasLeftChild</span>(currentIndex)) &#123; <span class=\"comment\">// 当前节点存在左子节点时循环</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">hasRightChild</span>(currentIndex) <span class=\"comment\">// 当前节点存在右子节点</span></span><br><span class=\"line\">      &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"title function_\">pairIsInCorrectOrder</span>(<span class=\"variable language_\">this</span>.<span class=\"title function_\">rightChild</span>(currentIndex), <span class=\"variable language_\">this</span>.<span class=\"title function_\">leftChild</span>(currentIndex)) <span class=\"comment\">// 右子节点和左子节点的顺序是否正确</span></span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      nextIndex = <span class=\"variable language_\">this</span>.<span class=\"title function_\">getRightChildIndex</span>(currentIndex); <span class=\"comment\">// 右子节点的索引</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      nextIndex = <span class=\"variable language_\">this</span>.<span class=\"title function_\">getLeftChildIndex</span>(currentIndex); <span class=\"comment\">// 左子节点的索引</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"title function_\">pairIsInCorrectOrder</span>(</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>[currentIndex], <span class=\"comment\">// 当前节点的值</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">heapContainer</span>[nextIndex], <span class=\"comment\">// 下一个节点的值</span></span><br><span class=\"line\">    )) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>; <span class=\"comment\">// 如果当前节点与下一个节点的顺序正确，则跳出循环</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">swap</span>(currentIndex, nextIndex); <span class=\"comment\">// 交换当前节点与下一个节点的位置</span></span><br><span class=\"line\">    currentIndex = nextIndex; <span class=\"comment\">// 更新当前节点的索引为下一个节点的索引</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个方法是用于执行堆向下调整的过程。它接受一个可选的参数 <code>customStartIndex</code>，用于指定开始堆化的索引位置，默认为 0。该方法比较父节点与其子节点，并根据堆的类型（最小堆或最大堆）与合适的子节点交换位置。然后，它继续对交换后的子节点进行相同的操作，直到元素在堆中达到正确的位置为止。</p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 检查堆元素对是否按正确顺序排列。</span></span><br><span class=\"line\"><span class=\"comment\"> * 对于MinHeap，第一个元素必须始终小于或等于第二个元素。</span></span><br><span class=\"line\"><span class=\"comment\"> * 对于MaxHeap，第一个元素必须始终大于或等于第二个元素。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; firstElement 第一个元素</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; secondElement 第二个元素</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125; 返回布尔值，表示元素对是否按正确顺序排列</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* istanbul ignore next */</span></span><br><span class=\"line\"><span class=\"title function_\">pairIsInCorrectOrder</span>(<span class=\"params\">firstElement, secondElement</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    You have to implement heap pair comparision method</span></span><br><span class=\"line\"><span class=\"string\">    for <span class=\"subst\">$&#123;firstElement&#125;</span> and <span class=\"subst\">$&#123;secondElement&#125;</span> values.</span></span><br><span class=\"line\"><span class=\"string\">  `</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这段代码用于检查堆中的元素对是否按正确的顺序排列。根据堆的类型，有两种情况：</p>\n<p>对于 <code>MinHeap</code>，第一个元素必须始终小于或等于第二个元素。<br>对于 <code>MaxHeap</code>，第一个元素必须始终大于或等于第二个元素。<br>该函数接受两个参数，表示需要进行比较的元素对。然后，它抛出一个错误，并提供了一个错误消息，指示需要实现堆元素对比较的方法。错误消息中包含了第一个元素和第二个元素的值。</p>\n<h2 id=\"MaxHeap-类\"><a href=\"#MaxHeap-类\" class=\"headerlink\" title=\"MaxHeap 类\"></a>MaxHeap 类</h2><h3 id=\"pairIsInCorrectOrder-firstElement-secondElement-方法\"><a href=\"#pairIsInCorrectOrder-firstElement-secondElement-方法\" class=\"headerlink\" title=\"pairIsInCorrectOrder(firstElement, secondElement) 方法\"></a>pairIsInCorrectOrder(firstElement, secondElement) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 检查堆元素对是否按照正确的顺序排列。</span></span><br><span class=\"line\"><span class=\"comment\"> * 对于最小堆，第一个元素必须始终小于或等于第二个元素。</span></span><br><span class=\"line\"><span class=\"comment\"> * 对于最大堆，第一个元素必须始终大于或等于第二个元素。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; firstElement 第一个元素</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; secondElement 第二个元素</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125; 返回一个布尔值，表示第一个元素是否大于或等于第二个元素</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">pairIsInCorrectOrder</span>(<span class=\"params\">firstElement, secondElement</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">compare</span>.<span class=\"title function_\">greaterThanOrEqual</span>(firstElement, secondElement);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个方法用于检查堆元素对是否按照正确的顺序排列。根据堆的类型（最小堆或最大堆），第一个元素必须始终小于或等于第二个元素（最小堆），或者第一个元素必须始终大于或等于第二个元素（最大堆）。</p>\n<h2 id=\"MinHeap-类\"><a href=\"#MinHeap-类\" class=\"headerlink\" title=\"MinHeap 类\"></a>MinHeap 类</h2><h3 id=\"pairIsInCorrectOrder-firstElement-secondElement-方法-1\"><a href=\"#pairIsInCorrectOrder-firstElement-secondElement-方法-1\" class=\"headerlink\" title=\"pairIsInCorrectOrder(firstElement, secondElement) 方法\"></a>pairIsInCorrectOrder(firstElement, secondElement) 方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 检查堆元素对是否处于正确的顺序。</span></span><br><span class=\"line\"><span class=\"comment\"> * 对于 MinHeap，第一个元素必须始终小于或等于第二个元素。</span></span><br><span class=\"line\"><span class=\"comment\"> * 对于 MaxHeap，第一个元素必须始终大于或等于第二个元素。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; firstElement 第一个元素</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; secondElement 第二个元素</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125; 返回布尔值，表示堆元素对是否处于正确的顺序</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">pairIsInCorrectOrder</span>(<span class=\"params\">firstElement, secondElement</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用堆的比较器来比较第一个元素和第二个元素的大小，并返回结果</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">compare</span>.<span class=\"title function_\">lessThanOrEqual</span>(firstElement, secondElement);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>源码地址: <a href=\"https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/heap/Heap.js\">JavaScript Algorithms and Data Structures</a></li>\n</ul>"},{"title":"JavaScript Algorithms and Data Structures 源码分析(5) -- 栈 Stack","date":"2023-11-02T05:31:23.000Z","_content":"\n## 栈\n\n在计算机科学中, 一个 **栈(stack)** 是一种抽象数据类型,用作表示元素的集合,具有两种主要操作:\n\n- **push**, 添加元素到栈的顶端(末尾);\n- **pop**, 移除栈最顶端(末尾)的元素.\n\n以上两种操作可以简单概括为“后进先出(LIFO = last in, first out)”。\n\n此外,应有一个 `peek` 操作用于访问栈当前顶端(末尾)的元素。\n\n\"栈\"这个名称,可类比于一组物体的堆叠(一摞书,一摞盘子之类的)。\n\n<!-- more -->\n\n栈的 push 和 pop 操作的示意\n\n![Stack](../images/data-structures/stack.jpeg)\n\n```javascript\n// 定义栈类\nexport default class Stack {\n  // 构造函数\n  constructor() {\n    // 使用链表实现栈，因为它们的操作非常相似。\n    // 将栈的push/pop操作与链表的prepend/deleteHead操作进行比较。\n    this.linkedList = new LinkedList();\n  }\n\n  /**\n   * @return {boolean} 返回栈是否为空\n   */\n  isEmpty() {\n    // 如果链表的头节点为空，表示栈为空\n    return !this.linkedList.head;\n  }\n\n  /**\n   * @param {*} value 入栈的值\n   */\n  push(value) {\n    // 入栈操作意味着将值放在栈的顶部。\n    // 因此，我们只需要将新值添加到链表的开头即可。\n    this.linkedList.prepend(value);\n  }\n\n  /**\n   * @return {*} 返回栈顶的值\n   */\n  peek() {\n    // 如果栈为空，则无法查看栈顶的值\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    // 直接读取链表的头节点的值，而不删除它\n    return this.linkedList.head.value;\n  }\n\n  /**\n   * @return {*} 返回并删除栈顶的值\n   */\n  pop() {\n    // 尝试从链表中删除第一个节点（头节点）。\n    // 如果没有头节点（链表为空），则返回null。\n    const removedHead = this.linkedList.deleteHead();\n    return removedHead ? removedHead.value : null;\n  }\n\n  /**\n   * @return {*[]} 返回栈中的所有值\n   */\n  toArray() {\n    // 将链表转换为数组，并返回数组中每个链表节点的值\n    return this.linkedList.toArray().map((linkedListNode) => linkedListNode.value);\n  }\n\n  /**\n   * @param {function} [callback] 回调函数\n   * @return {string} 返回栈的字符串表示\n   */\n  toString(callback) {\n    // 将链表转换为字符串\n    return this.linkedList.toString(callback);\n  }\n}\n```\n\n---\n\n- 源码地址: [JavaScript Algorithms and Data Structures](https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/stack/Stack.js)\n","source":"_posts/data-structures-005-Stack.md","raw":"---\ntitle: JavaScript Algorithms and Data Structures 源码分析(5) -- 栈 Stack\ndate: 2023-11-02 13:31:23\ntags:\n  - data structures\ncategories:\n  - 数据结构与算法\n---\n\n## 栈\n\n在计算机科学中, 一个 **栈(stack)** 是一种抽象数据类型,用作表示元素的集合,具有两种主要操作:\n\n- **push**, 添加元素到栈的顶端(末尾);\n- **pop**, 移除栈最顶端(末尾)的元素.\n\n以上两种操作可以简单概括为“后进先出(LIFO = last in, first out)”。\n\n此外,应有一个 `peek` 操作用于访问栈当前顶端(末尾)的元素。\n\n\"栈\"这个名称,可类比于一组物体的堆叠(一摞书,一摞盘子之类的)。\n\n<!-- more -->\n\n栈的 push 和 pop 操作的示意\n\n![Stack](../images/data-structures/stack.jpeg)\n\n```javascript\n// 定义栈类\nexport default class Stack {\n  // 构造函数\n  constructor() {\n    // 使用链表实现栈，因为它们的操作非常相似。\n    // 将栈的push/pop操作与链表的prepend/deleteHead操作进行比较。\n    this.linkedList = new LinkedList();\n  }\n\n  /**\n   * @return {boolean} 返回栈是否为空\n   */\n  isEmpty() {\n    // 如果链表的头节点为空，表示栈为空\n    return !this.linkedList.head;\n  }\n\n  /**\n   * @param {*} value 入栈的值\n   */\n  push(value) {\n    // 入栈操作意味着将值放在栈的顶部。\n    // 因此，我们只需要将新值添加到链表的开头即可。\n    this.linkedList.prepend(value);\n  }\n\n  /**\n   * @return {*} 返回栈顶的值\n   */\n  peek() {\n    // 如果栈为空，则无法查看栈顶的值\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    // 直接读取链表的头节点的值，而不删除它\n    return this.linkedList.head.value;\n  }\n\n  /**\n   * @return {*} 返回并删除栈顶的值\n   */\n  pop() {\n    // 尝试从链表中删除第一个节点（头节点）。\n    // 如果没有头节点（链表为空），则返回null。\n    const removedHead = this.linkedList.deleteHead();\n    return removedHead ? removedHead.value : null;\n  }\n\n  /**\n   * @return {*[]} 返回栈中的所有值\n   */\n  toArray() {\n    // 将链表转换为数组，并返回数组中每个链表节点的值\n    return this.linkedList.toArray().map((linkedListNode) => linkedListNode.value);\n  }\n\n  /**\n   * @param {function} [callback] 回调函数\n   * @return {string} 返回栈的字符串表示\n   */\n  toString(callback) {\n    // 将链表转换为字符串\n    return this.linkedList.toString(callback);\n  }\n}\n```\n\n---\n\n- 源码地址: [JavaScript Algorithms and Data Structures](https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/stack/Stack.js)\n","slug":"data-structures-005-Stack","published":1,"updated":"2023-11-24T08:02:55.028Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clq4xe1da0014tz2hcexggs6z","content":"<h2 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h2><p>在计算机科学中, 一个 <strong>栈(stack)</strong> 是一种抽象数据类型,用作表示元素的集合,具有两种主要操作:</p>\n<ul>\n<li><strong>push</strong>, 添加元素到栈的顶端(末尾);</li>\n<li><strong>pop</strong>, 移除栈最顶端(末尾)的元素.</li>\n</ul>\n<p>以上两种操作可以简单概括为“后进先出(LIFO &#x3D; last in, first out)”。</p>\n<p>此外,应有一个 <code>peek</code> 操作用于访问栈当前顶端(末尾)的元素。</p>\n<p>“栈”这个名称,可类比于一组物体的堆叠(一摞书,一摞盘子之类的)。</p>\n<span id=\"more\"></span>\n\n<p>栈的 push 和 pop 操作的示意</p>\n<p><img src=\"/../images/data-structures/stack.jpeg\" alt=\"Stack\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义栈类</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Stack</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 构造函数</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用链表实现栈，因为它们的操作非常相似。</span></span><br><span class=\"line\">    <span class=\"comment\">// 将栈的push/pop操作与链表的prepend/deleteHead操作进行比较。</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">linkedList</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125; 返回栈是否为空</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">isEmpty</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果链表的头节点为空，表示栈为空</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> !<span class=\"variable language_\">this</span>.<span class=\"property\">linkedList</span>.<span class=\"property\">head</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; value 入栈的值</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">push</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 入栈操作意味着将值放在栈的顶部。</span></span><br><span class=\"line\">    <span class=\"comment\">// 因此，我们只需要将新值添加到链表的开头即可。</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">linkedList</span>.<span class=\"title function_\">prepend</span>(value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">*</span>&#125; 返回栈顶的值</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">peek</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果栈为空，则无法查看栈顶的值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"title function_\">isEmpty</span>()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 直接读取链表的头节点的值，而不删除它</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">linkedList</span>.<span class=\"property\">head</span>.<span class=\"property\">value</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">*</span>&#125; 返回并删除栈顶的值</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">pop</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 尝试从链表中删除第一个节点（头节点）。</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果没有头节点（链表为空），则返回null。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> removedHead = <span class=\"variable language_\">this</span>.<span class=\"property\">linkedList</span>.<span class=\"title function_\">deleteHead</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> removedHead ? removedHead.<span class=\"property\">value</span> : <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">*[]</span>&#125; 返回栈中的所有值</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">toArray</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将链表转换为数组，并返回数组中每个链表节点的值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">linkedList</span>.<span class=\"title function_\">toArray</span>().<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">linkedListNode</span>) =&gt;</span> linkedListNode.<span class=\"property\">value</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">function</span>&#125; [callback] 回调函数</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string</span>&#125; 返回栈的字符串表示</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">toString</span>(<span class=\"params\">callback</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将链表转换为字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">linkedList</span>.<span class=\"title function_\">toString</span>(callback);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>源码地址: <a href=\"https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/stack/Stack.js\">JavaScript Algorithms and Data Structures</a></li>\n</ul>\n","site":{"data":{}},"related_posts":["2023/11/01/data-structures-004-queue/","2023/10/29/data-structures-001-comparator/"],"length":443,"excerpt":"<h2 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h2><p>在计算机科学中, 一个 <strong>栈(stack)</strong> 是一种抽象数据类型,用作表示元素的集合,具有两种主要操作:</p>\n<ul>\n<li><strong>push</strong>, 添加元素到栈的顶端(末尾);</li>\n<li><strong>pop</strong>, 移除栈最顶端(末尾)的元素.</li>\n</ul>\n<p>以上两种操作可以简单概括为“后进先出(LIFO &#x3D; last in, first out)”。</p>\n<p>此外,应有一个 <code>peek</code> 操作用于访问栈当前顶端(末尾)的元素。</p>\n<p>“栈”这个名称,可类比于一组物体的堆叠(一摞书,一摞盘子之类的)。</p>","more":"<p>栈的 push 和 pop 操作的示意</p>\n<p><img src=\"/../images/data-structures/stack.jpeg\" alt=\"Stack\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义栈类</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Stack</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 构造函数</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用链表实现栈，因为它们的操作非常相似。</span></span><br><span class=\"line\">    <span class=\"comment\">// 将栈的push/pop操作与链表的prepend/deleteHead操作进行比较。</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">linkedList</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125; 返回栈是否为空</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">isEmpty</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果链表的头节点为空，表示栈为空</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> !<span class=\"variable language_\">this</span>.<span class=\"property\">linkedList</span>.<span class=\"property\">head</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; value 入栈的值</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">push</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 入栈操作意味着将值放在栈的顶部。</span></span><br><span class=\"line\">    <span class=\"comment\">// 因此，我们只需要将新值添加到链表的开头即可。</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">linkedList</span>.<span class=\"title function_\">prepend</span>(value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">*</span>&#125; 返回栈顶的值</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">peek</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果栈为空，则无法查看栈顶的值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"title function_\">isEmpty</span>()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 直接读取链表的头节点的值，而不删除它</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">linkedList</span>.<span class=\"property\">head</span>.<span class=\"property\">value</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">*</span>&#125; 返回并删除栈顶的值</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">pop</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 尝试从链表中删除第一个节点（头节点）。</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果没有头节点（链表为空），则返回null。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> removedHead = <span class=\"variable language_\">this</span>.<span class=\"property\">linkedList</span>.<span class=\"title function_\">deleteHead</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> removedHead ? removedHead.<span class=\"property\">value</span> : <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">*[]</span>&#125; 返回栈中的所有值</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">toArray</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将链表转换为数组，并返回数组中每个链表节点的值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">linkedList</span>.<span class=\"title function_\">toArray</span>().<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">linkedListNode</span>) =&gt;</span> linkedListNode.<span class=\"property\">value</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">function</span>&#125; [callback] 回调函数</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string</span>&#125; 返回栈的字符串表示</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">toString</span>(<span class=\"params\">callback</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将链表转换为字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">linkedList</span>.<span class=\"title function_\">toString</span>(callback);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>源码地址: <a href=\"https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/stack/Stack.js\">JavaScript Algorithms and Data Structures</a></li>\n</ul>"},{"title":"JavaScript Algorithms and Data Structures 源码分析(11) -- 二叉搜索树 binary-search-tree","date":"2023-12-14T06:09:26.000Z","_content":"\n## 二叉搜索树\n\n**二叉搜索树**（Binary Search Tree，简称 BST）是计算机科学中一种特定类型的容器，有时也被称为有序二叉树或排序二叉树。它们用于在内存中存储“项”（如数字、名称等），可以快速进行查找、添加和删除操作。它们可以用于实现动态集合或查找表，以便通过键来查找项（例如，通过姓名查找人的电话号码）。\n\n二叉搜索树将其键按照排序顺序存储，以便查找和其他操作可以使用二分查找的原理：在树中查找键（或查找要插入新键的位置）时，从根到叶子遍历树，与树节点中存储的键进行比较，并根据比较结果决定是继续在左子树还是右子树中搜索。平均而言，这意味着每次比较都可以跳过树的约一半，因此每次查找、插入或删除操作的时间与树中存储的项数的对数成比例。这比在（未排序的）数组中按键查找项所需的线性时间要好得多，但比哈希表上的相应操作要慢。\n\n下图是一个大小为 9、深度为 3 的二叉搜索树示例，根节点为 8。叶子节点未绘制。\n\n<!-- more -->\n\n![binary-search-tree](../images/data-structures/binary-search-tree.jpg)\n\n## BinarySearchTreeNode\n\n```js\nexport default class BinarySearchTreeNode extends BinaryTreeNode {\n  /**\n   * @param {*} [value] - node value.\n   * @param {function} [compareFunction] - comparator function for node values.\n   */\n  // 定义 BinarySearchTreeNode 类的构造函数。\n  // 它接受一个可选的 value 参数和一个可选的 compareFunction 参数。\n  constructor(value = null, compareFunction = undefined) {\n    // 使用 value 参数调用父类 BinaryTreeNode 的构造函数。\n    super(value);\n\n    // This comparator is used to compare node values with each other.\n    // 将 compareFunction 参数赋值给实例的 compareFunction 属性。\n    this.compareFunction = compareFunction;\n\n    // 创建 Comparator 类的新实例，并将其赋值给实例的 nodeValueComparator 属性。\n    // 将 compareFunction 参数传递给 Comparator 构造函数。\n    this.nodeValueComparator = new Comparator(compareFunction);\n  }\n\n  /**\n   * 将一个值插入到二叉搜索树中。\n   * @param {*} value - 要插入的值。\n   * @return {BinarySearchTreeNode} - 插入的节点。\n   */\n  insert(value) {\n    // 如果当前节点为空，将值设置为当前节点的值。\n    if (this.nodeValueComparator.equal(this.value, null)) {\n      this.value = value;\n\n      return this;\n    }\n\n    // 如果要插入的值小于当前节点的值，进入左子树。\n    if (this.nodeValueComparator.lessThan(value, this.value)) {\n      // 如果存在左子节点，递归调用插入方法。\n      if (this.left) {\n        return this.left.insert(value);\n      }\n\n      // 如果不存在左子节点，创建一个新节点并将其设置为左子节点。\n      const newNode = new BinarySearchTreeNode(value, this.compareFunction);\n      this.setLeft(newNode);\n\n      return newNode;\n    }\n\n    // 如果要插入的值大于当前节点的值，进入右子树。\n    if (this.nodeValueComparator.greaterThan(value, this.value)) {\n      // 如果存在右子节点，递归调用插入方法。\n      if (this.right) {\n        return this.right.insert(value);\n      }\n\n      // 如果不存在右子节点，创建一个新节点并将其设置为右子节点。\n      const newNode = new BinarySearchTreeNode(value, this.compareFunction);\n      this.setRight(newNode);\n\n      return newNode;\n    }\n\n    // 如果要插入的值等于当前节点的值，返回当前节点。\n    return this;\n  }\n\n  /**\n   * 在二叉搜索树中查找具有给定值的节点。\n   * @param {*} value - 要查找的值。\n   * @return {BinarySearchTreeNode} - 具有给定值的节点，如果未找到则返回null。\n   */\n  find(value) {\n    // 检查当前节点是否具有目标值。\n    if (this.nodeValueComparator.equal(this.value, value)) {\n      return this;\n    }\n\n    // 如果目标值小于当前节点的值并且存在左节点，在左子树中递归搜索目标值。\n    if (this.nodeValueComparator.lessThan(value, this.value) && this.left) {\n      // Check left nodes.\n      return this.left.find(value);\n    }\n\n    // 如果目标值大于当前节点的值并且存在右节点，在右子树中递归搜索目标值。\n    if (this.nodeValueComparator.greaterThan(value, this.value) && this.right) {\n      // Check right nodes.\n      return this.right.find(value);\n    }\n\n    // 在树中未找到目标值。\n    return null;\n  }\n\n  /**\n   * @param {*} value\n   * @return {boolean}\n   */\n  contains(value) {\n    return !!this.find(value);\n  }\n\n  /**\n   * 从二叉搜索树中移除具有特定值的节点。\n   * @param {*} value - 要移除的节点的值。\n   * @return {boolean} - 如果成功移除节点，则返回true；否则返回false。\n   */\n  remove(value) {\n    // 找到要移除的节点。\n    const nodeToRemove = this.find(value);\n\n    // 如果未找到节点，则抛出错误。\n    if (!nodeToRemove) {\n      throw new Error(\"Item not found in the tree\");\n    }\n    // 获取节点的父节点。\n    const { parent } = nodeToRemove;\n    // 如果节点是叶子节点（没有子节点）。\n    if (!nodeToRemove.left && !nodeToRemove.right) {\n      // 如果节点有父节点，则从父节点中移除对该节点的引用。\n      if (parent) {\n        parent.removeChild(nodeToRemove);\n      } else {\n        // 否则，只需将当前节点的值设置为undefined。\n        nodeToRemove.setValue(undefined);\n      }\n    } else if (nodeToRemove.left && nodeToRemove.right) {\n      // 如果节点有两个子节点。\n      // 找到比要移除的节点值更大的下一个节点（右侧分支中的最小值）。\n      const nextBiggerNode = nodeToRemove.right.findMin();\n      // 如果下一个更大的节点不是要移除节点的右子节点，\n      // 则移除下一个更大的节点，并将要移除的节点的值替换为该节点的值。\n      if (!this.nodeComparator.equal(nextBiggerNode, nodeToRemove.right)) {\n        this.remove(nextBiggerNode.value);\n        nodeToRemove.setValue(nextBiggerNode.value);\n      } else {\n        // 否则，如果下一个右侧节点是下一个更大的节点，并且它没有左子节点，\n        // 则只需用右侧节点替换要删除的节点。\n        nodeToRemove.setValue(nodeToRemove.right.value);\n        nodeToRemove.setRight(nodeToRemove.right.right);\n      }\n    } else {\n      // 如果节点只有一个子节点。\n      // 获取子节点。\n      /** @var BinarySearchTreeNode */\n      const childNode = nodeToRemove.left || nodeToRemove.right;\n      // 如果节点有父节点，则将子节点替换为当前节点的父节点的直接子节点。\n      if (parent) {\n        parent.replaceChild(nodeToRemove, childNode);\n      } else {\n        // 否则，用子节点替换要删除的节点。\n        BinaryTreeNode.copyNode(childNode, nodeToRemove);\n      }\n    }\n\n    // 清除被移除节点的父节点。\n    nodeToRemove.parent = null;\n\n    return true;\n  }\n\n  /**\n   * 查找最小值节点\n   * @return {BinarySearchTreeNode}\n   */\n  findMin() {\n    // 如果没有左子节点，说明当前节点就是最小值节点。\n    if (!this.left) {\n      return this;\n    }\n    // 递归调用左子节点的findMin方法，直到找到最小值节点。\n    return this.left.findMin();\n  }\n}\n```\n\n## BinarySearchTree\n\n```js\nexport default class BinarySearchTree {\n  /**\n   * 初始化方法\n   * @param {function} [nodeValueCompareFunction]\n   */\n  // 创建一个构造函数，它接受一个可选的 `nodeValueCompareFunction` 参数\n  constructor(nodeValueCompareFunction) {\n    // 创建一个新的 `BinarySearchTreeNode` 对象，值为 `null`，并使用提供的 `nodeValueCompareFunction` 作为比较器。\n    this.root = new BinarySearchTreeNode(null, nodeValueCompareFunction);\n\n    // 从根节点中获取节点比较器。\n    // 将 `root` 节点的 `nodeComparator` 属性赋值给当前实例的 `nodeComparator` 属性。\n    this.nodeComparator = this.root.nodeComparator;\n  }\n\n  /**\n   * 插入值\n   * @param {*} value\n   * @return {BinarySearchTreeNode}\n   */\n  insert(value) {\n    return this.root.insert(value);\n  }\n\n  /**\n   * 判断是否包含值\n   * @param {*} value\n   * @return {boolean}\n   */\n  contains(value) {\n    return this.root.contains(value);\n  }\n\n  /**\n   * 移除值\n   * @param {*} value\n   * @return {boolean}\n   */\n  remove(value) {\n    return this.root.remove(value);\n  }\n\n  /**\n   * 对象的字符串方法\n   * @return {string}\n   */\n  toString() {\n    return this.root.toString();\n  }\n}\n```\n","source":"_posts/data-structures-011-BinarySearchTree.md","raw":"---\ntitle: JavaScript Algorithms and Data Structures 源码分析(11) -- 二叉搜索树 binary-search-tree\ndate: 2023-12-14 14:09:26\ntags:\n  - data structures\ncategories:\n  - 数据结构与算法\n---\n\n## 二叉搜索树\n\n**二叉搜索树**（Binary Search Tree，简称 BST）是计算机科学中一种特定类型的容器，有时也被称为有序二叉树或排序二叉树。它们用于在内存中存储“项”（如数字、名称等），可以快速进行查找、添加和删除操作。它们可以用于实现动态集合或查找表，以便通过键来查找项（例如，通过姓名查找人的电话号码）。\n\n二叉搜索树将其键按照排序顺序存储，以便查找和其他操作可以使用二分查找的原理：在树中查找键（或查找要插入新键的位置）时，从根到叶子遍历树，与树节点中存储的键进行比较，并根据比较结果决定是继续在左子树还是右子树中搜索。平均而言，这意味着每次比较都可以跳过树的约一半，因此每次查找、插入或删除操作的时间与树中存储的项数的对数成比例。这比在（未排序的）数组中按键查找项所需的线性时间要好得多，但比哈希表上的相应操作要慢。\n\n下图是一个大小为 9、深度为 3 的二叉搜索树示例，根节点为 8。叶子节点未绘制。\n\n<!-- more -->\n\n![binary-search-tree](../images/data-structures/binary-search-tree.jpg)\n\n## BinarySearchTreeNode\n\n```js\nexport default class BinarySearchTreeNode extends BinaryTreeNode {\n  /**\n   * @param {*} [value] - node value.\n   * @param {function} [compareFunction] - comparator function for node values.\n   */\n  // 定义 BinarySearchTreeNode 类的构造函数。\n  // 它接受一个可选的 value 参数和一个可选的 compareFunction 参数。\n  constructor(value = null, compareFunction = undefined) {\n    // 使用 value 参数调用父类 BinaryTreeNode 的构造函数。\n    super(value);\n\n    // This comparator is used to compare node values with each other.\n    // 将 compareFunction 参数赋值给实例的 compareFunction 属性。\n    this.compareFunction = compareFunction;\n\n    // 创建 Comparator 类的新实例，并将其赋值给实例的 nodeValueComparator 属性。\n    // 将 compareFunction 参数传递给 Comparator 构造函数。\n    this.nodeValueComparator = new Comparator(compareFunction);\n  }\n\n  /**\n   * 将一个值插入到二叉搜索树中。\n   * @param {*} value - 要插入的值。\n   * @return {BinarySearchTreeNode} - 插入的节点。\n   */\n  insert(value) {\n    // 如果当前节点为空，将值设置为当前节点的值。\n    if (this.nodeValueComparator.equal(this.value, null)) {\n      this.value = value;\n\n      return this;\n    }\n\n    // 如果要插入的值小于当前节点的值，进入左子树。\n    if (this.nodeValueComparator.lessThan(value, this.value)) {\n      // 如果存在左子节点，递归调用插入方法。\n      if (this.left) {\n        return this.left.insert(value);\n      }\n\n      // 如果不存在左子节点，创建一个新节点并将其设置为左子节点。\n      const newNode = new BinarySearchTreeNode(value, this.compareFunction);\n      this.setLeft(newNode);\n\n      return newNode;\n    }\n\n    // 如果要插入的值大于当前节点的值，进入右子树。\n    if (this.nodeValueComparator.greaterThan(value, this.value)) {\n      // 如果存在右子节点，递归调用插入方法。\n      if (this.right) {\n        return this.right.insert(value);\n      }\n\n      // 如果不存在右子节点，创建一个新节点并将其设置为右子节点。\n      const newNode = new BinarySearchTreeNode(value, this.compareFunction);\n      this.setRight(newNode);\n\n      return newNode;\n    }\n\n    // 如果要插入的值等于当前节点的值，返回当前节点。\n    return this;\n  }\n\n  /**\n   * 在二叉搜索树中查找具有给定值的节点。\n   * @param {*} value - 要查找的值。\n   * @return {BinarySearchTreeNode} - 具有给定值的节点，如果未找到则返回null。\n   */\n  find(value) {\n    // 检查当前节点是否具有目标值。\n    if (this.nodeValueComparator.equal(this.value, value)) {\n      return this;\n    }\n\n    // 如果目标值小于当前节点的值并且存在左节点，在左子树中递归搜索目标值。\n    if (this.nodeValueComparator.lessThan(value, this.value) && this.left) {\n      // Check left nodes.\n      return this.left.find(value);\n    }\n\n    // 如果目标值大于当前节点的值并且存在右节点，在右子树中递归搜索目标值。\n    if (this.nodeValueComparator.greaterThan(value, this.value) && this.right) {\n      // Check right nodes.\n      return this.right.find(value);\n    }\n\n    // 在树中未找到目标值。\n    return null;\n  }\n\n  /**\n   * @param {*} value\n   * @return {boolean}\n   */\n  contains(value) {\n    return !!this.find(value);\n  }\n\n  /**\n   * 从二叉搜索树中移除具有特定值的节点。\n   * @param {*} value - 要移除的节点的值。\n   * @return {boolean} - 如果成功移除节点，则返回true；否则返回false。\n   */\n  remove(value) {\n    // 找到要移除的节点。\n    const nodeToRemove = this.find(value);\n\n    // 如果未找到节点，则抛出错误。\n    if (!nodeToRemove) {\n      throw new Error(\"Item not found in the tree\");\n    }\n    // 获取节点的父节点。\n    const { parent } = nodeToRemove;\n    // 如果节点是叶子节点（没有子节点）。\n    if (!nodeToRemove.left && !nodeToRemove.right) {\n      // 如果节点有父节点，则从父节点中移除对该节点的引用。\n      if (parent) {\n        parent.removeChild(nodeToRemove);\n      } else {\n        // 否则，只需将当前节点的值设置为undefined。\n        nodeToRemove.setValue(undefined);\n      }\n    } else if (nodeToRemove.left && nodeToRemove.right) {\n      // 如果节点有两个子节点。\n      // 找到比要移除的节点值更大的下一个节点（右侧分支中的最小值）。\n      const nextBiggerNode = nodeToRemove.right.findMin();\n      // 如果下一个更大的节点不是要移除节点的右子节点，\n      // 则移除下一个更大的节点，并将要移除的节点的值替换为该节点的值。\n      if (!this.nodeComparator.equal(nextBiggerNode, nodeToRemove.right)) {\n        this.remove(nextBiggerNode.value);\n        nodeToRemove.setValue(nextBiggerNode.value);\n      } else {\n        // 否则，如果下一个右侧节点是下一个更大的节点，并且它没有左子节点，\n        // 则只需用右侧节点替换要删除的节点。\n        nodeToRemove.setValue(nodeToRemove.right.value);\n        nodeToRemove.setRight(nodeToRemove.right.right);\n      }\n    } else {\n      // 如果节点只有一个子节点。\n      // 获取子节点。\n      /** @var BinarySearchTreeNode */\n      const childNode = nodeToRemove.left || nodeToRemove.right;\n      // 如果节点有父节点，则将子节点替换为当前节点的父节点的直接子节点。\n      if (parent) {\n        parent.replaceChild(nodeToRemove, childNode);\n      } else {\n        // 否则，用子节点替换要删除的节点。\n        BinaryTreeNode.copyNode(childNode, nodeToRemove);\n      }\n    }\n\n    // 清除被移除节点的父节点。\n    nodeToRemove.parent = null;\n\n    return true;\n  }\n\n  /**\n   * 查找最小值节点\n   * @return {BinarySearchTreeNode}\n   */\n  findMin() {\n    // 如果没有左子节点，说明当前节点就是最小值节点。\n    if (!this.left) {\n      return this;\n    }\n    // 递归调用左子节点的findMin方法，直到找到最小值节点。\n    return this.left.findMin();\n  }\n}\n```\n\n## BinarySearchTree\n\n```js\nexport default class BinarySearchTree {\n  /**\n   * 初始化方法\n   * @param {function} [nodeValueCompareFunction]\n   */\n  // 创建一个构造函数，它接受一个可选的 `nodeValueCompareFunction` 参数\n  constructor(nodeValueCompareFunction) {\n    // 创建一个新的 `BinarySearchTreeNode` 对象，值为 `null`，并使用提供的 `nodeValueCompareFunction` 作为比较器。\n    this.root = new BinarySearchTreeNode(null, nodeValueCompareFunction);\n\n    // 从根节点中获取节点比较器。\n    // 将 `root` 节点的 `nodeComparator` 属性赋值给当前实例的 `nodeComparator` 属性。\n    this.nodeComparator = this.root.nodeComparator;\n  }\n\n  /**\n   * 插入值\n   * @param {*} value\n   * @return {BinarySearchTreeNode}\n   */\n  insert(value) {\n    return this.root.insert(value);\n  }\n\n  /**\n   * 判断是否包含值\n   * @param {*} value\n   * @return {boolean}\n   */\n  contains(value) {\n    return this.root.contains(value);\n  }\n\n  /**\n   * 移除值\n   * @param {*} value\n   * @return {boolean}\n   */\n  remove(value) {\n    return this.root.remove(value);\n  }\n\n  /**\n   * 对象的字符串方法\n   * @return {string}\n   */\n  toString() {\n    return this.root.toString();\n  }\n}\n```\n","slug":"data-structures-011-BinarySearchTree","published":1,"updated":"2023-12-14T06:35:59.558Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clq4xe1db0019tz2hf3bf58t2","content":"<h2 id=\"二叉搜索树\"><a href=\"#二叉搜索树\" class=\"headerlink\" title=\"二叉搜索树\"></a>二叉搜索树</h2><p><strong>二叉搜索树</strong>（Binary Search Tree，简称 BST）是计算机科学中一种特定类型的容器，有时也被称为有序二叉树或排序二叉树。它们用于在内存中存储“项”（如数字、名称等），可以快速进行查找、添加和删除操作。它们可以用于实现动态集合或查找表，以便通过键来查找项（例如，通过姓名查找人的电话号码）。</p>\n<p>二叉搜索树将其键按照排序顺序存储，以便查找和其他操作可以使用二分查找的原理：在树中查找键（或查找要插入新键的位置）时，从根到叶子遍历树，与树节点中存储的键进行比较，并根据比较结果决定是继续在左子树还是右子树中搜索。平均而言，这意味着每次比较都可以跳过树的约一半，因此每次查找、插入或删除操作的时间与树中存储的项数的对数成比例。这比在（未排序的）数组中按键查找项所需的线性时间要好得多，但比哈希表上的相应操作要慢。</p>\n<p>下图是一个大小为 9、深度为 3 的二叉搜索树示例，根节点为 8。叶子节点未绘制。</p>\n<span id=\"more\"></span>\n\n<p><img src=\"/../images/data-structures/binary-search-tree.jpg\" alt=\"binary-search-tree\"></p>\n<h2 id=\"BinarySearchTreeNode\"><a href=\"#BinarySearchTreeNode\" class=\"headerlink\" title=\"BinarySearchTreeNode\"></a>BinarySearchTreeNode</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BinarySearchTreeNode</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">BinaryTreeNode</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; [value] - node value.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">function</span>&#125; [compareFunction] - comparator function for node values.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"comment\">// 定义 BinarySearchTreeNode 类的构造函数。</span></span><br><span class=\"line\">  <span class=\"comment\">// 它接受一个可选的 value 参数和一个可选的 compareFunction 参数。</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">value = <span class=\"literal\">null</span>, compareFunction = <span class=\"literal\">undefined</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 value 参数调用父类 BinaryTreeNode 的构造函数。</span></span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(value);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// This comparator is used to compare node values with each other.</span></span><br><span class=\"line\">    <span class=\"comment\">// 将 compareFunction 参数赋值给实例的 compareFunction 属性。</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">compareFunction</span> = compareFunction;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建 Comparator 类的新实例，并将其赋值给实例的 nodeValueComparator 属性。</span></span><br><span class=\"line\">    <span class=\"comment\">// 将 compareFunction 参数传递给 Comparator 构造函数。</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">nodeValueComparator</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>(compareFunction);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 将一个值插入到二叉搜索树中。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">value</span> - 要插入的值。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">BinarySearchTreeNode</span>&#125; - 插入的节点。</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">insert</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果当前节点为空，将值设置为当前节点的值。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">nodeValueComparator</span>.<span class=\"title function_\">equal</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>, <span class=\"literal\">null</span>)) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果要插入的值小于当前节点的值，进入左子树。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">nodeValueComparator</span>.<span class=\"title function_\">lessThan</span>(value, <span class=\"variable language_\">this</span>.<span class=\"property\">value</span>)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果存在左子节点，递归调用插入方法。</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">left</span>.<span class=\"title function_\">insert</span>(value);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 如果不存在左子节点，创建一个新节点并将其设置为左子节点。</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> newNode = <span class=\"keyword\">new</span> <span class=\"title class_\">BinarySearchTreeNode</span>(value, <span class=\"variable language_\">this</span>.<span class=\"property\">compareFunction</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">setLeft</span>(newNode);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> newNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果要插入的值大于当前节点的值，进入右子树。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">nodeValueComparator</span>.<span class=\"title function_\">greaterThan</span>(value, <span class=\"variable language_\">this</span>.<span class=\"property\">value</span>)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果存在右子节点，递归调用插入方法。</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">right</span>.<span class=\"title function_\">insert</span>(value);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 如果不存在右子节点，创建一个新节点并将其设置为右子节点。</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> newNode = <span class=\"keyword\">new</span> <span class=\"title class_\">BinarySearchTreeNode</span>(value, <span class=\"variable language_\">this</span>.<span class=\"property\">compareFunction</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">setRight</span>(newNode);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> newNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果要插入的值等于当前节点的值，返回当前节点。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 在二叉搜索树中查找具有给定值的节点。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">value</span> - 要查找的值。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">BinarySearchTreeNode</span>&#125; - 具有给定值的节点，如果未找到则返回null。</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">find</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 检查当前节点是否具有目标值。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">nodeValueComparator</span>.<span class=\"title function_\">equal</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>, value)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果目标值小于当前节点的值并且存在左节点，在左子树中递归搜索目标值。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">nodeValueComparator</span>.<span class=\"title function_\">lessThan</span>(value, <span class=\"variable language_\">this</span>.<span class=\"property\">value</span>) &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Check left nodes.</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">left</span>.<span class=\"title function_\">find</span>(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果目标值大于当前节点的值并且存在右节点，在右子树中递归搜索目标值。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">nodeValueComparator</span>.<span class=\"title function_\">greaterThan</span>(value, <span class=\"variable language_\">this</span>.<span class=\"property\">value</span>) &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Check right nodes.</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">right</span>.<span class=\"title function_\">find</span>(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在树中未找到目标值。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">value</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">contains</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !!<span class=\"variable language_\">this</span>.<span class=\"title function_\">find</span>(value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 从二叉搜索树中移除具有特定值的节点。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">value</span> - 要移除的节点的值。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125; - 如果成功移除节点，则返回true；否则返回false。</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">remove</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 找到要移除的节点。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> nodeToRemove = <span class=\"variable language_\">this</span>.<span class=\"title function_\">find</span>(value);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果未找到节点，则抛出错误。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!nodeToRemove) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;Item not found in the tree&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 获取节点的父节点。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; parent &#125; = nodeToRemove;</span><br><span class=\"line\">    <span class=\"comment\">// 如果节点是叶子节点（没有子节点）。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!nodeToRemove.<span class=\"property\">left</span> &amp;&amp; !nodeToRemove.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果节点有父节点，则从父节点中移除对该节点的引用。</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (parent) &#123;</span><br><span class=\"line\">        parent.<span class=\"title function_\">removeChild</span>(nodeToRemove);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 否则，只需将当前节点的值设置为undefined。</span></span><br><span class=\"line\">        nodeToRemove.<span class=\"title function_\">setValue</span>(<span class=\"literal\">undefined</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nodeToRemove.<span class=\"property\">left</span> &amp;&amp; nodeToRemove.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果节点有两个子节点。</span></span><br><span class=\"line\">      <span class=\"comment\">// 找到比要移除的节点值更大的下一个节点（右侧分支中的最小值）。</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> nextBiggerNode = nodeToRemove.<span class=\"property\">right</span>.<span class=\"title function_\">findMin</span>();</span><br><span class=\"line\">      <span class=\"comment\">// 如果下一个更大的节点不是要移除节点的右子节点，</span></span><br><span class=\"line\">      <span class=\"comment\">// 则移除下一个更大的节点，并将要移除的节点的值替换为该节点的值。</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">nodeComparator</span>.<span class=\"title function_\">equal</span>(nextBiggerNode, nodeToRemove.<span class=\"property\">right</span>)) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">remove</span>(nextBiggerNode.<span class=\"property\">value</span>);</span><br><span class=\"line\">        nodeToRemove.<span class=\"title function_\">setValue</span>(nextBiggerNode.<span class=\"property\">value</span>);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 否则，如果下一个右侧节点是下一个更大的节点，并且它没有左子节点，</span></span><br><span class=\"line\">        <span class=\"comment\">// 则只需用右侧节点替换要删除的节点。</span></span><br><span class=\"line\">        nodeToRemove.<span class=\"title function_\">setValue</span>(nodeToRemove.<span class=\"property\">right</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">        nodeToRemove.<span class=\"title function_\">setRight</span>(nodeToRemove.<span class=\"property\">right</span>.<span class=\"property\">right</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果节点只有一个子节点。</span></span><br><span class=\"line\">      <span class=\"comment\">// 获取子节点。</span></span><br><span class=\"line\">      <span class=\"comment\">/** <span class=\"doctag\">@var</span> BinarySearchTreeNode */</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> childNode = nodeToRemove.<span class=\"property\">left</span> || nodeToRemove.<span class=\"property\">right</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 如果节点有父节点，则将子节点替换为当前节点的父节点的直接子节点。</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (parent) &#123;</span><br><span class=\"line\">        parent.<span class=\"title function_\">replaceChild</span>(nodeToRemove, childNode);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 否则，用子节点替换要删除的节点。</span></span><br><span class=\"line\">        <span class=\"title class_\">BinaryTreeNode</span>.<span class=\"title function_\">copyNode</span>(childNode, nodeToRemove);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 清除被移除节点的父节点。</span></span><br><span class=\"line\">    nodeToRemove.<span class=\"property\">parent</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 查找最小值节点</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">BinarySearchTreeNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">findMin</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果没有左子节点，说明当前节点就是最小值节点。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 递归调用左子节点的findMin方法，直到找到最小值节点。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">left</span>.<span class=\"title function_\">findMin</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BinarySearchTree\"><a href=\"#BinarySearchTree\" class=\"headerlink\" title=\"BinarySearchTree\"></a>BinarySearchTree</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BinarySearchTree</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 初始化方法</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">function</span>&#125; [nodeValueCompareFunction]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"comment\">// 创建一个构造函数，它接受一个可选的 `nodeValueCompareFunction` 参数</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">nodeValueCompareFunction</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个新的 `BinarySearchTreeNode` 对象，值为 `null`，并使用提供的 `nodeValueCompareFunction` 作为比较器。</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">root</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">BinarySearchTreeNode</span>(<span class=\"literal\">null</span>, nodeValueCompareFunction);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从根节点中获取节点比较器。</span></span><br><span class=\"line\">    <span class=\"comment\">// 将 `root` 节点的 `nodeComparator` 属性赋值给当前实例的 `nodeComparator` 属性。</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">nodeComparator</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">root</span>.<span class=\"property\">nodeComparator</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 插入值</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">value</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">BinarySearchTreeNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">insert</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">root</span>.<span class=\"title function_\">insert</span>(value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 判断是否包含值</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">value</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">contains</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">root</span>.<span class=\"title function_\">contains</span>(value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 移除值</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">value</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">remove</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">root</span>.<span class=\"title function_\">remove</span>(value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 对象的字符串方法</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">toString</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">root</span>.<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"related_posts":["2023/12/14/data-structures-015-FenwickTree/"],"length":1499,"excerpt":"<h2 id=\"二叉搜索树\"><a href=\"#二叉搜索树\" class=\"headerlink\" title=\"二叉搜索树\"></a>二叉搜索树</h2><p><strong>二叉搜索树</strong>（Binary Search Tree，简称 BST）是计算机科学中一种特定类型的容器，有时也被称为有序二叉树或排序二叉树。它们用于在内存中存储“项”（如数字、名称等），可以快速进行查找、添加和删除操作。它们可以用于实现动态集合或查找表，以便通过键来查找项（例如，通过姓名查找人的电话号码）。</p>\n<p>二叉搜索树将其键按照排序顺序存储，以便查找和其他操作可以使用二分查找的原理：在树中查找键（或查找要插入新键的位置）时，从根到叶子遍历树，与树节点中存储的键进行比较，并根据比较结果决定是继续在左子树还是右子树中搜索。平均而言，这意味着每次比较都可以跳过树的约一半，因此每次查找、插入或删除操作的时间与树中存储的项数的对数成比例。这比在（未排序的）数组中按键查找项所需的线性时间要好得多，但比哈希表上的相应操作要慢。</p>\n<p>下图是一个大小为 9、深度为 3 的二叉搜索树示例，根节点为 8。叶子节点未绘制。</p>","more":"<p><img src=\"/../images/data-structures/binary-search-tree.jpg\" alt=\"binary-search-tree\"></p>\n<h2 id=\"BinarySearchTreeNode\"><a href=\"#BinarySearchTreeNode\" class=\"headerlink\" title=\"BinarySearchTreeNode\"></a>BinarySearchTreeNode</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BinarySearchTreeNode</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">BinaryTreeNode</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; [value] - node value.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">function</span>&#125; [compareFunction] - comparator function for node values.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"comment\">// 定义 BinarySearchTreeNode 类的构造函数。</span></span><br><span class=\"line\">  <span class=\"comment\">// 它接受一个可选的 value 参数和一个可选的 compareFunction 参数。</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">value = <span class=\"literal\">null</span>, compareFunction = <span class=\"literal\">undefined</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 value 参数调用父类 BinaryTreeNode 的构造函数。</span></span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(value);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// This comparator is used to compare node values with each other.</span></span><br><span class=\"line\">    <span class=\"comment\">// 将 compareFunction 参数赋值给实例的 compareFunction 属性。</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">compareFunction</span> = compareFunction;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建 Comparator 类的新实例，并将其赋值给实例的 nodeValueComparator 属性。</span></span><br><span class=\"line\">    <span class=\"comment\">// 将 compareFunction 参数传递给 Comparator 构造函数。</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">nodeValueComparator</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>(compareFunction);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 将一个值插入到二叉搜索树中。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">value</span> - 要插入的值。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">BinarySearchTreeNode</span>&#125; - 插入的节点。</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">insert</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果当前节点为空，将值设置为当前节点的值。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">nodeValueComparator</span>.<span class=\"title function_\">equal</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>, <span class=\"literal\">null</span>)) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果要插入的值小于当前节点的值，进入左子树。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">nodeValueComparator</span>.<span class=\"title function_\">lessThan</span>(value, <span class=\"variable language_\">this</span>.<span class=\"property\">value</span>)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果存在左子节点，递归调用插入方法。</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">left</span>.<span class=\"title function_\">insert</span>(value);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 如果不存在左子节点，创建一个新节点并将其设置为左子节点。</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> newNode = <span class=\"keyword\">new</span> <span class=\"title class_\">BinarySearchTreeNode</span>(value, <span class=\"variable language_\">this</span>.<span class=\"property\">compareFunction</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">setLeft</span>(newNode);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> newNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果要插入的值大于当前节点的值，进入右子树。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">nodeValueComparator</span>.<span class=\"title function_\">greaterThan</span>(value, <span class=\"variable language_\">this</span>.<span class=\"property\">value</span>)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果存在右子节点，递归调用插入方法。</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">right</span>.<span class=\"title function_\">insert</span>(value);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 如果不存在右子节点，创建一个新节点并将其设置为右子节点。</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> newNode = <span class=\"keyword\">new</span> <span class=\"title class_\">BinarySearchTreeNode</span>(value, <span class=\"variable language_\">this</span>.<span class=\"property\">compareFunction</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">setRight</span>(newNode);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> newNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果要插入的值等于当前节点的值，返回当前节点。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 在二叉搜索树中查找具有给定值的节点。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">value</span> - 要查找的值。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">BinarySearchTreeNode</span>&#125; - 具有给定值的节点，如果未找到则返回null。</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">find</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 检查当前节点是否具有目标值。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">nodeValueComparator</span>.<span class=\"title function_\">equal</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>, value)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果目标值小于当前节点的值并且存在左节点，在左子树中递归搜索目标值。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">nodeValueComparator</span>.<span class=\"title function_\">lessThan</span>(value, <span class=\"variable language_\">this</span>.<span class=\"property\">value</span>) &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Check left nodes.</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">left</span>.<span class=\"title function_\">find</span>(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果目标值大于当前节点的值并且存在右节点，在右子树中递归搜索目标值。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">nodeValueComparator</span>.<span class=\"title function_\">greaterThan</span>(value, <span class=\"variable language_\">this</span>.<span class=\"property\">value</span>) &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Check right nodes.</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">right</span>.<span class=\"title function_\">find</span>(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在树中未找到目标值。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">value</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">contains</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !!<span class=\"variable language_\">this</span>.<span class=\"title function_\">find</span>(value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 从二叉搜索树中移除具有特定值的节点。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">value</span> - 要移除的节点的值。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125; - 如果成功移除节点，则返回true；否则返回false。</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">remove</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 找到要移除的节点。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> nodeToRemove = <span class=\"variable language_\">this</span>.<span class=\"title function_\">find</span>(value);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果未找到节点，则抛出错误。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!nodeToRemove) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;Item not found in the tree&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 获取节点的父节点。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; parent &#125; = nodeToRemove;</span><br><span class=\"line\">    <span class=\"comment\">// 如果节点是叶子节点（没有子节点）。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!nodeToRemove.<span class=\"property\">left</span> &amp;&amp; !nodeToRemove.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果节点有父节点，则从父节点中移除对该节点的引用。</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (parent) &#123;</span><br><span class=\"line\">        parent.<span class=\"title function_\">removeChild</span>(nodeToRemove);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 否则，只需将当前节点的值设置为undefined。</span></span><br><span class=\"line\">        nodeToRemove.<span class=\"title function_\">setValue</span>(<span class=\"literal\">undefined</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nodeToRemove.<span class=\"property\">left</span> &amp;&amp; nodeToRemove.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果节点有两个子节点。</span></span><br><span class=\"line\">      <span class=\"comment\">// 找到比要移除的节点值更大的下一个节点（右侧分支中的最小值）。</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> nextBiggerNode = nodeToRemove.<span class=\"property\">right</span>.<span class=\"title function_\">findMin</span>();</span><br><span class=\"line\">      <span class=\"comment\">// 如果下一个更大的节点不是要移除节点的右子节点，</span></span><br><span class=\"line\">      <span class=\"comment\">// 则移除下一个更大的节点，并将要移除的节点的值替换为该节点的值。</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">nodeComparator</span>.<span class=\"title function_\">equal</span>(nextBiggerNode, nodeToRemove.<span class=\"property\">right</span>)) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">remove</span>(nextBiggerNode.<span class=\"property\">value</span>);</span><br><span class=\"line\">        nodeToRemove.<span class=\"title function_\">setValue</span>(nextBiggerNode.<span class=\"property\">value</span>);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 否则，如果下一个右侧节点是下一个更大的节点，并且它没有左子节点，</span></span><br><span class=\"line\">        <span class=\"comment\">// 则只需用右侧节点替换要删除的节点。</span></span><br><span class=\"line\">        nodeToRemove.<span class=\"title function_\">setValue</span>(nodeToRemove.<span class=\"property\">right</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">        nodeToRemove.<span class=\"title function_\">setRight</span>(nodeToRemove.<span class=\"property\">right</span>.<span class=\"property\">right</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果节点只有一个子节点。</span></span><br><span class=\"line\">      <span class=\"comment\">// 获取子节点。</span></span><br><span class=\"line\">      <span class=\"comment\">/** <span class=\"doctag\">@var</span> BinarySearchTreeNode */</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> childNode = nodeToRemove.<span class=\"property\">left</span> || nodeToRemove.<span class=\"property\">right</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 如果节点有父节点，则将子节点替换为当前节点的父节点的直接子节点。</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (parent) &#123;</span><br><span class=\"line\">        parent.<span class=\"title function_\">replaceChild</span>(nodeToRemove, childNode);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 否则，用子节点替换要删除的节点。</span></span><br><span class=\"line\">        <span class=\"title class_\">BinaryTreeNode</span>.<span class=\"title function_\">copyNode</span>(childNode, nodeToRemove);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 清除被移除节点的父节点。</span></span><br><span class=\"line\">    nodeToRemove.<span class=\"property\">parent</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 查找最小值节点</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">BinarySearchTreeNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">findMin</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果没有左子节点，说明当前节点就是最小值节点。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 递归调用左子节点的findMin方法，直到找到最小值节点。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">left</span>.<span class=\"title function_\">findMin</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BinarySearchTree\"><a href=\"#BinarySearchTree\" class=\"headerlink\" title=\"BinarySearchTree\"></a>BinarySearchTree</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BinarySearchTree</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 初始化方法</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">function</span>&#125; [nodeValueCompareFunction]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"comment\">// 创建一个构造函数，它接受一个可选的 `nodeValueCompareFunction` 参数</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">nodeValueCompareFunction</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个新的 `BinarySearchTreeNode` 对象，值为 `null`，并使用提供的 `nodeValueCompareFunction` 作为比较器。</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">root</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">BinarySearchTreeNode</span>(<span class=\"literal\">null</span>, nodeValueCompareFunction);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从根节点中获取节点比较器。</span></span><br><span class=\"line\">    <span class=\"comment\">// 将 `root` 节点的 `nodeComparator` 属性赋值给当前实例的 `nodeComparator` 属性。</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">nodeComparator</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">root</span>.<span class=\"property\">nodeComparator</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 插入值</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">value</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">BinarySearchTreeNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">insert</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">root</span>.<span class=\"title function_\">insert</span>(value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 判断是否包含值</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">value</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">contains</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">root</span>.<span class=\"title function_\">contains</span>(value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 移除值</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">value</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">remove</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">root</span>.<span class=\"title function_\">remove</span>(value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 对象的字符串方法</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">toString</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">root</span>.<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"JavaScript Algorithms and Data Structures 源码分析(12) -- AVL 树 avl-tree","date":"2023-12-14T06:12:59.000Z","_content":"\n## AVL 树\n\n在计算机科学中，**AVL 树**（以发明者 Adelson-Velsky 和 Landis 命名）是一种自平衡的二叉搜索树。它是第一个被发明出来的这种数据结构。在 AVL 树中，任何节点的两个子树的高度最多相差一；如果在任何时候它们相差超过一，就会进行重新平衡以恢复这个属性。查找、插入和删除在平均和最坏情况下都需要 O(log n)的时间，其中 n 是操作之前树中节点的数量。插入和删除可能需要对树进行一个或多个树旋转进行重新平衡。\n\n动画显示将几个元素插入到 AVL 树中。它包括左旋、右旋、左右旋和右左旋。\n\n<!-- more -->\n\n![AVL Tree](https://upload.wikimedia.org/wikipedia/commons/f/fd/AVL_Tree_Example.gif)\n\n带有平衡因子（绿色）的 AVL 树\n\n![AVL Tree](https://upload.wikimedia.org/wikipedia/commons/a/ad/AVL-tree-wBalance_K.svg)\n\n### AVL Tree Rotations\n\n**Left-Left Rotation**\n\n![Left-Left Rotation](http://btechsmartclass.com/data_structures/ds_images/LL%20Rotation.png)\n\n**Right-Right Rotation**\n\n![Right-Right Rotation](http://btechsmartclass.com/data_structures/ds_images/RR%20Rotation.png)\n\n**Left-Right Rotation**\n\n![Left-Right Rotation](http://btechsmartclass.com/data_structures/ds_images/LR%20Rotation.png)\n\n**Right-Left Rotation**\n\n![Right-Right Rotation](http://btechsmartclass.com/data_structures/ds_images/RL%20Rotation.png)\n\n## AvlTree\n\n```js\nexport default class AvlTree extends BinarySearchTree {\n  /**\n   * @param {*} value\n   */\n  insert(value) {\n    // 执行普通的二叉搜索树插入操作。\n    super.insert(value);\n\n    // 从插入的节点开始向上遍历到根节点，并在此过程中检查平衡因子。\n    // 找到刚插入的节点\n    let currentNode = this.root.find(value);\n    while (currentNode) {\n      // 检查当前节点的平衡因子，并根据需要执行旋转操作\n      this.balance(currentNode);\n      // 移动到父节点\n      currentNode = currentNode.parent;\n    }\n  }\n\n  /**\n   * 从二叉搜索树中移除一个值，并重新平衡树。\n   * @param {*} value - 要移除的值。\n   * @return {boolean} - 如果成功移除了值则返回true，否则返回false。\n   */\n  remove(value) {\n    // 调用父类的remove方法从树中移除值。\n    super.remove(value);\n\n    // 从根节点开始平衡树。\n    this.balance(this.root);\n  }\n\n  /**\n   * @param {BinarySearchTreeNode} node\n   */\n  balance(node) {\n    // 如果平衡因子大于1（节点左重）\n    if (node.balanceFactor > 1) {\n      // 如果左子节点的平衡因子大于0（左-左旋转）或小于0（左-右旋转），则执行左旋转\n      if (node.left.balanceFactor > 0) {\n        // 执行左-左旋转\n        this.rotateLeftLeft(node);\n      } else if (node.left.balanceFactor < 0) {\n        // 执行左-右旋转\n        this.rotateLeftRight(node);\n      }\n    } else if (node.balanceFactor < -1) {\n      // 如果平衡因子小于-1（节点右重）\n      // 如果右子节点的平衡因子小于0（右-右旋转）或大于0（右-左旋转），则执行右旋转\n      if (node.right.balanceFactor < 0) {\n        // 执行右-右旋转\n        this.rotateRightRight(node);\n      } else if (node.right.balanceFactor > 0) {\n        // 执行右-左旋转\n        this.rotateRightLeft(node);\n      }\n    }\n  }\n\n  /**\n   * 将二叉搜索树向左旋转。\n   * @param {BinarySearchTreeNode} rootNode - 要旋转的树的根节点。\n   */\n  rotateLeftLeft(rootNode) {\n    // 将左节点从根节点分离。\n    const leftNode = rootNode.left;\n    rootNode.setLeft(null);\n\n    // 将左节点设置为根节点的父节点的左子节点。\n    if (rootNode.parent) {\n      rootNode.parent.setLeft(leftNode);\n    } else if (rootNode === this.root) {\n      // 如果根节点是根节点，则将左节点设置为新的根节点。\n      this.root = leftNode;\n    }\n\n    // 如果左节点有右子节点，则将其分离并将其作为根节点的左子节点。\n    if (leftNode.right) {\n      rootNode.setLeft(leftNode.right);\n    }\n\n    // 将根节点附加到左节点的右侧。\n    leftNode.setRight(rootNode);\n  }\n\n  /**\n   * 将给定的二叉搜索树节点先向左旋转，然后再向右旋转。\n   * @param {BinarySearchTreeNode} rootNode - 二叉搜索树的根节点。\n   */\n  rotateLeftRight(rootNode) {\n    // 将左节点从根节点上分离，因为它将被替换。\n    const leftNode = rootNode.left;\n    rootNode.setLeft(null);\n\n    // 将右节点从左节点上分离。\n    const leftRightNode = leftNode.right;\n    leftNode.setRight(null);\n\n    // 保留 leftRightNode 的左子树。\n    if (leftRightNode.left) {\n      leftNode.setRight(leftRightNode.left);\n      leftRightNode.setLeft(null);\n    }\n\n    // 将 leftRightNode 附加到根节点上。\n    rootNode.setLeft(leftRightNode);\n\n    // 将 leftNode 作为 leftRightNode 的左节点。\n    leftRightNode.setLeft(leftNode);\n\n    // 进行左-左旋转。\n    this.rotateLeftLeft(rootNode);\n  }\n\n  /**\n   * @param {BinarySearchTreeNode} rootNode\n   */\n  rotateRightLeft(rootNode) {\n    // 分离要替换的右节点\n    const rightNode = rootNode.right;\n    rootNode.setRight(null);\n\n    // 分离右节点的左节点\n    const rightLeftNode = rightNode.left;\n    rightNode.setLeft(null);\n\n    // 如果右节点的左节点存在右子节点，则分离右节点的右子节点\n    if (rightLeftNode.right) {\n      rightNode.setLeft(rightLeftNode.right);\n      rightLeftNode.setRight(null);\n    }\n\n    // 将右左节点连接到根节点的右侧\n    rootNode.setRight(rightLeftNode);\n\n    // 将右节点作为右左节点的右子节点\n    rightLeftNode.setRight(rightNode);\n\n    // 进行右右旋转\n    this.rotateRightRight(rootNode);\n  }\n\n  /**\n   * @param {BinarySearchTreeNode} rootNode\n   */\n  rotateRightRight(rootNode) {\n    // 从根节点中分离右子节点。\n    const rightNode = rootNode.right;\n    rootNode.setRight(null);\n\n    // 将右子节点设置为根节点的父节点的右子节点。\n    // 如果根节点有父节点，则将右子节点设置为父节点的新右子节点。\n    if (rootNode.parent) {\n      rootNode.parent.setRight(rightNode);\n    } else if (rootNode === this.root) {\n      // 如果根节点是树的根节点，则将右子节点设置为新的根节点。\n      this.root = rightNode;\n    }\n\n    // 如果右子节点有左子节点，则将左子节点从右子节点中分离，并将其作为根节点的新右子节点。\n    if (rightNode.left) {\n      rootNode.setRight(rightNode.left);\n    }\n\n    // 将根节点作为右子节点的左子节点。\n    rightNode.setLeft(rootNode);\n  }\n}\n```\n","source":"_posts/data-structures-012-AvlTree.md","raw":"---\ntitle: JavaScript Algorithms and Data Structures 源码分析(12) -- AVL 树 avl-tree\ndate: 2023-12-14 14:12:59\ntags:\n  - data structures\ncategories:\n  - 数据结构与算法\n---\n\n## AVL 树\n\n在计算机科学中，**AVL 树**（以发明者 Adelson-Velsky 和 Landis 命名）是一种自平衡的二叉搜索树。它是第一个被发明出来的这种数据结构。在 AVL 树中，任何节点的两个子树的高度最多相差一；如果在任何时候它们相差超过一，就会进行重新平衡以恢复这个属性。查找、插入和删除在平均和最坏情况下都需要 O(log n)的时间，其中 n 是操作之前树中节点的数量。插入和删除可能需要对树进行一个或多个树旋转进行重新平衡。\n\n动画显示将几个元素插入到 AVL 树中。它包括左旋、右旋、左右旋和右左旋。\n\n<!-- more -->\n\n![AVL Tree](https://upload.wikimedia.org/wikipedia/commons/f/fd/AVL_Tree_Example.gif)\n\n带有平衡因子（绿色）的 AVL 树\n\n![AVL Tree](https://upload.wikimedia.org/wikipedia/commons/a/ad/AVL-tree-wBalance_K.svg)\n\n### AVL Tree Rotations\n\n**Left-Left Rotation**\n\n![Left-Left Rotation](http://btechsmartclass.com/data_structures/ds_images/LL%20Rotation.png)\n\n**Right-Right Rotation**\n\n![Right-Right Rotation](http://btechsmartclass.com/data_structures/ds_images/RR%20Rotation.png)\n\n**Left-Right Rotation**\n\n![Left-Right Rotation](http://btechsmartclass.com/data_structures/ds_images/LR%20Rotation.png)\n\n**Right-Left Rotation**\n\n![Right-Right Rotation](http://btechsmartclass.com/data_structures/ds_images/RL%20Rotation.png)\n\n## AvlTree\n\n```js\nexport default class AvlTree extends BinarySearchTree {\n  /**\n   * @param {*} value\n   */\n  insert(value) {\n    // 执行普通的二叉搜索树插入操作。\n    super.insert(value);\n\n    // 从插入的节点开始向上遍历到根节点，并在此过程中检查平衡因子。\n    // 找到刚插入的节点\n    let currentNode = this.root.find(value);\n    while (currentNode) {\n      // 检查当前节点的平衡因子，并根据需要执行旋转操作\n      this.balance(currentNode);\n      // 移动到父节点\n      currentNode = currentNode.parent;\n    }\n  }\n\n  /**\n   * 从二叉搜索树中移除一个值，并重新平衡树。\n   * @param {*} value - 要移除的值。\n   * @return {boolean} - 如果成功移除了值则返回true，否则返回false。\n   */\n  remove(value) {\n    // 调用父类的remove方法从树中移除值。\n    super.remove(value);\n\n    // 从根节点开始平衡树。\n    this.balance(this.root);\n  }\n\n  /**\n   * @param {BinarySearchTreeNode} node\n   */\n  balance(node) {\n    // 如果平衡因子大于1（节点左重）\n    if (node.balanceFactor > 1) {\n      // 如果左子节点的平衡因子大于0（左-左旋转）或小于0（左-右旋转），则执行左旋转\n      if (node.left.balanceFactor > 0) {\n        // 执行左-左旋转\n        this.rotateLeftLeft(node);\n      } else if (node.left.balanceFactor < 0) {\n        // 执行左-右旋转\n        this.rotateLeftRight(node);\n      }\n    } else if (node.balanceFactor < -1) {\n      // 如果平衡因子小于-1（节点右重）\n      // 如果右子节点的平衡因子小于0（右-右旋转）或大于0（右-左旋转），则执行右旋转\n      if (node.right.balanceFactor < 0) {\n        // 执行右-右旋转\n        this.rotateRightRight(node);\n      } else if (node.right.balanceFactor > 0) {\n        // 执行右-左旋转\n        this.rotateRightLeft(node);\n      }\n    }\n  }\n\n  /**\n   * 将二叉搜索树向左旋转。\n   * @param {BinarySearchTreeNode} rootNode - 要旋转的树的根节点。\n   */\n  rotateLeftLeft(rootNode) {\n    // 将左节点从根节点分离。\n    const leftNode = rootNode.left;\n    rootNode.setLeft(null);\n\n    // 将左节点设置为根节点的父节点的左子节点。\n    if (rootNode.parent) {\n      rootNode.parent.setLeft(leftNode);\n    } else if (rootNode === this.root) {\n      // 如果根节点是根节点，则将左节点设置为新的根节点。\n      this.root = leftNode;\n    }\n\n    // 如果左节点有右子节点，则将其分离并将其作为根节点的左子节点。\n    if (leftNode.right) {\n      rootNode.setLeft(leftNode.right);\n    }\n\n    // 将根节点附加到左节点的右侧。\n    leftNode.setRight(rootNode);\n  }\n\n  /**\n   * 将给定的二叉搜索树节点先向左旋转，然后再向右旋转。\n   * @param {BinarySearchTreeNode} rootNode - 二叉搜索树的根节点。\n   */\n  rotateLeftRight(rootNode) {\n    // 将左节点从根节点上分离，因为它将被替换。\n    const leftNode = rootNode.left;\n    rootNode.setLeft(null);\n\n    // 将右节点从左节点上分离。\n    const leftRightNode = leftNode.right;\n    leftNode.setRight(null);\n\n    // 保留 leftRightNode 的左子树。\n    if (leftRightNode.left) {\n      leftNode.setRight(leftRightNode.left);\n      leftRightNode.setLeft(null);\n    }\n\n    // 将 leftRightNode 附加到根节点上。\n    rootNode.setLeft(leftRightNode);\n\n    // 将 leftNode 作为 leftRightNode 的左节点。\n    leftRightNode.setLeft(leftNode);\n\n    // 进行左-左旋转。\n    this.rotateLeftLeft(rootNode);\n  }\n\n  /**\n   * @param {BinarySearchTreeNode} rootNode\n   */\n  rotateRightLeft(rootNode) {\n    // 分离要替换的右节点\n    const rightNode = rootNode.right;\n    rootNode.setRight(null);\n\n    // 分离右节点的左节点\n    const rightLeftNode = rightNode.left;\n    rightNode.setLeft(null);\n\n    // 如果右节点的左节点存在右子节点，则分离右节点的右子节点\n    if (rightLeftNode.right) {\n      rightNode.setLeft(rightLeftNode.right);\n      rightLeftNode.setRight(null);\n    }\n\n    // 将右左节点连接到根节点的右侧\n    rootNode.setRight(rightLeftNode);\n\n    // 将右节点作为右左节点的右子节点\n    rightLeftNode.setRight(rightNode);\n\n    // 进行右右旋转\n    this.rotateRightRight(rootNode);\n  }\n\n  /**\n   * @param {BinarySearchTreeNode} rootNode\n   */\n  rotateRightRight(rootNode) {\n    // 从根节点中分离右子节点。\n    const rightNode = rootNode.right;\n    rootNode.setRight(null);\n\n    // 将右子节点设置为根节点的父节点的右子节点。\n    // 如果根节点有父节点，则将右子节点设置为父节点的新右子节点。\n    if (rootNode.parent) {\n      rootNode.parent.setRight(rightNode);\n    } else if (rootNode === this.root) {\n      // 如果根节点是树的根节点，则将右子节点设置为新的根节点。\n      this.root = rightNode;\n    }\n\n    // 如果右子节点有左子节点，则将左子节点从右子节点中分离，并将其作为根节点的新右子节点。\n    if (rightNode.left) {\n      rootNode.setRight(rightNode.left);\n    }\n\n    // 将根节点作为右子节点的左子节点。\n    rightNode.setLeft(rootNode);\n  }\n}\n```\n","slug":"data-structures-012-AvlTree","published":1,"updated":"2023-12-14T06:39:10.622Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clq4xe1de001wtz2h0a010ld9","content":"<h2 id=\"AVL-树\"><a href=\"#AVL-树\" class=\"headerlink\" title=\"AVL 树\"></a>AVL 树</h2><p>在计算机科学中，<strong>AVL 树</strong>（以发明者 Adelson-Velsky 和 Landis 命名）是一种自平衡的二叉搜索树。它是第一个被发明出来的这种数据结构。在 AVL 树中，任何节点的两个子树的高度最多相差一；如果在任何时候它们相差超过一，就会进行重新平衡以恢复这个属性。查找、插入和删除在平均和最坏情况下都需要 O(log n)的时间，其中 n 是操作之前树中节点的数量。插入和删除可能需要对树进行一个或多个树旋转进行重新平衡。</p>\n<p>动画显示将几个元素插入到 AVL 树中。它包括左旋、右旋、左右旋和右左旋。</p>\n<span id=\"more\"></span>\n\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/f/fd/AVL_Tree_Example.gif\" alt=\"AVL Tree\"></p>\n<p>带有平衡因子（绿色）的 AVL 树</p>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/a/ad/AVL-tree-wBalance_K.svg\" alt=\"AVL Tree\"></p>\n<h3 id=\"AVL-Tree-Rotations\"><a href=\"#AVL-Tree-Rotations\" class=\"headerlink\" title=\"AVL Tree Rotations\"></a>AVL Tree Rotations</h3><p><strong>Left-Left Rotation</strong></p>\n<p><img src=\"http://btechsmartclass.com/data_structures/ds_images/LL%20Rotation.png\" alt=\"Left-Left Rotation\"></p>\n<p><strong>Right-Right Rotation</strong></p>\n<p><img src=\"http://btechsmartclass.com/data_structures/ds_images/RR%20Rotation.png\" alt=\"Right-Right Rotation\"></p>\n<p><strong>Left-Right Rotation</strong></p>\n<p><img src=\"http://btechsmartclass.com/data_structures/ds_images/LR%20Rotation.png\" alt=\"Left-Right Rotation\"></p>\n<p><strong>Right-Left Rotation</strong></p>\n<p><img src=\"http://btechsmartclass.com/data_structures/ds_images/RL%20Rotation.png\" alt=\"Right-Right Rotation\"></p>\n<h2 id=\"AvlTree\"><a href=\"#AvlTree\" class=\"headerlink\" title=\"AvlTree\"></a>AvlTree</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AvlTree</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">BinarySearchTree</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">value</span></span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">insert</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 执行普通的二叉搜索树插入操作。</span></span><br><span class=\"line\">    <span class=\"variable language_\">super</span>.<span class=\"title function_\">insert</span>(value);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从插入的节点开始向上遍历到根节点，并在此过程中检查平衡因子。</span></span><br><span class=\"line\">    <span class=\"comment\">// 找到刚插入的节点</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> currentNode = <span class=\"variable language_\">this</span>.<span class=\"property\">root</span>.<span class=\"title function_\">find</span>(value);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (currentNode) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 检查当前节点的平衡因子，并根据需要执行旋转操作</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">balance</span>(currentNode);</span><br><span class=\"line\">      <span class=\"comment\">// 移动到父节点</span></span><br><span class=\"line\">      currentNode = currentNode.<span class=\"property\">parent</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 从二叉搜索树中移除一个值，并重新平衡树。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">value</span> - 要移除的值。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125; - 如果成功移除了值则返回true，否则返回false。</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">remove</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调用父类的remove方法从树中移除值。</span></span><br><span class=\"line\">    <span class=\"variable language_\">super</span>.<span class=\"title function_\">remove</span>(value);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从根节点开始平衡树。</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">balance</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">root</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">BinarySearchTreeNode</span>&#125; <span class=\"variable\">node</span></span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">balance</span>(<span class=\"params\">node</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果平衡因子大于1（节点左重）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.<span class=\"property\">balanceFactor</span> &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果左子节点的平衡因子大于0（左-左旋转）或小于0（左-右旋转），则执行左旋转</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.<span class=\"property\">left</span>.<span class=\"property\">balanceFactor</span> &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 执行左-左旋转</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">rotateLeftLeft</span>(node);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (node.<span class=\"property\">left</span>.<span class=\"property\">balanceFactor</span> &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 执行左-右旋转</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">rotateLeftRight</span>(node);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (node.<span class=\"property\">balanceFactor</span> &lt; -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果平衡因子小于-1（节点右重）</span></span><br><span class=\"line\">      <span class=\"comment\">// 如果右子节点的平衡因子小于0（右-右旋转）或大于0（右-左旋转），则执行右旋转</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.<span class=\"property\">right</span>.<span class=\"property\">balanceFactor</span> &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 执行右-右旋转</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">rotateRightRight</span>(node);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (node.<span class=\"property\">right</span>.<span class=\"property\">balanceFactor</span> &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 执行右-左旋转</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">rotateRightLeft</span>(node);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 将二叉搜索树向左旋转。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">BinarySearchTreeNode</span>&#125; <span class=\"variable\">rootNode</span> - 要旋转的树的根节点。</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">rotateLeftLeft</span>(<span class=\"params\">rootNode</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将左节点从根节点分离。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> leftNode = rootNode.<span class=\"property\">left</span>;</span><br><span class=\"line\">    rootNode.<span class=\"title function_\">setLeft</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将左节点设置为根节点的父节点的左子节点。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rootNode.<span class=\"property\">parent</span>) &#123;</span><br><span class=\"line\">      rootNode.<span class=\"property\">parent</span>.<span class=\"title function_\">setLeft</span>(leftNode);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rootNode === <span class=\"variable language_\">this</span>.<span class=\"property\">root</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果根节点是根节点，则将左节点设置为新的根节点。</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">root</span> = leftNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果左节点有右子节点，则将其分离并将其作为根节点的左子节点。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (leftNode.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">      rootNode.<span class=\"title function_\">setLeft</span>(leftNode.<span class=\"property\">right</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将根节点附加到左节点的右侧。</span></span><br><span class=\"line\">    leftNode.<span class=\"title function_\">setRight</span>(rootNode);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 将给定的二叉搜索树节点先向左旋转，然后再向右旋转。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">BinarySearchTreeNode</span>&#125; <span class=\"variable\">rootNode</span> - 二叉搜索树的根节点。</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">rotateLeftRight</span>(<span class=\"params\">rootNode</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将左节点从根节点上分离，因为它将被替换。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> leftNode = rootNode.<span class=\"property\">left</span>;</span><br><span class=\"line\">    rootNode.<span class=\"title function_\">setLeft</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将右节点从左节点上分离。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> leftRightNode = leftNode.<span class=\"property\">right</span>;</span><br><span class=\"line\">    leftNode.<span class=\"title function_\">setRight</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保留 leftRightNode 的左子树。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (leftRightNode.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">      leftNode.<span class=\"title function_\">setRight</span>(leftRightNode.<span class=\"property\">left</span>);</span><br><span class=\"line\">      leftRightNode.<span class=\"title function_\">setLeft</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将 leftRightNode 附加到根节点上。</span></span><br><span class=\"line\">    rootNode.<span class=\"title function_\">setLeft</span>(leftRightNode);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将 leftNode 作为 leftRightNode 的左节点。</span></span><br><span class=\"line\">    leftRightNode.<span class=\"title function_\">setLeft</span>(leftNode);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 进行左-左旋转。</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">rotateLeftLeft</span>(rootNode);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">BinarySearchTreeNode</span>&#125; <span class=\"variable\">rootNode</span></span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">rotateRightLeft</span>(<span class=\"params\">rootNode</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 分离要替换的右节点</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> rightNode = rootNode.<span class=\"property\">right</span>;</span><br><span class=\"line\">    rootNode.<span class=\"title function_\">setRight</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 分离右节点的左节点</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> rightLeftNode = rightNode.<span class=\"property\">left</span>;</span><br><span class=\"line\">    rightNode.<span class=\"title function_\">setLeft</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果右节点的左节点存在右子节点，则分离右节点的右子节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rightLeftNode.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">      rightNode.<span class=\"title function_\">setLeft</span>(rightLeftNode.<span class=\"property\">right</span>);</span><br><span class=\"line\">      rightLeftNode.<span class=\"title function_\">setRight</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将右左节点连接到根节点的右侧</span></span><br><span class=\"line\">    rootNode.<span class=\"title function_\">setRight</span>(rightLeftNode);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将右节点作为右左节点的右子节点</span></span><br><span class=\"line\">    rightLeftNode.<span class=\"title function_\">setRight</span>(rightNode);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 进行右右旋转</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">rotateRightRight</span>(rootNode);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">BinarySearchTreeNode</span>&#125; <span class=\"variable\">rootNode</span></span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">rotateRightRight</span>(<span class=\"params\">rootNode</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 从根节点中分离右子节点。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> rightNode = rootNode.<span class=\"property\">right</span>;</span><br><span class=\"line\">    rootNode.<span class=\"title function_\">setRight</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将右子节点设置为根节点的父节点的右子节点。</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果根节点有父节点，则将右子节点设置为父节点的新右子节点。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rootNode.<span class=\"property\">parent</span>) &#123;</span><br><span class=\"line\">      rootNode.<span class=\"property\">parent</span>.<span class=\"title function_\">setRight</span>(rightNode);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rootNode === <span class=\"variable language_\">this</span>.<span class=\"property\">root</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果根节点是树的根节点，则将右子节点设置为新的根节点。</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">root</span> = rightNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果右子节点有左子节点，则将左子节点从右子节点中分离，并将其作为根节点的新右子节点。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rightNode.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">      rootNode.<span class=\"title function_\">setRight</span>(rightNode.<span class=\"property\">left</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将根节点作为右子节点的左子节点。</span></span><br><span class=\"line\">    rightNode.<span class=\"title function_\">setLeft</span>(rootNode);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"related_posts":["2023/12/14/data-structures-013-RedBlackTree/"],"length":1087,"excerpt":"<h2 id=\"AVL-树\"><a href=\"#AVL-树\" class=\"headerlink\" title=\"AVL 树\"></a>AVL 树</h2><p>在计算机科学中，<strong>AVL 树</strong>（以发明者 Adelson-Velsky 和 Landis 命名）是一种自平衡的二叉搜索树。它是第一个被发明出来的这种数据结构。在 AVL 树中，任何节点的两个子树的高度最多相差一；如果在任何时候它们相差超过一，就会进行重新平衡以恢复这个属性。查找、插入和删除在平均和最坏情况下都需要 O(log n)的时间，其中 n 是操作之前树中节点的数量。插入和删除可能需要对树进行一个或多个树旋转进行重新平衡。</p>\n<p>动画显示将几个元素插入到 AVL 树中。它包括左旋、右旋、左右旋和右左旋。</p>","more":"<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/f/fd/AVL_Tree_Example.gif\" alt=\"AVL Tree\"></p>\n<p>带有平衡因子（绿色）的 AVL 树</p>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/a/ad/AVL-tree-wBalance_K.svg\" alt=\"AVL Tree\"></p>\n<h3 id=\"AVL-Tree-Rotations\"><a href=\"#AVL-Tree-Rotations\" class=\"headerlink\" title=\"AVL Tree Rotations\"></a>AVL Tree Rotations</h3><p><strong>Left-Left Rotation</strong></p>\n<p><img src=\"http://btechsmartclass.com/data_structures/ds_images/LL%20Rotation.png\" alt=\"Left-Left Rotation\"></p>\n<p><strong>Right-Right Rotation</strong></p>\n<p><img src=\"http://btechsmartclass.com/data_structures/ds_images/RR%20Rotation.png\" alt=\"Right-Right Rotation\"></p>\n<p><strong>Left-Right Rotation</strong></p>\n<p><img src=\"http://btechsmartclass.com/data_structures/ds_images/LR%20Rotation.png\" alt=\"Left-Right Rotation\"></p>\n<p><strong>Right-Left Rotation</strong></p>\n<p><img src=\"http://btechsmartclass.com/data_structures/ds_images/RL%20Rotation.png\" alt=\"Right-Right Rotation\"></p>\n<h2 id=\"AvlTree\"><a href=\"#AvlTree\" class=\"headerlink\" title=\"AvlTree\"></a>AvlTree</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AvlTree</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">BinarySearchTree</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">value</span></span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">insert</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 执行普通的二叉搜索树插入操作。</span></span><br><span class=\"line\">    <span class=\"variable language_\">super</span>.<span class=\"title function_\">insert</span>(value);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从插入的节点开始向上遍历到根节点，并在此过程中检查平衡因子。</span></span><br><span class=\"line\">    <span class=\"comment\">// 找到刚插入的节点</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> currentNode = <span class=\"variable language_\">this</span>.<span class=\"property\">root</span>.<span class=\"title function_\">find</span>(value);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (currentNode) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 检查当前节点的平衡因子，并根据需要执行旋转操作</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">balance</span>(currentNode);</span><br><span class=\"line\">      <span class=\"comment\">// 移动到父节点</span></span><br><span class=\"line\">      currentNode = currentNode.<span class=\"property\">parent</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 从二叉搜索树中移除一个值，并重新平衡树。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">value</span> - 要移除的值。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125; - 如果成功移除了值则返回true，否则返回false。</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">remove</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调用父类的remove方法从树中移除值。</span></span><br><span class=\"line\">    <span class=\"variable language_\">super</span>.<span class=\"title function_\">remove</span>(value);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从根节点开始平衡树。</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">balance</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">root</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">BinarySearchTreeNode</span>&#125; <span class=\"variable\">node</span></span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">balance</span>(<span class=\"params\">node</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果平衡因子大于1（节点左重）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.<span class=\"property\">balanceFactor</span> &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果左子节点的平衡因子大于0（左-左旋转）或小于0（左-右旋转），则执行左旋转</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.<span class=\"property\">left</span>.<span class=\"property\">balanceFactor</span> &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 执行左-左旋转</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">rotateLeftLeft</span>(node);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (node.<span class=\"property\">left</span>.<span class=\"property\">balanceFactor</span> &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 执行左-右旋转</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">rotateLeftRight</span>(node);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (node.<span class=\"property\">balanceFactor</span> &lt; -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果平衡因子小于-1（节点右重）</span></span><br><span class=\"line\">      <span class=\"comment\">// 如果右子节点的平衡因子小于0（右-右旋转）或大于0（右-左旋转），则执行右旋转</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.<span class=\"property\">right</span>.<span class=\"property\">balanceFactor</span> &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 执行右-右旋转</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">rotateRightRight</span>(node);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (node.<span class=\"property\">right</span>.<span class=\"property\">balanceFactor</span> &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 执行右-左旋转</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">rotateRightLeft</span>(node);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 将二叉搜索树向左旋转。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">BinarySearchTreeNode</span>&#125; <span class=\"variable\">rootNode</span> - 要旋转的树的根节点。</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">rotateLeftLeft</span>(<span class=\"params\">rootNode</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将左节点从根节点分离。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> leftNode = rootNode.<span class=\"property\">left</span>;</span><br><span class=\"line\">    rootNode.<span class=\"title function_\">setLeft</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将左节点设置为根节点的父节点的左子节点。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rootNode.<span class=\"property\">parent</span>) &#123;</span><br><span class=\"line\">      rootNode.<span class=\"property\">parent</span>.<span class=\"title function_\">setLeft</span>(leftNode);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rootNode === <span class=\"variable language_\">this</span>.<span class=\"property\">root</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果根节点是根节点，则将左节点设置为新的根节点。</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">root</span> = leftNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果左节点有右子节点，则将其分离并将其作为根节点的左子节点。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (leftNode.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">      rootNode.<span class=\"title function_\">setLeft</span>(leftNode.<span class=\"property\">right</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将根节点附加到左节点的右侧。</span></span><br><span class=\"line\">    leftNode.<span class=\"title function_\">setRight</span>(rootNode);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 将给定的二叉搜索树节点先向左旋转，然后再向右旋转。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">BinarySearchTreeNode</span>&#125; <span class=\"variable\">rootNode</span> - 二叉搜索树的根节点。</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">rotateLeftRight</span>(<span class=\"params\">rootNode</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将左节点从根节点上分离，因为它将被替换。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> leftNode = rootNode.<span class=\"property\">left</span>;</span><br><span class=\"line\">    rootNode.<span class=\"title function_\">setLeft</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将右节点从左节点上分离。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> leftRightNode = leftNode.<span class=\"property\">right</span>;</span><br><span class=\"line\">    leftNode.<span class=\"title function_\">setRight</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保留 leftRightNode 的左子树。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (leftRightNode.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">      leftNode.<span class=\"title function_\">setRight</span>(leftRightNode.<span class=\"property\">left</span>);</span><br><span class=\"line\">      leftRightNode.<span class=\"title function_\">setLeft</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将 leftRightNode 附加到根节点上。</span></span><br><span class=\"line\">    rootNode.<span class=\"title function_\">setLeft</span>(leftRightNode);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将 leftNode 作为 leftRightNode 的左节点。</span></span><br><span class=\"line\">    leftRightNode.<span class=\"title function_\">setLeft</span>(leftNode);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 进行左-左旋转。</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">rotateLeftLeft</span>(rootNode);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">BinarySearchTreeNode</span>&#125; <span class=\"variable\">rootNode</span></span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">rotateRightLeft</span>(<span class=\"params\">rootNode</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 分离要替换的右节点</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> rightNode = rootNode.<span class=\"property\">right</span>;</span><br><span class=\"line\">    rootNode.<span class=\"title function_\">setRight</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 分离右节点的左节点</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> rightLeftNode = rightNode.<span class=\"property\">left</span>;</span><br><span class=\"line\">    rightNode.<span class=\"title function_\">setLeft</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果右节点的左节点存在右子节点，则分离右节点的右子节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rightLeftNode.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">      rightNode.<span class=\"title function_\">setLeft</span>(rightLeftNode.<span class=\"property\">right</span>);</span><br><span class=\"line\">      rightLeftNode.<span class=\"title function_\">setRight</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将右左节点连接到根节点的右侧</span></span><br><span class=\"line\">    rootNode.<span class=\"title function_\">setRight</span>(rightLeftNode);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将右节点作为右左节点的右子节点</span></span><br><span class=\"line\">    rightLeftNode.<span class=\"title function_\">setRight</span>(rightNode);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 进行右右旋转</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">rotateRightRight</span>(rootNode);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">BinarySearchTreeNode</span>&#125; <span class=\"variable\">rootNode</span></span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">rotateRightRight</span>(<span class=\"params\">rootNode</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 从根节点中分离右子节点。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> rightNode = rootNode.<span class=\"property\">right</span>;</span><br><span class=\"line\">    rootNode.<span class=\"title function_\">setRight</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将右子节点设置为根节点的父节点的右子节点。</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果根节点有父节点，则将右子节点设置为父节点的新右子节点。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rootNode.<span class=\"property\">parent</span>) &#123;</span><br><span class=\"line\">      rootNode.<span class=\"property\">parent</span>.<span class=\"title function_\">setRight</span>(rightNode);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rootNode === <span class=\"variable language_\">this</span>.<span class=\"property\">root</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果根节点是树的根节点，则将右子节点设置为新的根节点。</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">root</span> = rightNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果右子节点有左子节点，则将左子节点从右子节点中分离，并将其作为根节点的新右子节点。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rightNode.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">      rootNode.<span class=\"title function_\">setRight</span>(rightNode.<span class=\"property\">left</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将根节点作为右子节点的左子节点。</span></span><br><span class=\"line\">    rightNode.<span class=\"title function_\">setLeft</span>(rootNode);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"JavaScript Algorithms and Data Structures 源码分析(13) -- 红黑树 red-black-tree","date":"2023-12-14T06:15:36.000Z","_content":"\n## 红黑树\n\n**红黑树**是一种自平衡的二叉搜索树，在计算机科学中使用。二叉树的每个节点都有一个额外的位，这个位通常被解释为节点的颜色（红色或黑色）。这些颜色位用于在插入和删除过程中保持树的大致平衡。\n\n通过以一种满足特定属性的方式将树的每个节点标记为两种颜色之一，可以保持树的平衡，这些属性共同限制了树在最坏情况下可能变得不平衡的程度。当修改树时，新的树会被重新排列和重新标记以恢复颜色属性。这些属性的设计使得这种重新排列和重新标记可以高效地进行。\n\n树的平衡并不完美，但足够好，可以确保在 O(log n)的时间内进行搜索，其中 n 是树中的元素总数。插入和删除操作以及树的重新排列和重新标记也可以在 O(log n)的时间内完成。\n\n红黑树的一个示例：\n\n<!-- more -->\n\n![red-black tree](https://upload.wikimedia.org/wikipedia/commons/6/66/Red-black_tree_example.svg)\n\n## 属性\n\n除了对二叉搜索树施加的要求之外，红黑树还必须满足以下条件：\n\n- 每个节点要么是红色，要么是黑色。\n- 根节点是黑色。这个规则有时可以省略。因为根节点总是可以从红色变为黑色，但不一定反之，所以这个规则对分析的影响很小。\n- 所有叶子节点（NIL）都是黑色的。\n- 如果一个节点是红色的，则它的两个子节点都是黑色的。\n- 从给定节点到任何其后代 NIL 节点的每条路径都包含相同数量的黑色节点。\n\n一些定义：从根节点到一个节点的黑色节点数称为该节点的黑色深度；从根节点到叶子节点的所有路径中的黑色节点数是红黑树的黑色高度。\n\n这些约束条件强制实施了红黑树的一个关键特性：从根节点到最远叶子节点的路径长度不超过从根节点到最近叶子节点路径长度的两倍。结果是树大致上是高度平衡的。由于插入、删除和查找值等操作的最坏情况时间与树的高度成比例，这个对树高度的理论上限使得红黑树在最坏情况下具有高效性，而普通的二叉搜索树则不具备。\n\n## 插入平衡\n\n### If uncle is RED\n\n![Red Black Tree Balancing](https://www.geeksforgeeks.org/wp-content/uploads/redBlackCase2.png)\n\n### If uncle is BLACK\n\n- 左左情况（p 是 g 的左子节点，x 是 p 的左子节点）\n- 左右情况（p 是 g 的左子节点，x 是 p 的右子节点）\n- 右右情况（p 是 g 的右子节点，x 是 p 的右子节点）\n- 右左情况（p 是 g 的右子节点，x 是 p 的左子节点）\n\n#### Left Left Case (See g, p and x)\n\n![Red Black Tree Balancing](https://www.geeksforgeeks.org/wp-content/uploads/redBlackCase3a1.png)\n\n#### Left Right Case (See g, p and x)\n\n![Red Black Tree Balancing](https://www.geeksforgeeks.org/wp-content/uploads/redBlackCase3b.png)\n\n#### Right Right Case (See g, p and x)\n\n![Red Black Tree Balancing](https://www.geeksforgeeks.org/wp-content/uploads/redBlackCase3c.png)\n\n#### Right Left Case (See g, p and x)\n\n![Red Black Tree Balancing](https://www.geeksforgeeks.org/wp-content/uploads/redBlackCase3d.png)\n\n## RedBlackTree\n\n```js\n// 红黑树节点的可能颜色。\nconst RED_BLACK_TREE_COLORS = {\n  red: \"red\",\n  black: \"black\",\n};\n\n// 节点的元信息中颜色熟悉名称\nconst COLOR_PROP_NAME = \"color\";\n\nexport default class RedBlackTree extends BinarySearchTree {\n  /**\n   * @param {*} value\n   * @return {BinarySearchTreeNode}\n   */\n  insert(value) {\n    // 将值插入，并获取插入的节点。\n    const insertedNode = super.insert(value);\n\n    // 检查插入的节点是否为树的根节点。\n    if (this.nodeComparator.equal(insertedNode, this.root)) {\n      // 如果插入的节点是根节点，则将其设置为黑色，以满足红黑树的性质。\n      this.makeNodeBlack(insertedNode);\n    } else {\n      // 如果插入的节点不是根节点，则将其设置为红色，以便进行平衡。\n      this.makeNodeRed(insertedNode);\n    }\n\n    // 通过检查条件并执行必要的旋转操作来平衡树。\n    this.balance(insertedNode);\n    // 返回插入的节点。\n    return insertedNode;\n  }\n\n  /**\n   * @param {*} value\n   * @return {boolean}\n   */\n  remove(value) {\n    throw new Error(`Can't remove ${value}. Remove method is not implemented yet`);\n  }\n\n  /**\n   * 平衡红黑树的方法\n   * @param {BinarySearchTreeNode} node\n   */\n  balance(node) {\n    // 如果节点是根节点，则不需要平衡\n    if (this.nodeComparator.equal(node, this.root)) {\n      return;\n    }\n\n    // 如果父节点是黑色，则不需要平衡\n    if (this.isNodeBlack(node.parent)) {\n      return;\n    }\n\n    const grandParent = node.parent.parent;\n\n    if (node.uncle && this.isNodeRed(node.uncle)) {\n      // 如果节点有红色的叔叔节点，需要进行重新着色\n\n      // 将父节点和叔叔节点设置为黑色\n      this.makeNodeBlack(node.uncle);\n      this.makeNodeBlack(node.parent);\n\n      if (!this.nodeComparator.equal(grandParent, this.root)) {\n        // 如果祖父节点不是根节点，则将其重新着色为红色\n        this.makeNodeRed(grandParent);\n      } else {\n        // 如果祖父节点是黑色的根节点，则不需要进行其他操作\n        // 因为根节点已经有两个黑色的兄弟节点了，我们刚刚重新着色了它们\n        return;\n      }\n\n      // 现在需要进一步检查重新着色后的祖父节点\n      this.balance(grandParent);\n    } else if (!node.uncle || this.isNodeBlack(node.uncle)) {\n      // 如果节点的叔叔节点是黑色或不存在，则需要进行旋转操作\n\n      if (grandParent) {\n        // 旋转后将得到的新的祖父节点\n        let newGrandParent;\n\n        if (this.nodeComparator.equal(grandParent.left, node.parent)) {\n          // 左侧情况\n          if (this.nodeComparator.equal(node.parent.left, node)) {\n            // 左-左情况\n            newGrandParent = this.leftLeftRotation(grandParent);\n          } else {\n            // 左-右情况\n            newGrandParent = this.leftRightRotation(grandParent);\n          }\n        } else {\n          // 右侧情况\n          if (this.nodeComparator.equal(node.parent.right, node)) {\n            // 右-右情况\n            newGrandParent = this.rightRightRotation(grandParent);\n          } else {\n            // 右-左情况\n            newGrandParent = this.rightLeftRotation(grandParent);\n          }\n        }\n\n        // 如果新的祖父节点没有父节点，则将其设置为根节点\n        if (newGrandParent && newGrandParent.parent === null) {\n          this.root = newGrandParent;\n\n          // 将根节点重新着色为黑色\n          this.makeNodeBlack(this.root);\n        }\n\n        // 检查新的祖父节点是否违反了红黑树的规则\n        this.balance(newGrandParent);\n      }\n    }\n  }\n\n  /**\n   * 左左情况（p是g的左子节点且x是p的左子节点）\n   * @param {BinarySearchTreeNode|BinaryTreeNode} grandParentNode\n   * @return {BinarySearchTreeNode}\n   */\n  leftLeftRotation(grandParentNode) {\n    // 记录祖父节点的父节点。\n    const grandGrandParent = grandParentNode.parent;\n\n    // 检查祖父节点是否是祖父父节点的左子节点。\n    let grandParentNodeIsLeft;\n    if (grandGrandParent) {\n      grandParentNodeIsLeft = this.nodeComparator.equal(grandGrandParent.left, grandParentNode);\n    }\n\n    // 记录祖父节点的左子节点。\n    const parentNode = grandParentNode.left;\n\n    // 记录父节点的右子节点，因为我们将把它转移到祖父节点的左子树中。\n    const parentRightNode = parentNode.right;\n\n    // 将祖父节点设置为父节点的右子节点。\n    parentNode.setRight(grandParentNode);\n\n    // 将父节点的右子树移到祖父节点的左子树中。\n    grandParentNode.setLeft(parentRightNode);\n\n    // 将父节点放在祖父节点的位置。\n    if (grandGrandParent) {\n      if (grandParentNodeIsLeft) {\n        grandGrandParent.setLeft(parentNode);\n      } else {\n        grandGrandParent.setRight(parentNode);\n      }\n    } else {\n      // 将父节点设置为根节点。\n      parentNode.parent = null;\n    }\n\n    // 交换祖父节点和父节点的颜色。\n    this.swapNodeColors(parentNode, grandParentNode);\n\n    // 返回新的根节点。\n    return parentNode;\n  }\n\n  /**\n   * 执行左-右旋转，即对给定的祖父节点进行旋转操作。\n   * @param {BinarySearchTreeNode|BinaryTreeNode} grandParentNode - 祖父节点。\n   * @return {BinarySearchTreeNode} - 旋转后的根节点。\n   */\n  leftRightRotation(grandParentNode) {\n    // 存储父节点和子节点的引用。\n    const parentNode = grandParentNode.left;\n    const childNode = parentNode.right;\n\n    // 存储子节点的左子节点，以保留左子树。\n    const childLeftNode = childNode.left;\n\n    // 将父节点设为子节点的左子节点。\n    childNode.setLeft(parentNode);\n\n    // 将子节点的左子树移到父节点的右子树中。\n    parentNode.setRight(childLeftNode);\n\n    // 将左-右子节点放置在祖父节点的左子节点位置。\n    grandParentNode.setLeft(childNode);\n\n    // 现在可以执行左-左旋转了。\n    return this.leftLeftRotation(grandParentNode);\n  }\n\n  /**\n   * 右右旋转情况（p是g的右子节点，x是p的右子节点）\n   * @param {BinarySearchTreeNode|BinaryTreeNode} grandParentNode\n   * @return {BinarySearchTreeNode}\n   */\n  rightRightRotation(grandParentNode) {\n    // 记录祖父节点的父节点\n    const grandGrandParent = grandParentNode.parent;\n\n    // 检查祖父节点是左子节点还是右子节点\n    let grandParentNodeIsLeft;\n    if (grandGrandParent) {\n      grandParentNodeIsLeft = this.nodeComparator.equal(grandGrandParent.left, grandParentNode);\n    }\n\n    // 记录祖父节点的右子节点\n    const parentNode = grandParentNode.right;\n\n    // 记录父节点的左子节点，因为我们将它移动到爷爷节点的右子树中\n    const parentLeftNode = parentNode.left;\n\n    // 将爷爷节点作为父节点的左子节点\n    parentNode.setLeft(grandParentNode);\n\n    // 将父节点的左子节点转移到爷爷节点的右子树中\n    grandParentNode.setRight(parentLeftNode);\n\n    // 将父节点放在爷爷节点的位置\n    if (grandGrandParent) {\n      if (grandParentNodeIsLeft) {\n        grandGrandParent.setLeft(parentNode);\n      } else {\n        grandGrandParent.setRight(parentNode);\n      }\n    } else {\n      // 将父节点设为根节点\n      parentNode.parent = null;\n    }\n\n    // 交换父节点和爷爷节点的颜色\n    this.swapNodeColors(parentNode, grandParentNode);\n\n    // 返回新的根节点\n    return parentNode;\n  }\n\n  /**\n   * 对给定的祖父节点执行右-左旋转。\n   * @param {BinarySearchTreeNode|BinaryTreeNode} grandParentNode\n   * @return {BinarySearchTreeNode}\n   */\n  rightLeftRotation(grandParentNode) {\n    // 记住父节点和父节点的左子节点。\n    const parentNode = grandParentNode.right;\n    const childNode = parentNode.left;\n\n    // 记住左子节点的右子节点，以防丢失右子树。稍后将重新分配给父节点的左子树。\n    const childRightNode = childNode.right;\n\n    // 将父节点设为左子节点的右子节点。\n    childNode.setRight(parentNode);\n\n    // 将左子节点的右子树移动到父节点的左子树。\n    parentNode.setLeft(childRightNode);\n\n    // 将左子节点放在祖父节点的右子节点的位置。\n    grandParentNode.setRight(childNode);\n\n    // 现在可以执行右-右旋转了。\n    return this.rightRightRotation(grandParentNode);\n  }\n\n  /**\n   * @param {BinarySearchTreeNode|BinaryTreeNode} node\n   * @return {BinarySearchTreeNode}\n   */\n  makeNodeRed(node) {\n    node.meta.set(COLOR_PROP_NAME, RED_BLACK_TREE_COLORS.red);\n\n    return node;\n  }\n\n  /**\n   * @param {BinarySearchTreeNode|BinaryTreeNode} node\n   * @return {BinarySearchTreeNode}\n   */\n  makeNodeBlack(node) {\n    node.meta.set(COLOR_PROP_NAME, RED_BLACK_TREE_COLORS.black);\n\n    return node;\n  }\n\n  /**\n   * @param {BinarySearchTreeNode|BinaryTreeNode} node\n   * @return {boolean}\n   */\n  isNodeRed(node) {\n    return node.meta.get(COLOR_PROP_NAME) === RED_BLACK_TREE_COLORS.red;\n  }\n\n  /**\n   * @param {BinarySearchTreeNode|BinaryTreeNode} node\n   * @return {boolean}\n   */\n  isNodeBlack(node) {\n    return node.meta.get(COLOR_PROP_NAME) === RED_BLACK_TREE_COLORS.black;\n  }\n\n  /**\n   * @param {BinarySearchTreeNode|BinaryTreeNode} node\n   * @return {boolean}\n   */\n  isNodeColored(node) {\n    return this.isNodeRed(node) || this.isNodeBlack(node);\n  }\n\n  /**\n   * @param {BinarySearchTreeNode|BinaryTreeNode} firstNode\n   * @param {BinarySearchTreeNode|BinaryTreeNode} secondNode\n   */\n  swapNodeColors(firstNode, secondNode) {\n    const firstColor = firstNode.meta.get(COLOR_PROP_NAME);\n    const secondColor = secondNode.meta.get(COLOR_PROP_NAME);\n\n    firstNode.meta.set(COLOR_PROP_NAME, secondColor);\n    secondNode.meta.set(COLOR_PROP_NAME, firstColor);\n  }\n}\n```\n","source":"_posts/data-structures-013-RedBlackTree.md","raw":"---\ntitle: JavaScript Algorithms and Data Structures 源码分析(13) -- 红黑树 red-black-tree\ndate: 2023-12-14 14:15:36\ntags:\n  - data structures\ncategories:\n  - 数据结构与算法\n---\n\n## 红黑树\n\n**红黑树**是一种自平衡的二叉搜索树，在计算机科学中使用。二叉树的每个节点都有一个额外的位，这个位通常被解释为节点的颜色（红色或黑色）。这些颜色位用于在插入和删除过程中保持树的大致平衡。\n\n通过以一种满足特定属性的方式将树的每个节点标记为两种颜色之一，可以保持树的平衡，这些属性共同限制了树在最坏情况下可能变得不平衡的程度。当修改树时，新的树会被重新排列和重新标记以恢复颜色属性。这些属性的设计使得这种重新排列和重新标记可以高效地进行。\n\n树的平衡并不完美，但足够好，可以确保在 O(log n)的时间内进行搜索，其中 n 是树中的元素总数。插入和删除操作以及树的重新排列和重新标记也可以在 O(log n)的时间内完成。\n\n红黑树的一个示例：\n\n<!-- more -->\n\n![red-black tree](https://upload.wikimedia.org/wikipedia/commons/6/66/Red-black_tree_example.svg)\n\n## 属性\n\n除了对二叉搜索树施加的要求之外，红黑树还必须满足以下条件：\n\n- 每个节点要么是红色，要么是黑色。\n- 根节点是黑色。这个规则有时可以省略。因为根节点总是可以从红色变为黑色，但不一定反之，所以这个规则对分析的影响很小。\n- 所有叶子节点（NIL）都是黑色的。\n- 如果一个节点是红色的，则它的两个子节点都是黑色的。\n- 从给定节点到任何其后代 NIL 节点的每条路径都包含相同数量的黑色节点。\n\n一些定义：从根节点到一个节点的黑色节点数称为该节点的黑色深度；从根节点到叶子节点的所有路径中的黑色节点数是红黑树的黑色高度。\n\n这些约束条件强制实施了红黑树的一个关键特性：从根节点到最远叶子节点的路径长度不超过从根节点到最近叶子节点路径长度的两倍。结果是树大致上是高度平衡的。由于插入、删除和查找值等操作的最坏情况时间与树的高度成比例，这个对树高度的理论上限使得红黑树在最坏情况下具有高效性，而普通的二叉搜索树则不具备。\n\n## 插入平衡\n\n### If uncle is RED\n\n![Red Black Tree Balancing](https://www.geeksforgeeks.org/wp-content/uploads/redBlackCase2.png)\n\n### If uncle is BLACK\n\n- 左左情况（p 是 g 的左子节点，x 是 p 的左子节点）\n- 左右情况（p 是 g 的左子节点，x 是 p 的右子节点）\n- 右右情况（p 是 g 的右子节点，x 是 p 的右子节点）\n- 右左情况（p 是 g 的右子节点，x 是 p 的左子节点）\n\n#### Left Left Case (See g, p and x)\n\n![Red Black Tree Balancing](https://www.geeksforgeeks.org/wp-content/uploads/redBlackCase3a1.png)\n\n#### Left Right Case (See g, p and x)\n\n![Red Black Tree Balancing](https://www.geeksforgeeks.org/wp-content/uploads/redBlackCase3b.png)\n\n#### Right Right Case (See g, p and x)\n\n![Red Black Tree Balancing](https://www.geeksforgeeks.org/wp-content/uploads/redBlackCase3c.png)\n\n#### Right Left Case (See g, p and x)\n\n![Red Black Tree Balancing](https://www.geeksforgeeks.org/wp-content/uploads/redBlackCase3d.png)\n\n## RedBlackTree\n\n```js\n// 红黑树节点的可能颜色。\nconst RED_BLACK_TREE_COLORS = {\n  red: \"red\",\n  black: \"black\",\n};\n\n// 节点的元信息中颜色熟悉名称\nconst COLOR_PROP_NAME = \"color\";\n\nexport default class RedBlackTree extends BinarySearchTree {\n  /**\n   * @param {*} value\n   * @return {BinarySearchTreeNode}\n   */\n  insert(value) {\n    // 将值插入，并获取插入的节点。\n    const insertedNode = super.insert(value);\n\n    // 检查插入的节点是否为树的根节点。\n    if (this.nodeComparator.equal(insertedNode, this.root)) {\n      // 如果插入的节点是根节点，则将其设置为黑色，以满足红黑树的性质。\n      this.makeNodeBlack(insertedNode);\n    } else {\n      // 如果插入的节点不是根节点，则将其设置为红色，以便进行平衡。\n      this.makeNodeRed(insertedNode);\n    }\n\n    // 通过检查条件并执行必要的旋转操作来平衡树。\n    this.balance(insertedNode);\n    // 返回插入的节点。\n    return insertedNode;\n  }\n\n  /**\n   * @param {*} value\n   * @return {boolean}\n   */\n  remove(value) {\n    throw new Error(`Can't remove ${value}. Remove method is not implemented yet`);\n  }\n\n  /**\n   * 平衡红黑树的方法\n   * @param {BinarySearchTreeNode} node\n   */\n  balance(node) {\n    // 如果节点是根节点，则不需要平衡\n    if (this.nodeComparator.equal(node, this.root)) {\n      return;\n    }\n\n    // 如果父节点是黑色，则不需要平衡\n    if (this.isNodeBlack(node.parent)) {\n      return;\n    }\n\n    const grandParent = node.parent.parent;\n\n    if (node.uncle && this.isNodeRed(node.uncle)) {\n      // 如果节点有红色的叔叔节点，需要进行重新着色\n\n      // 将父节点和叔叔节点设置为黑色\n      this.makeNodeBlack(node.uncle);\n      this.makeNodeBlack(node.parent);\n\n      if (!this.nodeComparator.equal(grandParent, this.root)) {\n        // 如果祖父节点不是根节点，则将其重新着色为红色\n        this.makeNodeRed(grandParent);\n      } else {\n        // 如果祖父节点是黑色的根节点，则不需要进行其他操作\n        // 因为根节点已经有两个黑色的兄弟节点了，我们刚刚重新着色了它们\n        return;\n      }\n\n      // 现在需要进一步检查重新着色后的祖父节点\n      this.balance(grandParent);\n    } else if (!node.uncle || this.isNodeBlack(node.uncle)) {\n      // 如果节点的叔叔节点是黑色或不存在，则需要进行旋转操作\n\n      if (grandParent) {\n        // 旋转后将得到的新的祖父节点\n        let newGrandParent;\n\n        if (this.nodeComparator.equal(grandParent.left, node.parent)) {\n          // 左侧情况\n          if (this.nodeComparator.equal(node.parent.left, node)) {\n            // 左-左情况\n            newGrandParent = this.leftLeftRotation(grandParent);\n          } else {\n            // 左-右情况\n            newGrandParent = this.leftRightRotation(grandParent);\n          }\n        } else {\n          // 右侧情况\n          if (this.nodeComparator.equal(node.parent.right, node)) {\n            // 右-右情况\n            newGrandParent = this.rightRightRotation(grandParent);\n          } else {\n            // 右-左情况\n            newGrandParent = this.rightLeftRotation(grandParent);\n          }\n        }\n\n        // 如果新的祖父节点没有父节点，则将其设置为根节点\n        if (newGrandParent && newGrandParent.parent === null) {\n          this.root = newGrandParent;\n\n          // 将根节点重新着色为黑色\n          this.makeNodeBlack(this.root);\n        }\n\n        // 检查新的祖父节点是否违反了红黑树的规则\n        this.balance(newGrandParent);\n      }\n    }\n  }\n\n  /**\n   * 左左情况（p是g的左子节点且x是p的左子节点）\n   * @param {BinarySearchTreeNode|BinaryTreeNode} grandParentNode\n   * @return {BinarySearchTreeNode}\n   */\n  leftLeftRotation(grandParentNode) {\n    // 记录祖父节点的父节点。\n    const grandGrandParent = grandParentNode.parent;\n\n    // 检查祖父节点是否是祖父父节点的左子节点。\n    let grandParentNodeIsLeft;\n    if (grandGrandParent) {\n      grandParentNodeIsLeft = this.nodeComparator.equal(grandGrandParent.left, grandParentNode);\n    }\n\n    // 记录祖父节点的左子节点。\n    const parentNode = grandParentNode.left;\n\n    // 记录父节点的右子节点，因为我们将把它转移到祖父节点的左子树中。\n    const parentRightNode = parentNode.right;\n\n    // 将祖父节点设置为父节点的右子节点。\n    parentNode.setRight(grandParentNode);\n\n    // 将父节点的右子树移到祖父节点的左子树中。\n    grandParentNode.setLeft(parentRightNode);\n\n    // 将父节点放在祖父节点的位置。\n    if (grandGrandParent) {\n      if (grandParentNodeIsLeft) {\n        grandGrandParent.setLeft(parentNode);\n      } else {\n        grandGrandParent.setRight(parentNode);\n      }\n    } else {\n      // 将父节点设置为根节点。\n      parentNode.parent = null;\n    }\n\n    // 交换祖父节点和父节点的颜色。\n    this.swapNodeColors(parentNode, grandParentNode);\n\n    // 返回新的根节点。\n    return parentNode;\n  }\n\n  /**\n   * 执行左-右旋转，即对给定的祖父节点进行旋转操作。\n   * @param {BinarySearchTreeNode|BinaryTreeNode} grandParentNode - 祖父节点。\n   * @return {BinarySearchTreeNode} - 旋转后的根节点。\n   */\n  leftRightRotation(grandParentNode) {\n    // 存储父节点和子节点的引用。\n    const parentNode = grandParentNode.left;\n    const childNode = parentNode.right;\n\n    // 存储子节点的左子节点，以保留左子树。\n    const childLeftNode = childNode.left;\n\n    // 将父节点设为子节点的左子节点。\n    childNode.setLeft(parentNode);\n\n    // 将子节点的左子树移到父节点的右子树中。\n    parentNode.setRight(childLeftNode);\n\n    // 将左-右子节点放置在祖父节点的左子节点位置。\n    grandParentNode.setLeft(childNode);\n\n    // 现在可以执行左-左旋转了。\n    return this.leftLeftRotation(grandParentNode);\n  }\n\n  /**\n   * 右右旋转情况（p是g的右子节点，x是p的右子节点）\n   * @param {BinarySearchTreeNode|BinaryTreeNode} grandParentNode\n   * @return {BinarySearchTreeNode}\n   */\n  rightRightRotation(grandParentNode) {\n    // 记录祖父节点的父节点\n    const grandGrandParent = grandParentNode.parent;\n\n    // 检查祖父节点是左子节点还是右子节点\n    let grandParentNodeIsLeft;\n    if (grandGrandParent) {\n      grandParentNodeIsLeft = this.nodeComparator.equal(grandGrandParent.left, grandParentNode);\n    }\n\n    // 记录祖父节点的右子节点\n    const parentNode = grandParentNode.right;\n\n    // 记录父节点的左子节点，因为我们将它移动到爷爷节点的右子树中\n    const parentLeftNode = parentNode.left;\n\n    // 将爷爷节点作为父节点的左子节点\n    parentNode.setLeft(grandParentNode);\n\n    // 将父节点的左子节点转移到爷爷节点的右子树中\n    grandParentNode.setRight(parentLeftNode);\n\n    // 将父节点放在爷爷节点的位置\n    if (grandGrandParent) {\n      if (grandParentNodeIsLeft) {\n        grandGrandParent.setLeft(parentNode);\n      } else {\n        grandGrandParent.setRight(parentNode);\n      }\n    } else {\n      // 将父节点设为根节点\n      parentNode.parent = null;\n    }\n\n    // 交换父节点和爷爷节点的颜色\n    this.swapNodeColors(parentNode, grandParentNode);\n\n    // 返回新的根节点\n    return parentNode;\n  }\n\n  /**\n   * 对给定的祖父节点执行右-左旋转。\n   * @param {BinarySearchTreeNode|BinaryTreeNode} grandParentNode\n   * @return {BinarySearchTreeNode}\n   */\n  rightLeftRotation(grandParentNode) {\n    // 记住父节点和父节点的左子节点。\n    const parentNode = grandParentNode.right;\n    const childNode = parentNode.left;\n\n    // 记住左子节点的右子节点，以防丢失右子树。稍后将重新分配给父节点的左子树。\n    const childRightNode = childNode.right;\n\n    // 将父节点设为左子节点的右子节点。\n    childNode.setRight(parentNode);\n\n    // 将左子节点的右子树移动到父节点的左子树。\n    parentNode.setLeft(childRightNode);\n\n    // 将左子节点放在祖父节点的右子节点的位置。\n    grandParentNode.setRight(childNode);\n\n    // 现在可以执行右-右旋转了。\n    return this.rightRightRotation(grandParentNode);\n  }\n\n  /**\n   * @param {BinarySearchTreeNode|BinaryTreeNode} node\n   * @return {BinarySearchTreeNode}\n   */\n  makeNodeRed(node) {\n    node.meta.set(COLOR_PROP_NAME, RED_BLACK_TREE_COLORS.red);\n\n    return node;\n  }\n\n  /**\n   * @param {BinarySearchTreeNode|BinaryTreeNode} node\n   * @return {BinarySearchTreeNode}\n   */\n  makeNodeBlack(node) {\n    node.meta.set(COLOR_PROP_NAME, RED_BLACK_TREE_COLORS.black);\n\n    return node;\n  }\n\n  /**\n   * @param {BinarySearchTreeNode|BinaryTreeNode} node\n   * @return {boolean}\n   */\n  isNodeRed(node) {\n    return node.meta.get(COLOR_PROP_NAME) === RED_BLACK_TREE_COLORS.red;\n  }\n\n  /**\n   * @param {BinarySearchTreeNode|BinaryTreeNode} node\n   * @return {boolean}\n   */\n  isNodeBlack(node) {\n    return node.meta.get(COLOR_PROP_NAME) === RED_BLACK_TREE_COLORS.black;\n  }\n\n  /**\n   * @param {BinarySearchTreeNode|BinaryTreeNode} node\n   * @return {boolean}\n   */\n  isNodeColored(node) {\n    return this.isNodeRed(node) || this.isNodeBlack(node);\n  }\n\n  /**\n   * @param {BinarySearchTreeNode|BinaryTreeNode} firstNode\n   * @param {BinarySearchTreeNode|BinaryTreeNode} secondNode\n   */\n  swapNodeColors(firstNode, secondNode) {\n    const firstColor = firstNode.meta.get(COLOR_PROP_NAME);\n    const secondColor = secondNode.meta.get(COLOR_PROP_NAME);\n\n    firstNode.meta.set(COLOR_PROP_NAME, secondColor);\n    secondNode.meta.set(COLOR_PROP_NAME, firstColor);\n  }\n}\n```\n","slug":"data-structures-013-RedBlackTree","published":1,"updated":"2023-12-14T06:45:16.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clq4xe1de001xtz2h9i1a8k9p","content":"<h2 id=\"红黑树\"><a href=\"#红黑树\" class=\"headerlink\" title=\"红黑树\"></a>红黑树</h2><p><strong>红黑树</strong>是一种自平衡的二叉搜索树，在计算机科学中使用。二叉树的每个节点都有一个额外的位，这个位通常被解释为节点的颜色（红色或黑色）。这些颜色位用于在插入和删除过程中保持树的大致平衡。</p>\n<p>通过以一种满足特定属性的方式将树的每个节点标记为两种颜色之一，可以保持树的平衡，这些属性共同限制了树在最坏情况下可能变得不平衡的程度。当修改树时，新的树会被重新排列和重新标记以恢复颜色属性。这些属性的设计使得这种重新排列和重新标记可以高效地进行。</p>\n<p>树的平衡并不完美，但足够好，可以确保在 O(log n)的时间内进行搜索，其中 n 是树中的元素总数。插入和删除操作以及树的重新排列和重新标记也可以在 O(log n)的时间内完成。</p>\n<p>红黑树的一个示例：</p>\n<span id=\"more\"></span>\n\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/6/66/Red-black_tree_example.svg\" alt=\"red-black tree\"></p>\n<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><p>除了对二叉搜索树施加的要求之外，红黑树还必须满足以下条件：</p>\n<ul>\n<li>每个节点要么是红色，要么是黑色。</li>\n<li>根节点是黑色。这个规则有时可以省略。因为根节点总是可以从红色变为黑色，但不一定反之，所以这个规则对分析的影响很小。</li>\n<li>所有叶子节点（NIL）都是黑色的。</li>\n<li>如果一个节点是红色的，则它的两个子节点都是黑色的。</li>\n<li>从给定节点到任何其后代 NIL 节点的每条路径都包含相同数量的黑色节点。</li>\n</ul>\n<p>一些定义：从根节点到一个节点的黑色节点数称为该节点的黑色深度；从根节点到叶子节点的所有路径中的黑色节点数是红黑树的黑色高度。</p>\n<p>这些约束条件强制实施了红黑树的一个关键特性：从根节点到最远叶子节点的路径长度不超过从根节点到最近叶子节点路径长度的两倍。结果是树大致上是高度平衡的。由于插入、删除和查找值等操作的最坏情况时间与树的高度成比例，这个对树高度的理论上限使得红黑树在最坏情况下具有高效性，而普通的二叉搜索树则不具备。</p>\n<h2 id=\"插入平衡\"><a href=\"#插入平衡\" class=\"headerlink\" title=\"插入平衡\"></a>插入平衡</h2><h3 id=\"If-uncle-is-RED\"><a href=\"#If-uncle-is-RED\" class=\"headerlink\" title=\"If uncle is RED\"></a>If uncle is RED</h3><p><img src=\"https://www.geeksforgeeks.org/wp-content/uploads/redBlackCase2.png\" alt=\"Red Black Tree Balancing\"></p>\n<h3 id=\"If-uncle-is-BLACK\"><a href=\"#If-uncle-is-BLACK\" class=\"headerlink\" title=\"If uncle is BLACK\"></a>If uncle is BLACK</h3><ul>\n<li>左左情况（p 是 g 的左子节点，x 是 p 的左子节点）</li>\n<li>左右情况（p 是 g 的左子节点，x 是 p 的右子节点）</li>\n<li>右右情况（p 是 g 的右子节点，x 是 p 的右子节点）</li>\n<li>右左情况（p 是 g 的右子节点，x 是 p 的左子节点）</li>\n</ul>\n<h4 id=\"Left-Left-Case-See-g-p-and-x\"><a href=\"#Left-Left-Case-See-g-p-and-x\" class=\"headerlink\" title=\"Left Left Case (See g, p and x)\"></a>Left Left Case (See g, p and x)</h4><p><img src=\"https://www.geeksforgeeks.org/wp-content/uploads/redBlackCase3a1.png\" alt=\"Red Black Tree Balancing\"></p>\n<h4 id=\"Left-Right-Case-See-g-p-and-x\"><a href=\"#Left-Right-Case-See-g-p-and-x\" class=\"headerlink\" title=\"Left Right Case (See g, p and x)\"></a>Left Right Case (See g, p and x)</h4><p><img src=\"https://www.geeksforgeeks.org/wp-content/uploads/redBlackCase3b.png\" alt=\"Red Black Tree Balancing\"></p>\n<h4 id=\"Right-Right-Case-See-g-p-and-x\"><a href=\"#Right-Right-Case-See-g-p-and-x\" class=\"headerlink\" title=\"Right Right Case (See g, p and x)\"></a>Right Right Case (See g, p and x)</h4><p><img src=\"https://www.geeksforgeeks.org/wp-content/uploads/redBlackCase3c.png\" alt=\"Red Black Tree Balancing\"></p>\n<h4 id=\"Right-Left-Case-See-g-p-and-x\"><a href=\"#Right-Left-Case-See-g-p-and-x\" class=\"headerlink\" title=\"Right Left Case (See g, p and x)\"></a>Right Left Case (See g, p and x)</h4><p><img src=\"https://www.geeksforgeeks.org/wp-content/uploads/redBlackCase3d.png\" alt=\"Red Black Tree Balancing\"></p>\n<h2 id=\"RedBlackTree\"><a href=\"#RedBlackTree\" class=\"headerlink\" title=\"RedBlackTree\"></a>RedBlackTree</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 红黑树节点的可能颜色。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">RED_BLACK_TREE_COLORS</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">red</span>: <span class=\"string\">&quot;red&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">black</span>: <span class=\"string\">&quot;black&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 节点的元信息中颜色熟悉名称</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">COLOR_PROP_NAME</span> = <span class=\"string\">&quot;color&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedBlackTree</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">BinarySearchTree</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">value</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">BinarySearchTreeNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">insert</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将值插入，并获取插入的节点。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> insertedNode = <span class=\"variable language_\">super</span>.<span class=\"title function_\">insert</span>(value);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 检查插入的节点是否为树的根节点。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">nodeComparator</span>.<span class=\"title function_\">equal</span>(insertedNode, <span class=\"variable language_\">this</span>.<span class=\"property\">root</span>)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果插入的节点是根节点，则将其设置为黑色，以满足红黑树的性质。</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">makeNodeBlack</span>(insertedNode);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果插入的节点不是根节点，则将其设置为红色，以便进行平衡。</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">makeNodeRed</span>(insertedNode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 通过检查条件并执行必要的旋转操作来平衡树。</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">balance</span>(insertedNode);</span><br><span class=\"line\">    <span class=\"comment\">// 返回插入的节点。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> insertedNode;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">value</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">remove</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">`Can&#x27;t remove <span class=\"subst\">$&#123;value&#125;</span>. Remove method is not implemented yet`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 平衡红黑树的方法</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">BinarySearchTreeNode</span>&#125; <span class=\"variable\">node</span></span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">balance</span>(<span class=\"params\">node</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果节点是根节点，则不需要平衡</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">nodeComparator</span>.<span class=\"title function_\">equal</span>(node, <span class=\"variable language_\">this</span>.<span class=\"property\">root</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果父节点是黑色，则不需要平衡</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"title function_\">isNodeBlack</span>(node.<span class=\"property\">parent</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> grandParent = node.<span class=\"property\">parent</span>.<span class=\"property\">parent</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.<span class=\"property\">uncle</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"title function_\">isNodeRed</span>(node.<span class=\"property\">uncle</span>)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果节点有红色的叔叔节点，需要进行重新着色</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 将父节点和叔叔节点设置为黑色</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">makeNodeBlack</span>(node.<span class=\"property\">uncle</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">makeNodeBlack</span>(node.<span class=\"property\">parent</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">nodeComparator</span>.<span class=\"title function_\">equal</span>(grandParent, <span class=\"variable language_\">this</span>.<span class=\"property\">root</span>)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果祖父节点不是根节点，则将其重新着色为红色</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">makeNodeRed</span>(grandParent);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果祖父节点是黑色的根节点，则不需要进行其他操作</span></span><br><span class=\"line\">        <span class=\"comment\">// 因为根节点已经有两个黑色的兄弟节点了，我们刚刚重新着色了它们</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 现在需要进一步检查重新着色后的祖父节点</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">balance</span>(grandParent);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!node.<span class=\"property\">uncle</span> || <span class=\"variable language_\">this</span>.<span class=\"title function_\">isNodeBlack</span>(node.<span class=\"property\">uncle</span>)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果节点的叔叔节点是黑色或不存在，则需要进行旋转操作</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (grandParent) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 旋转后将得到的新的祖父节点</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> newGrandParent;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">nodeComparator</span>.<span class=\"title function_\">equal</span>(grandParent.<span class=\"property\">left</span>, node.<span class=\"property\">parent</span>)) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 左侧情况</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">nodeComparator</span>.<span class=\"title function_\">equal</span>(node.<span class=\"property\">parent</span>.<span class=\"property\">left</span>, node)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 左-左情况</span></span><br><span class=\"line\">            newGrandParent = <span class=\"variable language_\">this</span>.<span class=\"title function_\">leftLeftRotation</span>(grandParent);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 左-右情况</span></span><br><span class=\"line\">            newGrandParent = <span class=\"variable language_\">this</span>.<span class=\"title function_\">leftRightRotation</span>(grandParent);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 右侧情况</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">nodeComparator</span>.<span class=\"title function_\">equal</span>(node.<span class=\"property\">parent</span>.<span class=\"property\">right</span>, node)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 右-右情况</span></span><br><span class=\"line\">            newGrandParent = <span class=\"variable language_\">this</span>.<span class=\"title function_\">rightRightRotation</span>(grandParent);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 右-左情况</span></span><br><span class=\"line\">            newGrandParent = <span class=\"variable language_\">this</span>.<span class=\"title function_\">rightLeftRotation</span>(grandParent);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果新的祖父节点没有父节点，则将其设置为根节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newGrandParent &amp;&amp; newGrandParent.<span class=\"property\">parent</span> === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">root</span> = newGrandParent;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">// 将根节点重新着色为黑色</span></span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"title function_\">makeNodeBlack</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">root</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 检查新的祖父节点是否违反了红黑树的规则</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">balance</span>(newGrandParent);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 左左情况（p是g的左子节点且x是p的左子节点）</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">BinarySearchTreeNode|BinaryTreeNode</span>&#125; <span class=\"variable\">grandParentNode</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">BinarySearchTreeNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">leftLeftRotation</span>(<span class=\"params\">grandParentNode</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 记录祖父节点的父节点。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> grandGrandParent = grandParentNode.<span class=\"property\">parent</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 检查祖父节点是否是祖父父节点的左子节点。</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> grandParentNodeIsLeft;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (grandGrandParent) &#123;</span><br><span class=\"line\">      grandParentNodeIsLeft = <span class=\"variable language_\">this</span>.<span class=\"property\">nodeComparator</span>.<span class=\"title function_\">equal</span>(grandGrandParent.<span class=\"property\">left</span>, grandParentNode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 记录祖父节点的左子节点。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> parentNode = grandParentNode.<span class=\"property\">left</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 记录父节点的右子节点，因为我们将把它转移到祖父节点的左子树中。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> parentRightNode = parentNode.<span class=\"property\">right</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将祖父节点设置为父节点的右子节点。</span></span><br><span class=\"line\">    parentNode.<span class=\"title function_\">setRight</span>(grandParentNode);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将父节点的右子树移到祖父节点的左子树中。</span></span><br><span class=\"line\">    grandParentNode.<span class=\"title function_\">setLeft</span>(parentRightNode);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将父节点放在祖父节点的位置。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (grandGrandParent) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (grandParentNodeIsLeft) &#123;</span><br><span class=\"line\">        grandGrandParent.<span class=\"title function_\">setLeft</span>(parentNode);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        grandGrandParent.<span class=\"title function_\">setRight</span>(parentNode);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 将父节点设置为根节点。</span></span><br><span class=\"line\">      parentNode.<span class=\"property\">parent</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 交换祖父节点和父节点的颜色。</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">swapNodeColors</span>(parentNode, grandParentNode);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回新的根节点。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> parentNode;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 执行左-右旋转，即对给定的祖父节点进行旋转操作。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">BinarySearchTreeNode|BinaryTreeNode</span>&#125; <span class=\"variable\">grandParentNode</span> - 祖父节点。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">BinarySearchTreeNode</span>&#125; - 旋转后的根节点。</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">leftRightRotation</span>(<span class=\"params\">grandParentNode</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 存储父节点和子节点的引用。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> parentNode = grandParentNode.<span class=\"property\">left</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> childNode = parentNode.<span class=\"property\">right</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 存储子节点的左子节点，以保留左子树。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> childLeftNode = childNode.<span class=\"property\">left</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将父节点设为子节点的左子节点。</span></span><br><span class=\"line\">    childNode.<span class=\"title function_\">setLeft</span>(parentNode);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将子节点的左子树移到父节点的右子树中。</span></span><br><span class=\"line\">    parentNode.<span class=\"title function_\">setRight</span>(childLeftNode);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将左-右子节点放置在祖父节点的左子节点位置。</span></span><br><span class=\"line\">    grandParentNode.<span class=\"title function_\">setLeft</span>(childNode);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 现在可以执行左-左旋转了。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">leftLeftRotation</span>(grandParentNode);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 右右旋转情况（p是g的右子节点，x是p的右子节点）</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">BinarySearchTreeNode|BinaryTreeNode</span>&#125; <span class=\"variable\">grandParentNode</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">BinarySearchTreeNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">rightRightRotation</span>(<span class=\"params\">grandParentNode</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 记录祖父节点的父节点</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> grandGrandParent = grandParentNode.<span class=\"property\">parent</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 检查祖父节点是左子节点还是右子节点</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> grandParentNodeIsLeft;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (grandGrandParent) &#123;</span><br><span class=\"line\">      grandParentNodeIsLeft = <span class=\"variable language_\">this</span>.<span class=\"property\">nodeComparator</span>.<span class=\"title function_\">equal</span>(grandGrandParent.<span class=\"property\">left</span>, grandParentNode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 记录祖父节点的右子节点</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> parentNode = grandParentNode.<span class=\"property\">right</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 记录父节点的左子节点，因为我们将它移动到爷爷节点的右子树中</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> parentLeftNode = parentNode.<span class=\"property\">left</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将爷爷节点作为父节点的左子节点</span></span><br><span class=\"line\">    parentNode.<span class=\"title function_\">setLeft</span>(grandParentNode);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将父节点的左子节点转移到爷爷节点的右子树中</span></span><br><span class=\"line\">    grandParentNode.<span class=\"title function_\">setRight</span>(parentLeftNode);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将父节点放在爷爷节点的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (grandGrandParent) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (grandParentNodeIsLeft) &#123;</span><br><span class=\"line\">        grandGrandParent.<span class=\"title function_\">setLeft</span>(parentNode);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        grandGrandParent.<span class=\"title function_\">setRight</span>(parentNode);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 将父节点设为根节点</span></span><br><span class=\"line\">      parentNode.<span class=\"property\">parent</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 交换父节点和爷爷节点的颜色</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">swapNodeColors</span>(parentNode, grandParentNode);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回新的根节点</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> parentNode;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 对给定的祖父节点执行右-左旋转。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">BinarySearchTreeNode|BinaryTreeNode</span>&#125; <span class=\"variable\">grandParentNode</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">BinarySearchTreeNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">rightLeftRotation</span>(<span class=\"params\">grandParentNode</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 记住父节点和父节点的左子节点。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> parentNode = grandParentNode.<span class=\"property\">right</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> childNode = parentNode.<span class=\"property\">left</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 记住左子节点的右子节点，以防丢失右子树。稍后将重新分配给父节点的左子树。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> childRightNode = childNode.<span class=\"property\">right</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将父节点设为左子节点的右子节点。</span></span><br><span class=\"line\">    childNode.<span class=\"title function_\">setRight</span>(parentNode);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将左子节点的右子树移动到父节点的左子树。</span></span><br><span class=\"line\">    parentNode.<span class=\"title function_\">setLeft</span>(childRightNode);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将左子节点放在祖父节点的右子节点的位置。</span></span><br><span class=\"line\">    grandParentNode.<span class=\"title function_\">setRight</span>(childNode);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 现在可以执行右-右旋转了。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">rightRightRotation</span>(grandParentNode);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">BinarySearchTreeNode|BinaryTreeNode</span>&#125; <span class=\"variable\">node</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">BinarySearchTreeNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">makeNodeRed</span>(<span class=\"params\">node</span>) &#123;</span><br><span class=\"line\">    node.<span class=\"property\">meta</span>.<span class=\"title function_\">set</span>(<span class=\"variable constant_\">COLOR_PROP_NAME</span>, <span class=\"variable constant_\">RED_BLACK_TREE_COLORS</span>.<span class=\"property\">red</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">BinarySearchTreeNode|BinaryTreeNode</span>&#125; <span class=\"variable\">node</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">BinarySearchTreeNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">makeNodeBlack</span>(<span class=\"params\">node</span>) &#123;</span><br><span class=\"line\">    node.<span class=\"property\">meta</span>.<span class=\"title function_\">set</span>(<span class=\"variable constant_\">COLOR_PROP_NAME</span>, <span class=\"variable constant_\">RED_BLACK_TREE_COLORS</span>.<span class=\"property\">black</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">BinarySearchTreeNode|BinaryTreeNode</span>&#125; <span class=\"variable\">node</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">isNodeRed</span>(<span class=\"params\">node</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node.<span class=\"property\">meta</span>.<span class=\"title function_\">get</span>(<span class=\"variable constant_\">COLOR_PROP_NAME</span>) === <span class=\"variable constant_\">RED_BLACK_TREE_COLORS</span>.<span class=\"property\">red</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">BinarySearchTreeNode|BinaryTreeNode</span>&#125; <span class=\"variable\">node</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">isNodeBlack</span>(<span class=\"params\">node</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node.<span class=\"property\">meta</span>.<span class=\"title function_\">get</span>(<span class=\"variable constant_\">COLOR_PROP_NAME</span>) === <span class=\"variable constant_\">RED_BLACK_TREE_COLORS</span>.<span class=\"property\">black</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">BinarySearchTreeNode|BinaryTreeNode</span>&#125; <span class=\"variable\">node</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">isNodeColored</span>(<span class=\"params\">node</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">isNodeRed</span>(node) || <span class=\"variable language_\">this</span>.<span class=\"title function_\">isNodeBlack</span>(node);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">BinarySearchTreeNode|BinaryTreeNode</span>&#125; <span class=\"variable\">firstNode</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">BinarySearchTreeNode|BinaryTreeNode</span>&#125; <span class=\"variable\">secondNode</span></span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">swapNodeColors</span>(<span class=\"params\">firstNode, secondNode</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> firstColor = firstNode.<span class=\"property\">meta</span>.<span class=\"title function_\">get</span>(<span class=\"variable constant_\">COLOR_PROP_NAME</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> secondColor = secondNode.<span class=\"property\">meta</span>.<span class=\"title function_\">get</span>(<span class=\"variable constant_\">COLOR_PROP_NAME</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    firstNode.<span class=\"property\">meta</span>.<span class=\"title function_\">set</span>(<span class=\"variable constant_\">COLOR_PROP_NAME</span>, secondColor);</span><br><span class=\"line\">    secondNode.<span class=\"property\">meta</span>.<span class=\"title function_\">set</span>(<span class=\"variable constant_\">COLOR_PROP_NAME</span>, firstColor);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"related_posts":["2023/12/14/data-structures-012-AvlTree/"],"length":2150,"excerpt":"<h2 id=\"红黑树\"><a href=\"#红黑树\" class=\"headerlink\" title=\"红黑树\"></a>红黑树</h2><p><strong>红黑树</strong>是一种自平衡的二叉搜索树，在计算机科学中使用。二叉树的每个节点都有一个额外的位，这个位通常被解释为节点的颜色（红色或黑色）。这些颜色位用于在插入和删除过程中保持树的大致平衡。</p>\n<p>通过以一种满足特定属性的方式将树的每个节点标记为两种颜色之一，可以保持树的平衡，这些属性共同限制了树在最坏情况下可能变得不平衡的程度。当修改树时，新的树会被重新排列和重新标记以恢复颜色属性。这些属性的设计使得这种重新排列和重新标记可以高效地进行。</p>\n<p>树的平衡并不完美，但足够好，可以确保在 O(log n)的时间内进行搜索，其中 n 是树中的元素总数。插入和删除操作以及树的重新排列和重新标记也可以在 O(log n)的时间内完成。</p>\n<p>红黑树的一个示例：</p>","more":"<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/6/66/Red-black_tree_example.svg\" alt=\"red-black tree\"></p>\n<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><p>除了对二叉搜索树施加的要求之外，红黑树还必须满足以下条件：</p>\n<ul>\n<li>每个节点要么是红色，要么是黑色。</li>\n<li>根节点是黑色。这个规则有时可以省略。因为根节点总是可以从红色变为黑色，但不一定反之，所以这个规则对分析的影响很小。</li>\n<li>所有叶子节点（NIL）都是黑色的。</li>\n<li>如果一个节点是红色的，则它的两个子节点都是黑色的。</li>\n<li>从给定节点到任何其后代 NIL 节点的每条路径都包含相同数量的黑色节点。</li>\n</ul>\n<p>一些定义：从根节点到一个节点的黑色节点数称为该节点的黑色深度；从根节点到叶子节点的所有路径中的黑色节点数是红黑树的黑色高度。</p>\n<p>这些约束条件强制实施了红黑树的一个关键特性：从根节点到最远叶子节点的路径长度不超过从根节点到最近叶子节点路径长度的两倍。结果是树大致上是高度平衡的。由于插入、删除和查找值等操作的最坏情况时间与树的高度成比例，这个对树高度的理论上限使得红黑树在最坏情况下具有高效性，而普通的二叉搜索树则不具备。</p>\n<h2 id=\"插入平衡\"><a href=\"#插入平衡\" class=\"headerlink\" title=\"插入平衡\"></a>插入平衡</h2><h3 id=\"If-uncle-is-RED\"><a href=\"#If-uncle-is-RED\" class=\"headerlink\" title=\"If uncle is RED\"></a>If uncle is RED</h3><p><img src=\"https://www.geeksforgeeks.org/wp-content/uploads/redBlackCase2.png\" alt=\"Red Black Tree Balancing\"></p>\n<h3 id=\"If-uncle-is-BLACK\"><a href=\"#If-uncle-is-BLACK\" class=\"headerlink\" title=\"If uncle is BLACK\"></a>If uncle is BLACK</h3><ul>\n<li>左左情况（p 是 g 的左子节点，x 是 p 的左子节点）</li>\n<li>左右情况（p 是 g 的左子节点，x 是 p 的右子节点）</li>\n<li>右右情况（p 是 g 的右子节点，x 是 p 的右子节点）</li>\n<li>右左情况（p 是 g 的右子节点，x 是 p 的左子节点）</li>\n</ul>\n<h4 id=\"Left-Left-Case-See-g-p-and-x\"><a href=\"#Left-Left-Case-See-g-p-and-x\" class=\"headerlink\" title=\"Left Left Case (See g, p and x)\"></a>Left Left Case (See g, p and x)</h4><p><img src=\"https://www.geeksforgeeks.org/wp-content/uploads/redBlackCase3a1.png\" alt=\"Red Black Tree Balancing\"></p>\n<h4 id=\"Left-Right-Case-See-g-p-and-x\"><a href=\"#Left-Right-Case-See-g-p-and-x\" class=\"headerlink\" title=\"Left Right Case (See g, p and x)\"></a>Left Right Case (See g, p and x)</h4><p><img src=\"https://www.geeksforgeeks.org/wp-content/uploads/redBlackCase3b.png\" alt=\"Red Black Tree Balancing\"></p>\n<h4 id=\"Right-Right-Case-See-g-p-and-x\"><a href=\"#Right-Right-Case-See-g-p-and-x\" class=\"headerlink\" title=\"Right Right Case (See g, p and x)\"></a>Right Right Case (See g, p and x)</h4><p><img src=\"https://www.geeksforgeeks.org/wp-content/uploads/redBlackCase3c.png\" alt=\"Red Black Tree Balancing\"></p>\n<h4 id=\"Right-Left-Case-See-g-p-and-x\"><a href=\"#Right-Left-Case-See-g-p-and-x\" class=\"headerlink\" title=\"Right Left Case (See g, p and x)\"></a>Right Left Case (See g, p and x)</h4><p><img src=\"https://www.geeksforgeeks.org/wp-content/uploads/redBlackCase3d.png\" alt=\"Red Black Tree Balancing\"></p>\n<h2 id=\"RedBlackTree\"><a href=\"#RedBlackTree\" class=\"headerlink\" title=\"RedBlackTree\"></a>RedBlackTree</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 红黑树节点的可能颜色。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">RED_BLACK_TREE_COLORS</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">red</span>: <span class=\"string\">&quot;red&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">black</span>: <span class=\"string\">&quot;black&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 节点的元信息中颜色熟悉名称</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">COLOR_PROP_NAME</span> = <span class=\"string\">&quot;color&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedBlackTree</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">BinarySearchTree</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">value</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">BinarySearchTreeNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">insert</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将值插入，并获取插入的节点。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> insertedNode = <span class=\"variable language_\">super</span>.<span class=\"title function_\">insert</span>(value);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 检查插入的节点是否为树的根节点。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">nodeComparator</span>.<span class=\"title function_\">equal</span>(insertedNode, <span class=\"variable language_\">this</span>.<span class=\"property\">root</span>)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果插入的节点是根节点，则将其设置为黑色，以满足红黑树的性质。</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">makeNodeBlack</span>(insertedNode);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果插入的节点不是根节点，则将其设置为红色，以便进行平衡。</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">makeNodeRed</span>(insertedNode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 通过检查条件并执行必要的旋转操作来平衡树。</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">balance</span>(insertedNode);</span><br><span class=\"line\">    <span class=\"comment\">// 返回插入的节点。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> insertedNode;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">value</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">remove</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">`Can&#x27;t remove <span class=\"subst\">$&#123;value&#125;</span>. Remove method is not implemented yet`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 平衡红黑树的方法</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">BinarySearchTreeNode</span>&#125; <span class=\"variable\">node</span></span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">balance</span>(<span class=\"params\">node</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果节点是根节点，则不需要平衡</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">nodeComparator</span>.<span class=\"title function_\">equal</span>(node, <span class=\"variable language_\">this</span>.<span class=\"property\">root</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果父节点是黑色，则不需要平衡</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"title function_\">isNodeBlack</span>(node.<span class=\"property\">parent</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> grandParent = node.<span class=\"property\">parent</span>.<span class=\"property\">parent</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.<span class=\"property\">uncle</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"title function_\">isNodeRed</span>(node.<span class=\"property\">uncle</span>)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果节点有红色的叔叔节点，需要进行重新着色</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 将父节点和叔叔节点设置为黑色</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">makeNodeBlack</span>(node.<span class=\"property\">uncle</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">makeNodeBlack</span>(node.<span class=\"property\">parent</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">nodeComparator</span>.<span class=\"title function_\">equal</span>(grandParent, <span class=\"variable language_\">this</span>.<span class=\"property\">root</span>)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果祖父节点不是根节点，则将其重新着色为红色</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">makeNodeRed</span>(grandParent);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果祖父节点是黑色的根节点，则不需要进行其他操作</span></span><br><span class=\"line\">        <span class=\"comment\">// 因为根节点已经有两个黑色的兄弟节点了，我们刚刚重新着色了它们</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 现在需要进一步检查重新着色后的祖父节点</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">balance</span>(grandParent);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!node.<span class=\"property\">uncle</span> || <span class=\"variable language_\">this</span>.<span class=\"title function_\">isNodeBlack</span>(node.<span class=\"property\">uncle</span>)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果节点的叔叔节点是黑色或不存在，则需要进行旋转操作</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (grandParent) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 旋转后将得到的新的祖父节点</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> newGrandParent;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">nodeComparator</span>.<span class=\"title function_\">equal</span>(grandParent.<span class=\"property\">left</span>, node.<span class=\"property\">parent</span>)) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 左侧情况</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">nodeComparator</span>.<span class=\"title function_\">equal</span>(node.<span class=\"property\">parent</span>.<span class=\"property\">left</span>, node)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 左-左情况</span></span><br><span class=\"line\">            newGrandParent = <span class=\"variable language_\">this</span>.<span class=\"title function_\">leftLeftRotation</span>(grandParent);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 左-右情况</span></span><br><span class=\"line\">            newGrandParent = <span class=\"variable language_\">this</span>.<span class=\"title function_\">leftRightRotation</span>(grandParent);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 右侧情况</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">nodeComparator</span>.<span class=\"title function_\">equal</span>(node.<span class=\"property\">parent</span>.<span class=\"property\">right</span>, node)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 右-右情况</span></span><br><span class=\"line\">            newGrandParent = <span class=\"variable language_\">this</span>.<span class=\"title function_\">rightRightRotation</span>(grandParent);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 右-左情况</span></span><br><span class=\"line\">            newGrandParent = <span class=\"variable language_\">this</span>.<span class=\"title function_\">rightLeftRotation</span>(grandParent);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果新的祖父节点没有父节点，则将其设置为根节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newGrandParent &amp;&amp; newGrandParent.<span class=\"property\">parent</span> === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">root</span> = newGrandParent;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">// 将根节点重新着色为黑色</span></span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"title function_\">makeNodeBlack</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">root</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 检查新的祖父节点是否违反了红黑树的规则</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">balance</span>(newGrandParent);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 左左情况（p是g的左子节点且x是p的左子节点）</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">BinarySearchTreeNode|BinaryTreeNode</span>&#125; <span class=\"variable\">grandParentNode</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">BinarySearchTreeNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">leftLeftRotation</span>(<span class=\"params\">grandParentNode</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 记录祖父节点的父节点。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> grandGrandParent = grandParentNode.<span class=\"property\">parent</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 检查祖父节点是否是祖父父节点的左子节点。</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> grandParentNodeIsLeft;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (grandGrandParent) &#123;</span><br><span class=\"line\">      grandParentNodeIsLeft = <span class=\"variable language_\">this</span>.<span class=\"property\">nodeComparator</span>.<span class=\"title function_\">equal</span>(grandGrandParent.<span class=\"property\">left</span>, grandParentNode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 记录祖父节点的左子节点。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> parentNode = grandParentNode.<span class=\"property\">left</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 记录父节点的右子节点，因为我们将把它转移到祖父节点的左子树中。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> parentRightNode = parentNode.<span class=\"property\">right</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将祖父节点设置为父节点的右子节点。</span></span><br><span class=\"line\">    parentNode.<span class=\"title function_\">setRight</span>(grandParentNode);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将父节点的右子树移到祖父节点的左子树中。</span></span><br><span class=\"line\">    grandParentNode.<span class=\"title function_\">setLeft</span>(parentRightNode);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将父节点放在祖父节点的位置。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (grandGrandParent) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (grandParentNodeIsLeft) &#123;</span><br><span class=\"line\">        grandGrandParent.<span class=\"title function_\">setLeft</span>(parentNode);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        grandGrandParent.<span class=\"title function_\">setRight</span>(parentNode);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 将父节点设置为根节点。</span></span><br><span class=\"line\">      parentNode.<span class=\"property\">parent</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 交换祖父节点和父节点的颜色。</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">swapNodeColors</span>(parentNode, grandParentNode);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回新的根节点。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> parentNode;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 执行左-右旋转，即对给定的祖父节点进行旋转操作。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">BinarySearchTreeNode|BinaryTreeNode</span>&#125; <span class=\"variable\">grandParentNode</span> - 祖父节点。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">BinarySearchTreeNode</span>&#125; - 旋转后的根节点。</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">leftRightRotation</span>(<span class=\"params\">grandParentNode</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 存储父节点和子节点的引用。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> parentNode = grandParentNode.<span class=\"property\">left</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> childNode = parentNode.<span class=\"property\">right</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 存储子节点的左子节点，以保留左子树。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> childLeftNode = childNode.<span class=\"property\">left</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将父节点设为子节点的左子节点。</span></span><br><span class=\"line\">    childNode.<span class=\"title function_\">setLeft</span>(parentNode);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将子节点的左子树移到父节点的右子树中。</span></span><br><span class=\"line\">    parentNode.<span class=\"title function_\">setRight</span>(childLeftNode);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将左-右子节点放置在祖父节点的左子节点位置。</span></span><br><span class=\"line\">    grandParentNode.<span class=\"title function_\">setLeft</span>(childNode);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 现在可以执行左-左旋转了。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">leftLeftRotation</span>(grandParentNode);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 右右旋转情况（p是g的右子节点，x是p的右子节点）</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">BinarySearchTreeNode|BinaryTreeNode</span>&#125; <span class=\"variable\">grandParentNode</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">BinarySearchTreeNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">rightRightRotation</span>(<span class=\"params\">grandParentNode</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 记录祖父节点的父节点</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> grandGrandParent = grandParentNode.<span class=\"property\">parent</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 检查祖父节点是左子节点还是右子节点</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> grandParentNodeIsLeft;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (grandGrandParent) &#123;</span><br><span class=\"line\">      grandParentNodeIsLeft = <span class=\"variable language_\">this</span>.<span class=\"property\">nodeComparator</span>.<span class=\"title function_\">equal</span>(grandGrandParent.<span class=\"property\">left</span>, grandParentNode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 记录祖父节点的右子节点</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> parentNode = grandParentNode.<span class=\"property\">right</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 记录父节点的左子节点，因为我们将它移动到爷爷节点的右子树中</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> parentLeftNode = parentNode.<span class=\"property\">left</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将爷爷节点作为父节点的左子节点</span></span><br><span class=\"line\">    parentNode.<span class=\"title function_\">setLeft</span>(grandParentNode);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将父节点的左子节点转移到爷爷节点的右子树中</span></span><br><span class=\"line\">    grandParentNode.<span class=\"title function_\">setRight</span>(parentLeftNode);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将父节点放在爷爷节点的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (grandGrandParent) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (grandParentNodeIsLeft) &#123;</span><br><span class=\"line\">        grandGrandParent.<span class=\"title function_\">setLeft</span>(parentNode);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        grandGrandParent.<span class=\"title function_\">setRight</span>(parentNode);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 将父节点设为根节点</span></span><br><span class=\"line\">      parentNode.<span class=\"property\">parent</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 交换父节点和爷爷节点的颜色</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">swapNodeColors</span>(parentNode, grandParentNode);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回新的根节点</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> parentNode;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 对给定的祖父节点执行右-左旋转。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">BinarySearchTreeNode|BinaryTreeNode</span>&#125; <span class=\"variable\">grandParentNode</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">BinarySearchTreeNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">rightLeftRotation</span>(<span class=\"params\">grandParentNode</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 记住父节点和父节点的左子节点。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> parentNode = grandParentNode.<span class=\"property\">right</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> childNode = parentNode.<span class=\"property\">left</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 记住左子节点的右子节点，以防丢失右子树。稍后将重新分配给父节点的左子树。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> childRightNode = childNode.<span class=\"property\">right</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将父节点设为左子节点的右子节点。</span></span><br><span class=\"line\">    childNode.<span class=\"title function_\">setRight</span>(parentNode);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将左子节点的右子树移动到父节点的左子树。</span></span><br><span class=\"line\">    parentNode.<span class=\"title function_\">setLeft</span>(childRightNode);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将左子节点放在祖父节点的右子节点的位置。</span></span><br><span class=\"line\">    grandParentNode.<span class=\"title function_\">setRight</span>(childNode);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 现在可以执行右-右旋转了。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">rightRightRotation</span>(grandParentNode);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">BinarySearchTreeNode|BinaryTreeNode</span>&#125; <span class=\"variable\">node</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">BinarySearchTreeNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">makeNodeRed</span>(<span class=\"params\">node</span>) &#123;</span><br><span class=\"line\">    node.<span class=\"property\">meta</span>.<span class=\"title function_\">set</span>(<span class=\"variable constant_\">COLOR_PROP_NAME</span>, <span class=\"variable constant_\">RED_BLACK_TREE_COLORS</span>.<span class=\"property\">red</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">BinarySearchTreeNode|BinaryTreeNode</span>&#125; <span class=\"variable\">node</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">BinarySearchTreeNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">makeNodeBlack</span>(<span class=\"params\">node</span>) &#123;</span><br><span class=\"line\">    node.<span class=\"property\">meta</span>.<span class=\"title function_\">set</span>(<span class=\"variable constant_\">COLOR_PROP_NAME</span>, <span class=\"variable constant_\">RED_BLACK_TREE_COLORS</span>.<span class=\"property\">black</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">BinarySearchTreeNode|BinaryTreeNode</span>&#125; <span class=\"variable\">node</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">isNodeRed</span>(<span class=\"params\">node</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node.<span class=\"property\">meta</span>.<span class=\"title function_\">get</span>(<span class=\"variable constant_\">COLOR_PROP_NAME</span>) === <span class=\"variable constant_\">RED_BLACK_TREE_COLORS</span>.<span class=\"property\">red</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">BinarySearchTreeNode|BinaryTreeNode</span>&#125; <span class=\"variable\">node</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">isNodeBlack</span>(<span class=\"params\">node</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node.<span class=\"property\">meta</span>.<span class=\"title function_\">get</span>(<span class=\"variable constant_\">COLOR_PROP_NAME</span>) === <span class=\"variable constant_\">RED_BLACK_TREE_COLORS</span>.<span class=\"property\">black</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">BinarySearchTreeNode|BinaryTreeNode</span>&#125; <span class=\"variable\">node</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">isNodeColored</span>(<span class=\"params\">node</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">isNodeRed</span>(node) || <span class=\"variable language_\">this</span>.<span class=\"title function_\">isNodeBlack</span>(node);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">BinarySearchTreeNode|BinaryTreeNode</span>&#125; <span class=\"variable\">firstNode</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">BinarySearchTreeNode|BinaryTreeNode</span>&#125; <span class=\"variable\">secondNode</span></span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">swapNodeColors</span>(<span class=\"params\">firstNode, secondNode</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> firstColor = firstNode.<span class=\"property\">meta</span>.<span class=\"title function_\">get</span>(<span class=\"variable constant_\">COLOR_PROP_NAME</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> secondColor = secondNode.<span class=\"property\">meta</span>.<span class=\"title function_\">get</span>(<span class=\"variable constant_\">COLOR_PROP_NAME</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    firstNode.<span class=\"property\">meta</span>.<span class=\"title function_\">set</span>(<span class=\"variable constant_\">COLOR_PROP_NAME</span>, secondColor);</span><br><span class=\"line\">    secondNode.<span class=\"property\">meta</span>.<span class=\"title function_\">set</span>(<span class=\"variable constant_\">COLOR_PROP_NAME</span>, firstColor);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"JavaScript Algorithms and Data Structures 源码分析(14) -- 线段树 segment-tree","date":"2023-12-14T06:18:11.000Z","_content":"\n## 线段树\n\n线段树（Segment Tree），也称为统计树，是一种用于存储关于区间或段的信息的树数据结构。它允许查询哪些存储的段包含给定的点。它原则上是一个静态结构，也就是说，一旦构建完成就不能修改。类似的数据结构是区间树。\n\n线段树是一棵二叉树。树的根表示整个数组。根节点的两个子节点表示数组的第一半和第二半。同样，每个节点的子节点对应于与节点对应的数组的两半。\n\n我们从底部向上构建树，每个节点的值是其子节点值的“最小值”（或任何其他函数）。这将花费 O(n log n)的时间。执行的操作数是树的高度，即 O(log n)。为了进行范围查询，每个节点将查询分成两个子查询，一个子查询对应于每个子节点。如果查询包含节点的整个子数组，我们可以使用节点上预计算的值。利用这种优化，我们可以证明只有 O(log n)次最小操作。\n\n<!-- more -->\n\n![Min Segment Tree](https://www.geeksforgeeks.org/wp-content/uploads/RangeMinimumQuery.png)\n\n![Sum Segment Tree](https://www.geeksforgeeks.org/wp-content/uploads/segment-tree1.png)\n\n## SegmentTree\n\n```js\nexport default class SegmentTree {\n  /**\n   * 构造函数，用于创建线段树。\n   * @param {number[]} inputArray - 输入数组。\n   * @param {function} operation  - 用于对区间进行操作的二元函数（例如：求和，求最小值）。\n   * @param {number} operationFallback - 操作的回退值（例如：求和时为0，求最小值时为Infinity）。\n   */\n  constructor(inputArray, operation, operationFallback) {\n    // 存储输入数组、操作函数和操作的回退值。\n    this.inputArray = inputArray;\n    this.operation = operation;\n    this.operationFallback = operationFallback;\n\n    // 初始化线段树数组。\n    this.segmentTree = this.initSegmentTree(this.inputArray);\n    // 构建线段树。\n    this.buildSegmentTree();\n  }\n\n  /**\n   * 根据输入数组初始化线段树数组。\n   * @param {number[]} inputArray - 输入数组。\n   * @return {number[]} - 初始化后的线段树数组。\n   */\n  initSegmentTree(inputArray) {\n    let segmentTreeArrayLength;\n    const inputArrayLength = inputArray.length;\n\n    // 检查输入数组的长度是否是2的幂。\n    if (isPowerOfTwo(inputArrayLength)) {\n      // 如果长度是2的幂，则根据长度计算线段树数组的长度。\n      segmentTreeArrayLength = 2 * inputArrayLength - 1;\n    } else {\n      // 如果长度不是2的幂，则找到下一个2的幂并用它来计算线段树数组的长度。\n      const currentPower = Math.floor(Math.log2(inputArrayLength));\n      const nextPower = currentPower + 1;\n      const nextPowerOfTwoNumber = 2 ** nextPower;\n      segmentTreeArrayLength = 2 * nextPowerOfTwoNumber - 1;\n    }\n    // 创建一个长度为计算出的线段树数组长度的新数组，并将其填充为null。\n    return new Array(segmentTreeArrayLength).fill(null);\n  }\n\n  /**\n   * 构建线段树。\n   */\n  buildSegmentTree() {\n    // 将左索引设置为0。\n    const leftIndex = 0;\n    // 将右索引设置为输入数组的长度减1。\n    const rightIndex = this.inputArray.length - 1;\n    // 将位置设置为0。\n    const position = 0;\n    // 使用给定的参数递归构建树。\n    this.buildTreeRecursively(leftIndex, rightIndex, position);\n  }\n\n  /**\n   * 递归构建线段树。\n   *\n   * @param {number} leftInputIndex - 输入数组中左侧元素的索引。\n   * @param {number} rightInputIndex - 输入数组中右侧元素的索引。\n   * @param {number} position - 当前在线段树中的位置。\n   */\n  buildTreeRecursively(leftInputIndex, rightInputIndex, position) {\n    // 如果左侧和右侧输入索引相等，说明我们已经到达了线段树的叶子节点。\n    // 我们将对应的元素从输入数组复制到线段树中。\n    if (leftInputIndex === rightInputIndex) {\n      this.segmentTree[position] = this.inputArray[leftInputIndex];\n      return;\n    }\n\n    // 将输入数组分成两半并递归处理。\n    const middleIndex = Math.floor((leftInputIndex + rightInputIndex) / 2);\n    // 处理输入数组的左半部分。\n    this.buildTreeRecursively(leftInputIndex, middleIndex, this.getLeftChildIndex(position));\n    // 处理输入数组的右半部分。\n    this.buildTreeRecursively(middleIndex + 1, rightInputIndex, this.getRightChildIndex(position));\n\n    // 一旦树中的每个叶子节点都不为空，我们可以通过应用提供的操作函数自底向上构建树。\n    this.segmentTree[position] = this.operation(this.segmentTree[this.getLeftChildIndex(position)], this.segmentTree[this.getRightChildIndex(position)]);\n  }\n\n  /**\n   * 在段树中执行范围查询。\n   *\n   * @param {number} queryLeftIndex - 查询范围的左索引。\n   * @param {number} queryRightIndex - 查询范围的右索引。\n   * @return {number} - 范围查询的结果。\n   */\n  rangeQuery(queryLeftIndex, queryRightIndex) {\n    // 将左索引和右索引设置为输入数组的边界。\n    const leftIndex = 0;\n    const rightIndex = this.inputArray.length - 1;\n    // 将初始位置设置为段树的根节点。\n    const position = 0;\n    // 调用递归辅助函数执行范围查询。\n    return this.rangeQueryRecursive(queryLeftIndex, queryRightIndex, leftIndex, rightIndex, position);\n  }\n\n  /**\n   * 递归地在段树中执行范围查询，使用提供的操作函数。\n   *\n   * @param {number} queryLeftIndex - 查询范围的左索引\n   * @param {number} queryRightIndex - 查询范围的右索引\n   * @param {number} leftIndex - 输入数组段的左索引\n   * @param {number} rightIndex - 输入数组段的右索引\n   * @param {number} position - 二叉树中的根位置\n   * @return {number} - 范围查询的结果\n   */\n  rangeQueryRecursive(queryLeftIndex, queryRightIndex, leftIndex, rightIndex, position) {\n    // 如果查询范围完全覆盖当前段，则返回当前位置的值\n    if (queryLeftIndex <= leftIndex && queryRightIndex >= rightIndex) {\n      // Total overlap.\n      return this.segmentTree[position];\n    }\n    // 如果查询范围与当前段没有重叠，则返回默认值\n    if (queryLeftIndex > rightIndex || queryRightIndex < leftIndex) {\n      // No overlap.\n      return this.operationFallback;\n    }\n\n    // 如果存在部分重叠，将当前段分成两半，并递归地在两半上执行范围查询\n    const middleIndex = Math.floor((leftIndex + rightIndex) / 2);\n\n    const leftOperationResult = this.rangeQueryRecursive(queryLeftIndex, queryRightIndex, leftIndex, middleIndex, this.getLeftChildIndex(position));\n\n    const rightOperationResult = this.rangeQueryRecursive(queryLeftIndex, queryRightIndex, middleIndex + 1, rightIndex, this.getRightChildIndex(position));\n    // 使用提供的操作函数合并左半部分和右半部分的查询结果\n    return this.operation(leftOperationResult, rightOperationResult);\n  }\n\n  /**\n   * 计算树中左子节点的索引\n   * @param {number} parentIndex - 父节点的索引\n   * @return {number} - 左子节点的索引\n   */\n  getLeftChildIndex(parentIndex) {\n    return 2 * parentIndex + 1;\n  }\n\n  /**\n   * 计算树中右子节点的索引\n   * @param {number} parentIndex - 父节点的索引\n   * @return {number} - 右子节点的索引\n   */\n  getRightChildIndex(parentIndex) {\n    return 2 * parentIndex + 2;\n  }\n}\n```\n","source":"_posts/data-structures-014-SegmentTree.md","raw":"---\ntitle: JavaScript Algorithms and Data Structures 源码分析(14) -- 线段树 segment-tree\ndate: 2023-12-14 14:18:11\ntags:\n  - data structures\ncategories:\n  - 数据结构与算法\n---\n\n## 线段树\n\n线段树（Segment Tree），也称为统计树，是一种用于存储关于区间或段的信息的树数据结构。它允许查询哪些存储的段包含给定的点。它原则上是一个静态结构，也就是说，一旦构建完成就不能修改。类似的数据结构是区间树。\n\n线段树是一棵二叉树。树的根表示整个数组。根节点的两个子节点表示数组的第一半和第二半。同样，每个节点的子节点对应于与节点对应的数组的两半。\n\n我们从底部向上构建树，每个节点的值是其子节点值的“最小值”（或任何其他函数）。这将花费 O(n log n)的时间。执行的操作数是树的高度，即 O(log n)。为了进行范围查询，每个节点将查询分成两个子查询，一个子查询对应于每个子节点。如果查询包含节点的整个子数组，我们可以使用节点上预计算的值。利用这种优化，我们可以证明只有 O(log n)次最小操作。\n\n<!-- more -->\n\n![Min Segment Tree](https://www.geeksforgeeks.org/wp-content/uploads/RangeMinimumQuery.png)\n\n![Sum Segment Tree](https://www.geeksforgeeks.org/wp-content/uploads/segment-tree1.png)\n\n## SegmentTree\n\n```js\nexport default class SegmentTree {\n  /**\n   * 构造函数，用于创建线段树。\n   * @param {number[]} inputArray - 输入数组。\n   * @param {function} operation  - 用于对区间进行操作的二元函数（例如：求和，求最小值）。\n   * @param {number} operationFallback - 操作的回退值（例如：求和时为0，求最小值时为Infinity）。\n   */\n  constructor(inputArray, operation, operationFallback) {\n    // 存储输入数组、操作函数和操作的回退值。\n    this.inputArray = inputArray;\n    this.operation = operation;\n    this.operationFallback = operationFallback;\n\n    // 初始化线段树数组。\n    this.segmentTree = this.initSegmentTree(this.inputArray);\n    // 构建线段树。\n    this.buildSegmentTree();\n  }\n\n  /**\n   * 根据输入数组初始化线段树数组。\n   * @param {number[]} inputArray - 输入数组。\n   * @return {number[]} - 初始化后的线段树数组。\n   */\n  initSegmentTree(inputArray) {\n    let segmentTreeArrayLength;\n    const inputArrayLength = inputArray.length;\n\n    // 检查输入数组的长度是否是2的幂。\n    if (isPowerOfTwo(inputArrayLength)) {\n      // 如果长度是2的幂，则根据长度计算线段树数组的长度。\n      segmentTreeArrayLength = 2 * inputArrayLength - 1;\n    } else {\n      // 如果长度不是2的幂，则找到下一个2的幂并用它来计算线段树数组的长度。\n      const currentPower = Math.floor(Math.log2(inputArrayLength));\n      const nextPower = currentPower + 1;\n      const nextPowerOfTwoNumber = 2 ** nextPower;\n      segmentTreeArrayLength = 2 * nextPowerOfTwoNumber - 1;\n    }\n    // 创建一个长度为计算出的线段树数组长度的新数组，并将其填充为null。\n    return new Array(segmentTreeArrayLength).fill(null);\n  }\n\n  /**\n   * 构建线段树。\n   */\n  buildSegmentTree() {\n    // 将左索引设置为0。\n    const leftIndex = 0;\n    // 将右索引设置为输入数组的长度减1。\n    const rightIndex = this.inputArray.length - 1;\n    // 将位置设置为0。\n    const position = 0;\n    // 使用给定的参数递归构建树。\n    this.buildTreeRecursively(leftIndex, rightIndex, position);\n  }\n\n  /**\n   * 递归构建线段树。\n   *\n   * @param {number} leftInputIndex - 输入数组中左侧元素的索引。\n   * @param {number} rightInputIndex - 输入数组中右侧元素的索引。\n   * @param {number} position - 当前在线段树中的位置。\n   */\n  buildTreeRecursively(leftInputIndex, rightInputIndex, position) {\n    // 如果左侧和右侧输入索引相等，说明我们已经到达了线段树的叶子节点。\n    // 我们将对应的元素从输入数组复制到线段树中。\n    if (leftInputIndex === rightInputIndex) {\n      this.segmentTree[position] = this.inputArray[leftInputIndex];\n      return;\n    }\n\n    // 将输入数组分成两半并递归处理。\n    const middleIndex = Math.floor((leftInputIndex + rightInputIndex) / 2);\n    // 处理输入数组的左半部分。\n    this.buildTreeRecursively(leftInputIndex, middleIndex, this.getLeftChildIndex(position));\n    // 处理输入数组的右半部分。\n    this.buildTreeRecursively(middleIndex + 1, rightInputIndex, this.getRightChildIndex(position));\n\n    // 一旦树中的每个叶子节点都不为空，我们可以通过应用提供的操作函数自底向上构建树。\n    this.segmentTree[position] = this.operation(this.segmentTree[this.getLeftChildIndex(position)], this.segmentTree[this.getRightChildIndex(position)]);\n  }\n\n  /**\n   * 在段树中执行范围查询。\n   *\n   * @param {number} queryLeftIndex - 查询范围的左索引。\n   * @param {number} queryRightIndex - 查询范围的右索引。\n   * @return {number} - 范围查询的结果。\n   */\n  rangeQuery(queryLeftIndex, queryRightIndex) {\n    // 将左索引和右索引设置为输入数组的边界。\n    const leftIndex = 0;\n    const rightIndex = this.inputArray.length - 1;\n    // 将初始位置设置为段树的根节点。\n    const position = 0;\n    // 调用递归辅助函数执行范围查询。\n    return this.rangeQueryRecursive(queryLeftIndex, queryRightIndex, leftIndex, rightIndex, position);\n  }\n\n  /**\n   * 递归地在段树中执行范围查询，使用提供的操作函数。\n   *\n   * @param {number} queryLeftIndex - 查询范围的左索引\n   * @param {number} queryRightIndex - 查询范围的右索引\n   * @param {number} leftIndex - 输入数组段的左索引\n   * @param {number} rightIndex - 输入数组段的右索引\n   * @param {number} position - 二叉树中的根位置\n   * @return {number} - 范围查询的结果\n   */\n  rangeQueryRecursive(queryLeftIndex, queryRightIndex, leftIndex, rightIndex, position) {\n    // 如果查询范围完全覆盖当前段，则返回当前位置的值\n    if (queryLeftIndex <= leftIndex && queryRightIndex >= rightIndex) {\n      // Total overlap.\n      return this.segmentTree[position];\n    }\n    // 如果查询范围与当前段没有重叠，则返回默认值\n    if (queryLeftIndex > rightIndex || queryRightIndex < leftIndex) {\n      // No overlap.\n      return this.operationFallback;\n    }\n\n    // 如果存在部分重叠，将当前段分成两半，并递归地在两半上执行范围查询\n    const middleIndex = Math.floor((leftIndex + rightIndex) / 2);\n\n    const leftOperationResult = this.rangeQueryRecursive(queryLeftIndex, queryRightIndex, leftIndex, middleIndex, this.getLeftChildIndex(position));\n\n    const rightOperationResult = this.rangeQueryRecursive(queryLeftIndex, queryRightIndex, middleIndex + 1, rightIndex, this.getRightChildIndex(position));\n    // 使用提供的操作函数合并左半部分和右半部分的查询结果\n    return this.operation(leftOperationResult, rightOperationResult);\n  }\n\n  /**\n   * 计算树中左子节点的索引\n   * @param {number} parentIndex - 父节点的索引\n   * @return {number} - 左子节点的索引\n   */\n  getLeftChildIndex(parentIndex) {\n    return 2 * parentIndex + 1;\n  }\n\n  /**\n   * 计算树中右子节点的索引\n   * @param {number} parentIndex - 父节点的索引\n   * @return {number} - 右子节点的索引\n   */\n  getRightChildIndex(parentIndex) {\n    return 2 * parentIndex + 2;\n  }\n}\n```\n","slug":"data-structures-014-SegmentTree","published":1,"updated":"2023-12-14T06:48:15.310Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clq4xe1de001ztz2hhco44mkv","content":"<h2 id=\"线段树\"><a href=\"#线段树\" class=\"headerlink\" title=\"线段树\"></a>线段树</h2><p>线段树（Segment Tree），也称为统计树，是一种用于存储关于区间或段的信息的树数据结构。它允许查询哪些存储的段包含给定的点。它原则上是一个静态结构，也就是说，一旦构建完成就不能修改。类似的数据结构是区间树。</p>\n<p>线段树是一棵二叉树。树的根表示整个数组。根节点的两个子节点表示数组的第一半和第二半。同样，每个节点的子节点对应于与节点对应的数组的两半。</p>\n<p>我们从底部向上构建树，每个节点的值是其子节点值的“最小值”（或任何其他函数）。这将花费 O(n log n)的时间。执行的操作数是树的高度，即 O(log n)。为了进行范围查询，每个节点将查询分成两个子查询，一个子查询对应于每个子节点。如果查询包含节点的整个子数组，我们可以使用节点上预计算的值。利用这种优化，我们可以证明只有 O(log n)次最小操作。</p>\n<span id=\"more\"></span>\n\n<p><img src=\"https://www.geeksforgeeks.org/wp-content/uploads/RangeMinimumQuery.png\" alt=\"Min Segment Tree\"></p>\n<p><img src=\"https://www.geeksforgeeks.org/wp-content/uploads/segment-tree1.png\" alt=\"Sum Segment Tree\"></p>\n<h2 id=\"SegmentTree\"><a href=\"#SegmentTree\" class=\"headerlink\" title=\"SegmentTree\"></a>SegmentTree</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SegmentTree</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 构造函数，用于创建线段树。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">inputArray</span> - 输入数组。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">function</span>&#125; <span class=\"variable\">operation</span>  - 用于对区间进行操作的二元函数（例如：求和，求最小值）。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">operationFallback</span> - 操作的回退值（例如：求和时为0，求最小值时为Infinity）。</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">inputArray, operation, operationFallback</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 存储输入数组、操作函数和操作的回退值。</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">inputArray</span> = inputArray;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">operation</span> = operation;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">operationFallback</span> = operationFallback;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化线段树数组。</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">segmentTree</span> = <span class=\"variable language_\">this</span>.<span class=\"title function_\">initSegmentTree</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">inputArray</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 构建线段树。</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">buildSegmentTree</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 根据输入数组初始化线段树数组。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">inputArray</span> - 输入数组。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[]</span>&#125; - 初始化后的线段树数组。</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">initSegmentTree</span>(<span class=\"params\">inputArray</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> segmentTreeArrayLength;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> inputArrayLength = inputArray.<span class=\"property\">length</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 检查输入数组的长度是否是2的幂。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isPowerOfTwo</span>(inputArrayLength)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果长度是2的幂，则根据长度计算线段树数组的长度。</span></span><br><span class=\"line\">      segmentTreeArrayLength = <span class=\"number\">2</span> * inputArrayLength - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果长度不是2的幂，则找到下一个2的幂并用它来计算线段树数组的长度。</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> currentPower = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">log2</span>(inputArrayLength));</span><br><span class=\"line\">      <span class=\"keyword\">const</span> nextPower = currentPower + <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> nextPowerOfTwoNumber = <span class=\"number\">2</span> ** nextPower;</span><br><span class=\"line\">      segmentTreeArrayLength = <span class=\"number\">2</span> * nextPowerOfTwoNumber - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个长度为计算出的线段树数组长度的新数组，并将其填充为null。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(segmentTreeArrayLength).<span class=\"title function_\">fill</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 构建线段树。</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">buildSegmentTree</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将左索引设置为0。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> leftIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 将右索引设置为输入数组的长度减1。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> rightIndex = <span class=\"variable language_\">this</span>.<span class=\"property\">inputArray</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 将位置设置为0。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> position = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 使用给定的参数递归构建树。</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">buildTreeRecursively</span>(leftIndex, rightIndex, position);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 递归构建线段树。</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">leftInputIndex</span> - 输入数组中左侧元素的索引。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">rightInputIndex</span> - 输入数组中右侧元素的索引。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">position</span> - 当前在线段树中的位置。</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">buildTreeRecursively</span>(<span class=\"params\">leftInputIndex, rightInputIndex, position</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果左侧和右侧输入索引相等，说明我们已经到达了线段树的叶子节点。</span></span><br><span class=\"line\">    <span class=\"comment\">// 我们将对应的元素从输入数组复制到线段树中。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (leftInputIndex === rightInputIndex) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">segmentTree</span>[position] = <span class=\"variable language_\">this</span>.<span class=\"property\">inputArray</span>[leftInputIndex];</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将输入数组分成两半并递归处理。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> middleIndex = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((leftInputIndex + rightInputIndex) / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 处理输入数组的左半部分。</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">buildTreeRecursively</span>(leftInputIndex, middleIndex, <span class=\"variable language_\">this</span>.<span class=\"title function_\">getLeftChildIndex</span>(position));</span><br><span class=\"line\">    <span class=\"comment\">// 处理输入数组的右半部分。</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">buildTreeRecursively</span>(middleIndex + <span class=\"number\">1</span>, rightInputIndex, <span class=\"variable language_\">this</span>.<span class=\"title function_\">getRightChildIndex</span>(position));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 一旦树中的每个叶子节点都不为空，我们可以通过应用提供的操作函数自底向上构建树。</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">segmentTree</span>[position] = <span class=\"variable language_\">this</span>.<span class=\"title function_\">operation</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">segmentTree</span>[<span class=\"variable language_\">this</span>.<span class=\"title function_\">getLeftChildIndex</span>(position)], <span class=\"variable language_\">this</span>.<span class=\"property\">segmentTree</span>[<span class=\"variable language_\">this</span>.<span class=\"title function_\">getRightChildIndex</span>(position)]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 在段树中执行范围查询。</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">queryLeftIndex</span> - 查询范围的左索引。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">queryRightIndex</span> - 查询范围的右索引。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125; - 范围查询的结果。</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">rangeQuery</span>(<span class=\"params\">queryLeftIndex, queryRightIndex</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将左索引和右索引设置为输入数组的边界。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> leftIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> rightIndex = <span class=\"variable language_\">this</span>.<span class=\"property\">inputArray</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 将初始位置设置为段树的根节点。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> position = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 调用递归辅助函数执行范围查询。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">rangeQueryRecursive</span>(queryLeftIndex, queryRightIndex, leftIndex, rightIndex, position);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 递归地在段树中执行范围查询，使用提供的操作函数。</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">queryLeftIndex</span> - 查询范围的左索引</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">queryRightIndex</span> - 查询范围的右索引</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">leftIndex</span> - 输入数组段的左索引</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">rightIndex</span> - 输入数组段的右索引</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">position</span> - 二叉树中的根位置</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125; - 范围查询的结果</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">rangeQueryRecursive</span>(<span class=\"params\">queryLeftIndex, queryRightIndex, leftIndex, rightIndex, position</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果查询范围完全覆盖当前段，则返回当前位置的值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (queryLeftIndex &lt;= leftIndex &amp;&amp; queryRightIndex &gt;= rightIndex) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Total overlap.</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">segmentTree</span>[position];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果查询范围与当前段没有重叠，则返回默认值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (queryLeftIndex &gt; rightIndex || queryRightIndex &lt; leftIndex) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// No overlap.</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">operationFallback</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果存在部分重叠，将当前段分成两半，并递归地在两半上执行范围查询</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> middleIndex = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((leftIndex + rightIndex) / <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> leftOperationResult = <span class=\"variable language_\">this</span>.<span class=\"title function_\">rangeQueryRecursive</span>(queryLeftIndex, queryRightIndex, leftIndex, middleIndex, <span class=\"variable language_\">this</span>.<span class=\"title function_\">getLeftChildIndex</span>(position));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> rightOperationResult = <span class=\"variable language_\">this</span>.<span class=\"title function_\">rangeQueryRecursive</span>(queryLeftIndex, queryRightIndex, middleIndex + <span class=\"number\">1</span>, rightIndex, <span class=\"variable language_\">this</span>.<span class=\"title function_\">getRightChildIndex</span>(position));</span><br><span class=\"line\">    <span class=\"comment\">// 使用提供的操作函数合并左半部分和右半部分的查询结果</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">operation</span>(leftOperationResult, rightOperationResult);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 计算树中左子节点的索引</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">parentIndex</span> - 父节点的索引</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125; - 左子节点的索引</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">getLeftChildIndex</span>(<span class=\"params\">parentIndex</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span> * parentIndex + <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 计算树中右子节点的索引</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">parentIndex</span> - 父节点的索引</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125; - 右子节点的索引</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">getRightChildIndex</span>(<span class=\"params\">parentIndex</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span> * parentIndex + <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"related_posts":[],"length":1280,"excerpt":"<h2 id=\"线段树\"><a href=\"#线段树\" class=\"headerlink\" title=\"线段树\"></a>线段树</h2><p>线段树（Segment Tree），也称为统计树，是一种用于存储关于区间或段的信息的树数据结构。它允许查询哪些存储的段包含给定的点。它原则上是一个静态结构，也就是说，一旦构建完成就不能修改。类似的数据结构是区间树。</p>\n<p>线段树是一棵二叉树。树的根表示整个数组。根节点的两个子节点表示数组的第一半和第二半。同样，每个节点的子节点对应于与节点对应的数组的两半。</p>\n<p>我们从底部向上构建树，每个节点的值是其子节点值的“最小值”（或任何其他函数）。这将花费 O(n log n)的时间。执行的操作数是树的高度，即 O(log n)。为了进行范围查询，每个节点将查询分成两个子查询，一个子查询对应于每个子节点。如果查询包含节点的整个子数组，我们可以使用节点上预计算的值。利用这种优化，我们可以证明只有 O(log n)次最小操作。</p>","more":"<p><img src=\"https://www.geeksforgeeks.org/wp-content/uploads/RangeMinimumQuery.png\" alt=\"Min Segment Tree\"></p>\n<p><img src=\"https://www.geeksforgeeks.org/wp-content/uploads/segment-tree1.png\" alt=\"Sum Segment Tree\"></p>\n<h2 id=\"SegmentTree\"><a href=\"#SegmentTree\" class=\"headerlink\" title=\"SegmentTree\"></a>SegmentTree</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SegmentTree</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 构造函数，用于创建线段树。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">inputArray</span> - 输入数组。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">function</span>&#125; <span class=\"variable\">operation</span>  - 用于对区间进行操作的二元函数（例如：求和，求最小值）。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">operationFallback</span> - 操作的回退值（例如：求和时为0，求最小值时为Infinity）。</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">inputArray, operation, operationFallback</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 存储输入数组、操作函数和操作的回退值。</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">inputArray</span> = inputArray;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">operation</span> = operation;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">operationFallback</span> = operationFallback;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化线段树数组。</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">segmentTree</span> = <span class=\"variable language_\">this</span>.<span class=\"title function_\">initSegmentTree</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">inputArray</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 构建线段树。</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">buildSegmentTree</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 根据输入数组初始化线段树数组。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">inputArray</span> - 输入数组。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[]</span>&#125; - 初始化后的线段树数组。</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">initSegmentTree</span>(<span class=\"params\">inputArray</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> segmentTreeArrayLength;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> inputArrayLength = inputArray.<span class=\"property\">length</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 检查输入数组的长度是否是2的幂。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isPowerOfTwo</span>(inputArrayLength)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果长度是2的幂，则根据长度计算线段树数组的长度。</span></span><br><span class=\"line\">      segmentTreeArrayLength = <span class=\"number\">2</span> * inputArrayLength - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果长度不是2的幂，则找到下一个2的幂并用它来计算线段树数组的长度。</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> currentPower = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">log2</span>(inputArrayLength));</span><br><span class=\"line\">      <span class=\"keyword\">const</span> nextPower = currentPower + <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> nextPowerOfTwoNumber = <span class=\"number\">2</span> ** nextPower;</span><br><span class=\"line\">      segmentTreeArrayLength = <span class=\"number\">2</span> * nextPowerOfTwoNumber - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个长度为计算出的线段树数组长度的新数组，并将其填充为null。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(segmentTreeArrayLength).<span class=\"title function_\">fill</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 构建线段树。</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">buildSegmentTree</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将左索引设置为0。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> leftIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 将右索引设置为输入数组的长度减1。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> rightIndex = <span class=\"variable language_\">this</span>.<span class=\"property\">inputArray</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 将位置设置为0。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> position = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 使用给定的参数递归构建树。</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">buildTreeRecursively</span>(leftIndex, rightIndex, position);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 递归构建线段树。</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">leftInputIndex</span> - 输入数组中左侧元素的索引。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">rightInputIndex</span> - 输入数组中右侧元素的索引。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">position</span> - 当前在线段树中的位置。</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">buildTreeRecursively</span>(<span class=\"params\">leftInputIndex, rightInputIndex, position</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果左侧和右侧输入索引相等，说明我们已经到达了线段树的叶子节点。</span></span><br><span class=\"line\">    <span class=\"comment\">// 我们将对应的元素从输入数组复制到线段树中。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (leftInputIndex === rightInputIndex) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">segmentTree</span>[position] = <span class=\"variable language_\">this</span>.<span class=\"property\">inputArray</span>[leftInputIndex];</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将输入数组分成两半并递归处理。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> middleIndex = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((leftInputIndex + rightInputIndex) / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 处理输入数组的左半部分。</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">buildTreeRecursively</span>(leftInputIndex, middleIndex, <span class=\"variable language_\">this</span>.<span class=\"title function_\">getLeftChildIndex</span>(position));</span><br><span class=\"line\">    <span class=\"comment\">// 处理输入数组的右半部分。</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">buildTreeRecursively</span>(middleIndex + <span class=\"number\">1</span>, rightInputIndex, <span class=\"variable language_\">this</span>.<span class=\"title function_\">getRightChildIndex</span>(position));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 一旦树中的每个叶子节点都不为空，我们可以通过应用提供的操作函数自底向上构建树。</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">segmentTree</span>[position] = <span class=\"variable language_\">this</span>.<span class=\"title function_\">operation</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">segmentTree</span>[<span class=\"variable language_\">this</span>.<span class=\"title function_\">getLeftChildIndex</span>(position)], <span class=\"variable language_\">this</span>.<span class=\"property\">segmentTree</span>[<span class=\"variable language_\">this</span>.<span class=\"title function_\">getRightChildIndex</span>(position)]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 在段树中执行范围查询。</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">queryLeftIndex</span> - 查询范围的左索引。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">queryRightIndex</span> - 查询范围的右索引。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125; - 范围查询的结果。</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">rangeQuery</span>(<span class=\"params\">queryLeftIndex, queryRightIndex</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将左索引和右索引设置为输入数组的边界。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> leftIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> rightIndex = <span class=\"variable language_\">this</span>.<span class=\"property\">inputArray</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 将初始位置设置为段树的根节点。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> position = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 调用递归辅助函数执行范围查询。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">rangeQueryRecursive</span>(queryLeftIndex, queryRightIndex, leftIndex, rightIndex, position);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 递归地在段树中执行范围查询，使用提供的操作函数。</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">queryLeftIndex</span> - 查询范围的左索引</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">queryRightIndex</span> - 查询范围的右索引</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">leftIndex</span> - 输入数组段的左索引</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">rightIndex</span> - 输入数组段的右索引</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">position</span> - 二叉树中的根位置</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125; - 范围查询的结果</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">rangeQueryRecursive</span>(<span class=\"params\">queryLeftIndex, queryRightIndex, leftIndex, rightIndex, position</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果查询范围完全覆盖当前段，则返回当前位置的值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (queryLeftIndex &lt;= leftIndex &amp;&amp; queryRightIndex &gt;= rightIndex) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Total overlap.</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">segmentTree</span>[position];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果查询范围与当前段没有重叠，则返回默认值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (queryLeftIndex &gt; rightIndex || queryRightIndex &lt; leftIndex) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// No overlap.</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">operationFallback</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果存在部分重叠，将当前段分成两半，并递归地在两半上执行范围查询</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> middleIndex = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((leftIndex + rightIndex) / <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> leftOperationResult = <span class=\"variable language_\">this</span>.<span class=\"title function_\">rangeQueryRecursive</span>(queryLeftIndex, queryRightIndex, leftIndex, middleIndex, <span class=\"variable language_\">this</span>.<span class=\"title function_\">getLeftChildIndex</span>(position));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> rightOperationResult = <span class=\"variable language_\">this</span>.<span class=\"title function_\">rangeQueryRecursive</span>(queryLeftIndex, queryRightIndex, middleIndex + <span class=\"number\">1</span>, rightIndex, <span class=\"variable language_\">this</span>.<span class=\"title function_\">getRightChildIndex</span>(position));</span><br><span class=\"line\">    <span class=\"comment\">// 使用提供的操作函数合并左半部分和右半部分的查询结果</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">operation</span>(leftOperationResult, rightOperationResult);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 计算树中左子节点的索引</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">parentIndex</span> - 父节点的索引</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125; - 左子节点的索引</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">getLeftChildIndex</span>(<span class=\"params\">parentIndex</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span> * parentIndex + <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 计算树中右子节点的索引</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">parentIndex</span> - 父节点的索引</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125; - 右子节点的索引</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">getRightChildIndex</span>(<span class=\"params\">parentIndex</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span> * parentIndex + <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"JavaScript Algorithms and Data Structures 源码分析(10) -- 树 Tree","date":"2023-12-14T06:02:56.000Z","_content":"\n# 树\n\n- [二叉搜索树](/2023/12/14/data-structures-011-BinarySearchTree)\n- [AVL 树](/2023/12/14/data-structures-012-AvlTree)\n- [红黑树](/2023/12/14/data-structures-013-RedBlackTree)\n- [线段树](/2023/12/14/data-structures-014-SegmentTree) - with min/max/sum range queries examples\n- [芬威克树/Fenwick Tree](/2023/12/14/data-structures-015-FenwickTree) (Binary Indexed Tree)\n\n在计算机科学中, **树(tree)** 是一种广泛使用的抽象数据类型(ADT)— 或实现此 ADT 的数据结构 — 模拟分层树结构, 具有根节点和有父节点的子树,表示为一组链接节点。\n\n树可以被(本地地)递归定义为一个(始于一个根节点的)节点集, 每个节点都是一个包含了值的数据结构, 除了值,还有该节点的节点引用列表(子节点)一起。\n树的节点之间没有引用重复的约束。\n\n一棵简单的无序树; 在下图中:\n\n标记为 7 的节点具有两个子节点, 标记为 2 和 6;\n一个父节点,标记为 2,作为根节点, 在顶部,没有父节点。\n\n<!-- more -->\n\n![tree](../images/data-structures/tree.jpeg)\n\n## BinaryTreeNode\n\n### constructor\n\n```js\n/**\n * @param {*} [value] - 节点的值.\n */\nconstructor(value = null) {\n  // 初始化左子节点为null\n  this.left = null;\n  // 初始化右子节点为null\n  this.right = null;\n  // 初始化父节点为null\n  this.parent = null;\n  // 将传入的值赋给节点的值\n  this.value = value;\n\n  // 用于存储与节点相关的元信息的哈希表\n  this.meta = new HashTable();\n\n  // 用于比较二叉树节点的比较器\n  this.nodeComparator = new Comparator();\n}\n```\n\n### leftHeight\n\n```js\n/**\n * 这是一个 getter 方法，用于获取节点的左子树的高度\n * @return {number}\n */\nget leftHeight() {\n  // 如果左子树不存在，返回高度为 0\n  if (!this.left) {\n    return 0;\n  }\n\n  // 返回左子树的高度加上 1\n  return this.left.height + 1;\n}\n```\n\n### rightHeight\n\n```js\n/**\n * 这是一个 getter 方法，用于获取节点的右子树的高度\n * @return {number}\n */\nget rightHeight() {\n  // 如果没有右子节点，返回高度为0\n  if (!this.right) {\n    return 0;\n  }\n\n  // 返回右子节点的高度加1\n  return this.right.height + 1;\n}\n```\n\n### height\n\n```js\n/**\n * @return {number}\n */\nget height() {\n  // 返回左子树高度和右子树高度的最大值\n  return Math.max(this.leftHeight, this.rightHeight);\n}\n```\n\n### balanceFactor\n\n```js\n/**\n * @return {number}\n */\nget balanceFactor() {\n  // 返回左子树高度减去右子树高度的差值\n  return this.leftHeight - this.rightHeight;\n}\n```\n\n### uncle\n\n```js\n/**\n * 获取父节点的兄弟节点（如果存在）。\n * @return {BinaryTreeNode} 返回父节点的兄弟节点，如果不存在则返回undefined。\n */\nget uncle() {\n  // 检查当前节点是否有父节点。\n  if (!this.parent) {\n    return undefined;\n  }\n\n  // 检查当前节点是否有祖父节点。\n  if (!this.parent.parent) {\n    return undefined;\n  }\n\n  // 检查祖父节点是否有两个子节点。\n  if (!this.parent.parent.left || !this.parent.parent.right) {\n    return undefined;\n  }\n\n  // 现在我们知道当前节点有祖父节点，并且这个祖父节点有两个子节点。让我们找出谁是叔叔节点。\n  if (this.nodeComparator.equal(this.parent, this.parent.parent.left)) {\n    // 右侧的节点是叔叔节点。\n    return this.parent.parent.right;\n  }\n\n  // 左侧的节点是叔叔节点。\n  return this.parent.parent.left;\n}\n```\n\n### setValue(value)\n\n```js\n/**\n * 设置节点的值\n * @param {*} value - 要设置的值\n * @return {BinaryTreeNode} - 返回当前节点\n */\nsetValue(value) {\n  // 将当前节点的值设置为给定的值\n  this.value = value;\n\n  // 返回当前节点\n  return this;\n}\n```\n\n### setLeft(node)\n\n```js\n/**\n * 将一个新的节点设置为当前节点的左子节点\n * @param {BinaryTreeNode} node\n * @return {BinaryTreeNode}\n */\nsetLeft(node) {\n  // 如果当前节点已经有一个左子节点，则将其父节点设置为null，即将其分离。\n  if (this.left) {\n    this.left.parent = null;\n  }\n\n  // 将新节点设置为当前节点的左子节点。\n  this.left = node;\n\n  // 将当前节点设置为新左子节点的父节点。\n  if (this.left) {\n    this.left.parent = this;\n  }\n\n  // 返回更新后的当前节点。\n  return this;\n}\n```\n\n### setRight(node)\n\n```js\n/**\n * 将一个新的节点设置为当前节点的右子节点\n * @param {BinaryTreeNode} node\n * @return {BinaryTreeNode}\n */\nsetRight(node) {\n  // 重置右节点的父节点，因为右节点将被替换。\n  if (this.right) {\n    this.right.parent = null;\n  }\n\n  // 将新的节点附加到右节点。\n  this.right = node;\n\n  // 将当前节点设置为新右节点的父节点。\n  if (node) {\n    this.right.parent = this;\n  }\n\n  return this;\n}\n```\n\n### removeChild(nodeToRemove)\n\n```js\n/**\n * 从当前节点的子树中移除指定的节点\n * @param {BinaryTreeNode} nodeToRemove\n * @return {boolean}\n */\nremoveChild(nodeToRemove) {\n  // 检查当前节点的左子节点是否存在，并且是否与要移除的节点相等\n  if (this.left && this.nodeComparator.equal(this.left, nodeToRemove)) {\n    // 如果相等，将左子节点设置为null，表示移除该节点\n    this.left = null;\n    // 返回true，表示成功移除了节点\n    return true;\n  }\n\n  // 检查当前节点的右子节点是否存在，并且是否与要移除的节点相等\n  if (this.right && this.nodeComparator.equal(this.right, nodeToRemove)) {\n    // 如果相等，将右子节点设置为null，表示移除该节点\n    this.right = null;\n    // 返回true，表示成功移除了节点\n    return true;\n  }\n\n  // 如果左右子节点都不等于要移除的节点，则返回false，表示未成功移除节点\n  return false;\n}\n```\n\n### replaceChild(nodeToReplace, replacementNode)\n\n```js\n/**\n * 替换二叉树节点的子节点\n * @param {BinaryTreeNode} nodeToReplace 要替换的节点\n * @param {BinaryTreeNode} replacementNode 替换后的节点\n * @return {boolean} 返回替换结果的布尔值\n */\nreplaceChild(nodeToReplace, replacementNode) {\n  // 检查要替换的节点和替换后的节点是否存在\n  if (!nodeToReplace || !replacementNode) {\n    return false;\n  }\n\n  // 如果当前节点存在左子节点，并且要替换的节点与左子节点相等\n  if (this.left && this.nodeComparator.equal(this.left, nodeToReplace)) {\n    // 将左子节点替换为新的节点\n    this.left = replacementNode;\n    return true;\n  }\n\n  // 如果当前节点存在右子节点，并且要替换的节点与右子节点相等\n  if (this.right && this.nodeComparator.equal(this.right, nodeToReplace)) {\n    // 将右子节点替换为新的节点\n    this.right = replacementNode;\n    return true;\n  }\n\n  // 如果没有进行替换操作，则返回false\n  return false;\n}\n```\n\n### traverseInOrder\n\n```js\n/**\n * 执行二叉树的中序遍历\n * @return {*[]}\n */\ntraverseInOrder() {\n  // 创建一个空数组用于存储遍历结果\n  let traverse = [];\n\n  // 如果左子节点存在，则递归调用左子节点的traverseInOrder方法，并将结果追加到traverse数组中\n  if (this.left) {\n    traverse = traverse.concat(this.left.traverseInOrder());\n  }\n\n  // 将当前节点的值添加到traverse数组中，表示访问了当前节点\n  traverse.push(this.value);\n\n  // 如果右子节点存在，则递归调用右子节点的traverseInOrder方法，并将结果追加到traverse数组中\n  if (this.right) {\n    traverse = traverse.concat(this.right.traverseInOrder());\n  }\n\n  // 返回遍历结果数组\n  return traverse;\n}\n```\n\n### toString\n\n```js\n/** 返回对象的字符串表示\n * @return {string}\n */\ntoString() {\n  return this.traverseInOrder().toString();\n}\n```\n","source":"_posts/data-structures-010-Tree.md","raw":"---\ntitle: JavaScript Algorithms and Data Structures 源码分析(10) -- 树 Tree\ndate: 2023-12-14 14:02:56\ntags:\n  - data structures\ncategories:\n  - 数据结构与算法\n---\n\n# 树\n\n- [二叉搜索树](/2023/12/14/data-structures-011-BinarySearchTree)\n- [AVL 树](/2023/12/14/data-structures-012-AvlTree)\n- [红黑树](/2023/12/14/data-structures-013-RedBlackTree)\n- [线段树](/2023/12/14/data-structures-014-SegmentTree) - with min/max/sum range queries examples\n- [芬威克树/Fenwick Tree](/2023/12/14/data-structures-015-FenwickTree) (Binary Indexed Tree)\n\n在计算机科学中, **树(tree)** 是一种广泛使用的抽象数据类型(ADT)— 或实现此 ADT 的数据结构 — 模拟分层树结构, 具有根节点和有父节点的子树,表示为一组链接节点。\n\n树可以被(本地地)递归定义为一个(始于一个根节点的)节点集, 每个节点都是一个包含了值的数据结构, 除了值,还有该节点的节点引用列表(子节点)一起。\n树的节点之间没有引用重复的约束。\n\n一棵简单的无序树; 在下图中:\n\n标记为 7 的节点具有两个子节点, 标记为 2 和 6;\n一个父节点,标记为 2,作为根节点, 在顶部,没有父节点。\n\n<!-- more -->\n\n![tree](../images/data-structures/tree.jpeg)\n\n## BinaryTreeNode\n\n### constructor\n\n```js\n/**\n * @param {*} [value] - 节点的值.\n */\nconstructor(value = null) {\n  // 初始化左子节点为null\n  this.left = null;\n  // 初始化右子节点为null\n  this.right = null;\n  // 初始化父节点为null\n  this.parent = null;\n  // 将传入的值赋给节点的值\n  this.value = value;\n\n  // 用于存储与节点相关的元信息的哈希表\n  this.meta = new HashTable();\n\n  // 用于比较二叉树节点的比较器\n  this.nodeComparator = new Comparator();\n}\n```\n\n### leftHeight\n\n```js\n/**\n * 这是一个 getter 方法，用于获取节点的左子树的高度\n * @return {number}\n */\nget leftHeight() {\n  // 如果左子树不存在，返回高度为 0\n  if (!this.left) {\n    return 0;\n  }\n\n  // 返回左子树的高度加上 1\n  return this.left.height + 1;\n}\n```\n\n### rightHeight\n\n```js\n/**\n * 这是一个 getter 方法，用于获取节点的右子树的高度\n * @return {number}\n */\nget rightHeight() {\n  // 如果没有右子节点，返回高度为0\n  if (!this.right) {\n    return 0;\n  }\n\n  // 返回右子节点的高度加1\n  return this.right.height + 1;\n}\n```\n\n### height\n\n```js\n/**\n * @return {number}\n */\nget height() {\n  // 返回左子树高度和右子树高度的最大值\n  return Math.max(this.leftHeight, this.rightHeight);\n}\n```\n\n### balanceFactor\n\n```js\n/**\n * @return {number}\n */\nget balanceFactor() {\n  // 返回左子树高度减去右子树高度的差值\n  return this.leftHeight - this.rightHeight;\n}\n```\n\n### uncle\n\n```js\n/**\n * 获取父节点的兄弟节点（如果存在）。\n * @return {BinaryTreeNode} 返回父节点的兄弟节点，如果不存在则返回undefined。\n */\nget uncle() {\n  // 检查当前节点是否有父节点。\n  if (!this.parent) {\n    return undefined;\n  }\n\n  // 检查当前节点是否有祖父节点。\n  if (!this.parent.parent) {\n    return undefined;\n  }\n\n  // 检查祖父节点是否有两个子节点。\n  if (!this.parent.parent.left || !this.parent.parent.right) {\n    return undefined;\n  }\n\n  // 现在我们知道当前节点有祖父节点，并且这个祖父节点有两个子节点。让我们找出谁是叔叔节点。\n  if (this.nodeComparator.equal(this.parent, this.parent.parent.left)) {\n    // 右侧的节点是叔叔节点。\n    return this.parent.parent.right;\n  }\n\n  // 左侧的节点是叔叔节点。\n  return this.parent.parent.left;\n}\n```\n\n### setValue(value)\n\n```js\n/**\n * 设置节点的值\n * @param {*} value - 要设置的值\n * @return {BinaryTreeNode} - 返回当前节点\n */\nsetValue(value) {\n  // 将当前节点的值设置为给定的值\n  this.value = value;\n\n  // 返回当前节点\n  return this;\n}\n```\n\n### setLeft(node)\n\n```js\n/**\n * 将一个新的节点设置为当前节点的左子节点\n * @param {BinaryTreeNode} node\n * @return {BinaryTreeNode}\n */\nsetLeft(node) {\n  // 如果当前节点已经有一个左子节点，则将其父节点设置为null，即将其分离。\n  if (this.left) {\n    this.left.parent = null;\n  }\n\n  // 将新节点设置为当前节点的左子节点。\n  this.left = node;\n\n  // 将当前节点设置为新左子节点的父节点。\n  if (this.left) {\n    this.left.parent = this;\n  }\n\n  // 返回更新后的当前节点。\n  return this;\n}\n```\n\n### setRight(node)\n\n```js\n/**\n * 将一个新的节点设置为当前节点的右子节点\n * @param {BinaryTreeNode} node\n * @return {BinaryTreeNode}\n */\nsetRight(node) {\n  // 重置右节点的父节点，因为右节点将被替换。\n  if (this.right) {\n    this.right.parent = null;\n  }\n\n  // 将新的节点附加到右节点。\n  this.right = node;\n\n  // 将当前节点设置为新右节点的父节点。\n  if (node) {\n    this.right.parent = this;\n  }\n\n  return this;\n}\n```\n\n### removeChild(nodeToRemove)\n\n```js\n/**\n * 从当前节点的子树中移除指定的节点\n * @param {BinaryTreeNode} nodeToRemove\n * @return {boolean}\n */\nremoveChild(nodeToRemove) {\n  // 检查当前节点的左子节点是否存在，并且是否与要移除的节点相等\n  if (this.left && this.nodeComparator.equal(this.left, nodeToRemove)) {\n    // 如果相等，将左子节点设置为null，表示移除该节点\n    this.left = null;\n    // 返回true，表示成功移除了节点\n    return true;\n  }\n\n  // 检查当前节点的右子节点是否存在，并且是否与要移除的节点相等\n  if (this.right && this.nodeComparator.equal(this.right, nodeToRemove)) {\n    // 如果相等，将右子节点设置为null，表示移除该节点\n    this.right = null;\n    // 返回true，表示成功移除了节点\n    return true;\n  }\n\n  // 如果左右子节点都不等于要移除的节点，则返回false，表示未成功移除节点\n  return false;\n}\n```\n\n### replaceChild(nodeToReplace, replacementNode)\n\n```js\n/**\n * 替换二叉树节点的子节点\n * @param {BinaryTreeNode} nodeToReplace 要替换的节点\n * @param {BinaryTreeNode} replacementNode 替换后的节点\n * @return {boolean} 返回替换结果的布尔值\n */\nreplaceChild(nodeToReplace, replacementNode) {\n  // 检查要替换的节点和替换后的节点是否存在\n  if (!nodeToReplace || !replacementNode) {\n    return false;\n  }\n\n  // 如果当前节点存在左子节点，并且要替换的节点与左子节点相等\n  if (this.left && this.nodeComparator.equal(this.left, nodeToReplace)) {\n    // 将左子节点替换为新的节点\n    this.left = replacementNode;\n    return true;\n  }\n\n  // 如果当前节点存在右子节点，并且要替换的节点与右子节点相等\n  if (this.right && this.nodeComparator.equal(this.right, nodeToReplace)) {\n    // 将右子节点替换为新的节点\n    this.right = replacementNode;\n    return true;\n  }\n\n  // 如果没有进行替换操作，则返回false\n  return false;\n}\n```\n\n### traverseInOrder\n\n```js\n/**\n * 执行二叉树的中序遍历\n * @return {*[]}\n */\ntraverseInOrder() {\n  // 创建一个空数组用于存储遍历结果\n  let traverse = [];\n\n  // 如果左子节点存在，则递归调用左子节点的traverseInOrder方法，并将结果追加到traverse数组中\n  if (this.left) {\n    traverse = traverse.concat(this.left.traverseInOrder());\n  }\n\n  // 将当前节点的值添加到traverse数组中，表示访问了当前节点\n  traverse.push(this.value);\n\n  // 如果右子节点存在，则递归调用右子节点的traverseInOrder方法，并将结果追加到traverse数组中\n  if (this.right) {\n    traverse = traverse.concat(this.right.traverseInOrder());\n  }\n\n  // 返回遍历结果数组\n  return traverse;\n}\n```\n\n### toString\n\n```js\n/** 返回对象的字符串表示\n * @return {string}\n */\ntoString() {\n  return this.traverseInOrder().toString();\n}\n```\n","slug":"data-structures-010-Tree","published":1,"updated":"2023-12-14T06:31:08.483Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clq4xe1de0021tz2hdt38gqmo","content":"<h1 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h1><ul>\n<li><a href=\"/2023/12/14/data-structures-011-BinarySearchTree\">二叉搜索树</a></li>\n<li><a href=\"/2023/12/14/data-structures-012-AvlTree\">AVL 树</a></li>\n<li><a href=\"/2023/12/14/data-structures-013-RedBlackTree\">红黑树</a></li>\n<li><a href=\"/2023/12/14/data-structures-014-SegmentTree\">线段树</a> - with min&#x2F;max&#x2F;sum range queries examples</li>\n<li><a href=\"/2023/12/14/data-structures-015-FenwickTree\">芬威克树&#x2F;Fenwick Tree</a> (Binary Indexed Tree)</li>\n</ul>\n<p>在计算机科学中, <strong>树(tree)</strong> 是一种广泛使用的抽象数据类型(ADT)— 或实现此 ADT 的数据结构 — 模拟分层树结构, 具有根节点和有父节点的子树,表示为一组链接节点。</p>\n<p>树可以被(本地地)递归定义为一个(始于一个根节点的)节点集, 每个节点都是一个包含了值的数据结构, 除了值,还有该节点的节点引用列表(子节点)一起。<br>树的节点之间没有引用重复的约束。</p>\n<p>一棵简单的无序树; 在下图中:</p>\n<p>标记为 7 的节点具有两个子节点, 标记为 2 和 6;<br>一个父节点,标记为 2,作为根节点, 在顶部,没有父节点。</p>\n<span id=\"more\"></span>\n\n<p><img src=\"/../images/data-structures/tree.jpeg\" alt=\"tree\"></p>\n<h2 id=\"BinaryTreeNode\"><a href=\"#BinaryTreeNode\" class=\"headerlink\" title=\"BinaryTreeNode\"></a>BinaryTreeNode</h2><h3 id=\"constructor-NaN\"><a href=\"#constructor-NaN\" class=\"headerlink\" title=\"constructor\"></a>constructor</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; [value] - 节点的值.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\">value = <span class=\"literal\">null</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化左子节点为null</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">left</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化右子节点为null</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">right</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化父节点为null</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">parent</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 将传入的值赋给节点的值</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 用于存储与节点相关的元信息的哈希表</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">meta</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">HashTable</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 用于比较二叉树节点的比较器</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">nodeComparator</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"leftHeight\"><a href=\"#leftHeight\" class=\"headerlink\" title=\"leftHeight\"></a>leftHeight</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 这是一个 getter 方法，用于获取节点的左子树的高度</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">get</span> <span class=\"title function_\">leftHeight</span>() &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果左子树不存在，返回高度为 0</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回左子树的高度加上 1</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">left</span>.<span class=\"property\">height</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"rightHeight\"><a href=\"#rightHeight\" class=\"headerlink\" title=\"rightHeight\"></a>rightHeight</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 这是一个 getter 方法，用于获取节点的右子树的高度</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">get</span> <span class=\"title function_\">rightHeight</span>() &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果没有右子节点，返回高度为0</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回右子节点的高度加1</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">right</span>.<span class=\"property\">height</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"height\"><a href=\"#height\" class=\"headerlink\" title=\"height\"></a>height</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">get</span> <span class=\"title function_\">height</span>() &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 返回左子树高度和右子树高度的最大值</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">leftHeight</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">rightHeight</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"balanceFactor\"><a href=\"#balanceFactor\" class=\"headerlink\" title=\"balanceFactor\"></a>balanceFactor</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">get</span> <span class=\"title function_\">balanceFactor</span>() &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 返回左子树高度减去右子树高度的差值</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">leftHeight</span> - <span class=\"variable language_\">this</span>.<span class=\"property\">rightHeight</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"uncle\"><a href=\"#uncle\" class=\"headerlink\" title=\"uncle\"></a>uncle</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取父节点的兄弟节点（如果存在）。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">BinaryTreeNode</span>&#125; 返回父节点的兄弟节点，如果不存在则返回undefined。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">get</span> <span class=\"title function_\">uncle</span>() &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 检查当前节点是否有父节点。</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">parent</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 检查当前节点是否有祖父节点。</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">parent</span>.<span class=\"property\">parent</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 检查祖父节点是否有两个子节点。</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">parent</span>.<span class=\"property\">parent</span>.<span class=\"property\">left</span> || !<span class=\"variable language_\">this</span>.<span class=\"property\">parent</span>.<span class=\"property\">parent</span>.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 现在我们知道当前节点有祖父节点，并且这个祖父节点有两个子节点。让我们找出谁是叔叔节点。</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">nodeComparator</span>.<span class=\"title function_\">equal</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">parent</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">parent</span>.<span class=\"property\">parent</span>.<span class=\"property\">left</span>)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 右侧的节点是叔叔节点。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">parent</span>.<span class=\"property\">parent</span>.<span class=\"property\">right</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 左侧的节点是叔叔节点。</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">parent</span>.<span class=\"property\">parent</span>.<span class=\"property\">left</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"setValue-value\"><a href=\"#setValue-value\" class=\"headerlink\" title=\"setValue(value)\"></a>setValue(value)</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 设置节点的值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">value</span> - 要设置的值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">BinaryTreeNode</span>&#125; - 返回当前节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">setValue</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将当前节点的值设置为给定的值</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回当前节点</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"setLeft-node\"><a href=\"#setLeft-node\" class=\"headerlink\" title=\"setLeft(node)\"></a>setLeft(node)</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将一个新的节点设置为当前节点的左子节点</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">BinaryTreeNode</span>&#125; <span class=\"variable\">node</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">BinaryTreeNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">setLeft</span>(<span class=\"params\">node</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果当前节点已经有一个左子节点，则将其父节点设置为null，即将其分离。</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">left</span>.<span class=\"property\">parent</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将新节点设置为当前节点的左子节点。</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">left</span> = node;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将当前节点设置为新左子节点的父节点。</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">left</span>.<span class=\"property\">parent</span> = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回更新后的当前节点。</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"setRight-node\"><a href=\"#setRight-node\" class=\"headerlink\" title=\"setRight(node)\"></a>setRight(node)</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将一个新的节点设置为当前节点的右子节点</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">BinaryTreeNode</span>&#125; <span class=\"variable\">node</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">BinaryTreeNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">setRight</span>(<span class=\"params\">node</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 重置右节点的父节点，因为右节点将被替换。</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">right</span>.<span class=\"property\">parent</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将新的节点附加到右节点。</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">right</span> = node;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将当前节点设置为新右节点的父节点。</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">right</span>.<span class=\"property\">parent</span> = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"removeChild-nodeToRemove\"><a href=\"#removeChild-nodeToRemove\" class=\"headerlink\" title=\"removeChild(nodeToRemove)\"></a>removeChild(nodeToRemove)</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 从当前节点的子树中移除指定的节点</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">BinaryTreeNode</span>&#125; <span class=\"variable\">nodeToRemove</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">removeChild</span>(<span class=\"params\">nodeToRemove</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 检查当前节点的左子节点是否存在，并且是否与要移除的节点相等</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">left</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">nodeComparator</span>.<span class=\"title function_\">equal</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">left</span>, nodeToRemove)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果相等，将左子节点设置为null，表示移除该节点</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">left</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 返回true，表示成功移除了节点</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 检查当前节点的右子节点是否存在，并且是否与要移除的节点相等</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">right</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">nodeComparator</span>.<span class=\"title function_\">equal</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">right</span>, nodeToRemove)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果相等，将右子节点设置为null，表示移除该节点</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">right</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 返回true，表示成功移除了节点</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果左右子节点都不等于要移除的节点，则返回false，表示未成功移除节点</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"replaceChild-nodeToReplace-replacementNode\"><a href=\"#replaceChild-nodeToReplace-replacementNode\" class=\"headerlink\" title=\"replaceChild(nodeToReplace, replacementNode)\"></a>replaceChild(nodeToReplace, replacementNode)</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 替换二叉树节点的子节点</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">BinaryTreeNode</span>&#125; nodeToReplace 要替换的节点</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">BinaryTreeNode</span>&#125; replacementNode 替换后的节点</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125; 返回替换结果的布尔值</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">replaceChild</span>(<span class=\"params\">nodeToReplace, replacementNode</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 检查要替换的节点和替换后的节点是否存在</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!nodeToReplace || !replacementNode) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果当前节点存在左子节点，并且要替换的节点与左子节点相等</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">left</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">nodeComparator</span>.<span class=\"title function_\">equal</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">left</span>, nodeToReplace)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将左子节点替换为新的节点</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">left</span> = replacementNode;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果当前节点存在右子节点，并且要替换的节点与右子节点相等</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">right</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">nodeComparator</span>.<span class=\"title function_\">equal</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">right</span>, nodeToReplace)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将右子节点替换为新的节点</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">right</span> = replacementNode;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果没有进行替换操作，则返回false</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"traverseInOrder\"><a href=\"#traverseInOrder\" class=\"headerlink\" title=\"traverseInOrder\"></a>traverseInOrder</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 执行二叉树的中序遍历</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">*[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">traverseInOrder</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建一个空数组用于存储遍历结果</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> traverse = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果左子节点存在，则递归调用左子节点的traverseInOrder方法，并将结果追加到traverse数组中</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">    traverse = traverse.<span class=\"title function_\">concat</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">left</span>.<span class=\"title function_\">traverseInOrder</span>());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将当前节点的值添加到traverse数组中，表示访问了当前节点</span></span><br><span class=\"line\">  traverse.<span class=\"title function_\">push</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果右子节点存在，则递归调用右子节点的traverseInOrder方法，并将结果追加到traverse数组中</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">    traverse = traverse.<span class=\"title function_\">concat</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">right</span>.<span class=\"title function_\">traverseInOrder</span>());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回遍历结果数组</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> traverse;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"toString-NaN\"><a href=\"#toString-NaN\" class=\"headerlink\" title=\"toString\"></a>toString</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** 返回对象的字符串表示</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">toString</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">traverseInOrder</span>().<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"related_posts":[],"length":1435,"excerpt":"<h1 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h1><ul>\n<li><a href=\"/2023/12/14/data-structures-011-BinarySearchTree\">二叉搜索树</a></li>\n<li><a href=\"/2023/12/14/data-structures-012-AvlTree\">AVL 树</a></li>\n<li><a href=\"/2023/12/14/data-structures-013-RedBlackTree\">红黑树</a></li>\n<li><a href=\"/2023/12/14/data-structures-014-SegmentTree\">线段树</a> - with min&#x2F;max&#x2F;sum range queries examples</li>\n<li><a href=\"/2023/12/14/data-structures-015-FenwickTree\">芬威克树&#x2F;Fenwick Tree</a> (Binary Indexed Tree)</li>\n</ul>\n<p>在计算机科学中, <strong>树(tree)</strong> 是一种广泛使用的抽象数据类型(ADT)— 或实现此 ADT 的数据结构 — 模拟分层树结构, 具有根节点和有父节点的子树,表示为一组链接节点。</p>\n<p>树可以被(本地地)递归定义为一个(始于一个根节点的)节点集, 每个节点都是一个包含了值的数据结构, 除了值,还有该节点的节点引用列表(子节点)一起。<br>树的节点之间没有引用重复的约束。</p>\n<p>一棵简单的无序树; 在下图中:</p>\n<p>标记为 7 的节点具有两个子节点, 标记为 2 和 6;<br>一个父节点,标记为 2,作为根节点, 在顶部,没有父节点。</p>","more":"<p><img src=\"/../images/data-structures/tree.jpeg\" alt=\"tree\"></p>\n<h2 id=\"BinaryTreeNode\"><a href=\"#BinaryTreeNode\" class=\"headerlink\" title=\"BinaryTreeNode\"></a>BinaryTreeNode</h2><h3 id=\"constructor-NaN\"><a href=\"#constructor-NaN\" class=\"headerlink\" title=\"constructor\"></a>constructor</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; [value] - 节点的值.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\">value = <span class=\"literal\">null</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化左子节点为null</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">left</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化右子节点为null</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">right</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化父节点为null</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">parent</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 将传入的值赋给节点的值</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 用于存储与节点相关的元信息的哈希表</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">meta</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">HashTable</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 用于比较二叉树节点的比较器</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">nodeComparator</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"leftHeight\"><a href=\"#leftHeight\" class=\"headerlink\" title=\"leftHeight\"></a>leftHeight</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 这是一个 getter 方法，用于获取节点的左子树的高度</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">get</span> <span class=\"title function_\">leftHeight</span>() &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果左子树不存在，返回高度为 0</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回左子树的高度加上 1</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">left</span>.<span class=\"property\">height</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"rightHeight\"><a href=\"#rightHeight\" class=\"headerlink\" title=\"rightHeight\"></a>rightHeight</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 这是一个 getter 方法，用于获取节点的右子树的高度</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">get</span> <span class=\"title function_\">rightHeight</span>() &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果没有右子节点，返回高度为0</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回右子节点的高度加1</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">right</span>.<span class=\"property\">height</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"height\"><a href=\"#height\" class=\"headerlink\" title=\"height\"></a>height</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">get</span> <span class=\"title function_\">height</span>() &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 返回左子树高度和右子树高度的最大值</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">leftHeight</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">rightHeight</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"balanceFactor\"><a href=\"#balanceFactor\" class=\"headerlink\" title=\"balanceFactor\"></a>balanceFactor</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">get</span> <span class=\"title function_\">balanceFactor</span>() &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 返回左子树高度减去右子树高度的差值</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">leftHeight</span> - <span class=\"variable language_\">this</span>.<span class=\"property\">rightHeight</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"uncle\"><a href=\"#uncle\" class=\"headerlink\" title=\"uncle\"></a>uncle</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取父节点的兄弟节点（如果存在）。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">BinaryTreeNode</span>&#125; 返回父节点的兄弟节点，如果不存在则返回undefined。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">get</span> <span class=\"title function_\">uncle</span>() &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 检查当前节点是否有父节点。</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">parent</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 检查当前节点是否有祖父节点。</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">parent</span>.<span class=\"property\">parent</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 检查祖父节点是否有两个子节点。</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">parent</span>.<span class=\"property\">parent</span>.<span class=\"property\">left</span> || !<span class=\"variable language_\">this</span>.<span class=\"property\">parent</span>.<span class=\"property\">parent</span>.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 现在我们知道当前节点有祖父节点，并且这个祖父节点有两个子节点。让我们找出谁是叔叔节点。</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">nodeComparator</span>.<span class=\"title function_\">equal</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">parent</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">parent</span>.<span class=\"property\">parent</span>.<span class=\"property\">left</span>)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 右侧的节点是叔叔节点。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">parent</span>.<span class=\"property\">parent</span>.<span class=\"property\">right</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 左侧的节点是叔叔节点。</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">parent</span>.<span class=\"property\">parent</span>.<span class=\"property\">left</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"setValue-value\"><a href=\"#setValue-value\" class=\"headerlink\" title=\"setValue(value)\"></a>setValue(value)</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 设置节点的值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">value</span> - 要设置的值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">BinaryTreeNode</span>&#125; - 返回当前节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">setValue</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将当前节点的值设置为给定的值</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回当前节点</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"setLeft-node\"><a href=\"#setLeft-node\" class=\"headerlink\" title=\"setLeft(node)\"></a>setLeft(node)</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将一个新的节点设置为当前节点的左子节点</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">BinaryTreeNode</span>&#125; <span class=\"variable\">node</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">BinaryTreeNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">setLeft</span>(<span class=\"params\">node</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果当前节点已经有一个左子节点，则将其父节点设置为null，即将其分离。</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">left</span>.<span class=\"property\">parent</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将新节点设置为当前节点的左子节点。</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">left</span> = node;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将当前节点设置为新左子节点的父节点。</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">left</span>.<span class=\"property\">parent</span> = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回更新后的当前节点。</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"setRight-node\"><a href=\"#setRight-node\" class=\"headerlink\" title=\"setRight(node)\"></a>setRight(node)</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将一个新的节点设置为当前节点的右子节点</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">BinaryTreeNode</span>&#125; <span class=\"variable\">node</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">BinaryTreeNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">setRight</span>(<span class=\"params\">node</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 重置右节点的父节点，因为右节点将被替换。</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">right</span>.<span class=\"property\">parent</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将新的节点附加到右节点。</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">right</span> = node;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将当前节点设置为新右节点的父节点。</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">right</span>.<span class=\"property\">parent</span> = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"removeChild-nodeToRemove\"><a href=\"#removeChild-nodeToRemove\" class=\"headerlink\" title=\"removeChild(nodeToRemove)\"></a>removeChild(nodeToRemove)</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 从当前节点的子树中移除指定的节点</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">BinaryTreeNode</span>&#125; <span class=\"variable\">nodeToRemove</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">removeChild</span>(<span class=\"params\">nodeToRemove</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 检查当前节点的左子节点是否存在，并且是否与要移除的节点相等</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">left</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">nodeComparator</span>.<span class=\"title function_\">equal</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">left</span>, nodeToRemove)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果相等，将左子节点设置为null，表示移除该节点</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">left</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 返回true，表示成功移除了节点</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 检查当前节点的右子节点是否存在，并且是否与要移除的节点相等</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">right</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">nodeComparator</span>.<span class=\"title function_\">equal</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">right</span>, nodeToRemove)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果相等，将右子节点设置为null，表示移除该节点</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">right</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 返回true，表示成功移除了节点</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果左右子节点都不等于要移除的节点，则返回false，表示未成功移除节点</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"replaceChild-nodeToReplace-replacementNode\"><a href=\"#replaceChild-nodeToReplace-replacementNode\" class=\"headerlink\" title=\"replaceChild(nodeToReplace, replacementNode)\"></a>replaceChild(nodeToReplace, replacementNode)</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 替换二叉树节点的子节点</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">BinaryTreeNode</span>&#125; nodeToReplace 要替换的节点</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">BinaryTreeNode</span>&#125; replacementNode 替换后的节点</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125; 返回替换结果的布尔值</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">replaceChild</span>(<span class=\"params\">nodeToReplace, replacementNode</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 检查要替换的节点和替换后的节点是否存在</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!nodeToReplace || !replacementNode) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果当前节点存在左子节点，并且要替换的节点与左子节点相等</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">left</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">nodeComparator</span>.<span class=\"title function_\">equal</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">left</span>, nodeToReplace)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将左子节点替换为新的节点</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">left</span> = replacementNode;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果当前节点存在右子节点，并且要替换的节点与右子节点相等</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">right</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">nodeComparator</span>.<span class=\"title function_\">equal</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">right</span>, nodeToReplace)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将右子节点替换为新的节点</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">right</span> = replacementNode;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果没有进行替换操作，则返回false</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"traverseInOrder\"><a href=\"#traverseInOrder\" class=\"headerlink\" title=\"traverseInOrder\"></a>traverseInOrder</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 执行二叉树的中序遍历</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">*[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">traverseInOrder</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建一个空数组用于存储遍历结果</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> traverse = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果左子节点存在，则递归调用左子节点的traverseInOrder方法，并将结果追加到traverse数组中</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">    traverse = traverse.<span class=\"title function_\">concat</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">left</span>.<span class=\"title function_\">traverseInOrder</span>());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将当前节点的值添加到traverse数组中，表示访问了当前节点</span></span><br><span class=\"line\">  traverse.<span class=\"title function_\">push</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果右子节点存在，则递归调用右子节点的traverseInOrder方法，并将结果追加到traverse数组中</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">    traverse = traverse.<span class=\"title function_\">concat</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">right</span>.<span class=\"title function_\">traverseInOrder</span>());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回遍历结果数组</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> traverse;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"toString-NaN\"><a href=\"#toString-NaN\" class=\"headerlink\" title=\"toString\"></a>toString</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** 返回对象的字符串表示</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">toString</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">traverseInOrder</span>().<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"记录使用Hexo搭建个人博客的过程","date":"2023-09-01T14:09:52.000Z","_content":"\n## 安装 hexo\n\n### 全局安装\n\n```sh\nnpm install -g hexo-cli\n```\n\n### 局部安装\n\n```sh\nnpm install hexo\n```\n\n## 创建项目\n\n```sh\nhexo init <folder>\ncd <folder>\nnpm install\n```\n\n创建完项目后, 包括以下文件:\n\n```\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n```\n\n## 运行项目\n\n```sh\nnpx hexo server # 局部创建使用npx\n```\n\n<!-- more -->\n\n## 安装[hexo-next 主题](https://github.com/next-theme/hexo-theme-next)\n\n### 方式 1 使用 npm 安装\n\n```sh\nnpm install hexo-theme-next\n```\n\n### 方式 2 使用 git 安装\n\n```sh\ngit clone https://github.com/next-theme/hexo-theme-next themes/next\n```\n\n### 修改主题\n\n修改`_config.yml`文件中的:\n\n```yml\ntheme: next\n```\n\n### 使用[本地配置](https://theme-next.js.org/docs/getting-started/configuration)\n\n1. 在项目目录下创建文件`_config.next.yml`\n2. 把依赖配置内容拷贝到`_config.next.yml`:\n   ```sh\n   # 使用 npm 安装\n   cp node_modules/hexo-theme-next/_config.yml _config.next.yml\n   # 使用 Git 安装\n   cp themes/next/_config.yml _config.next.yml\n   ```\n\n### 清理缓存后重新运行调试\n\n注意: 修改`_config.yml`或者`_config.next.yml`配置文件后, 需要使用`hexo clean`清理一下再运行, 修改后的配置才会生效.\n\n```sh\nnpx hexo clean && npx hexo s\n```\n\n## 添加 Local Search 本地搜索\n\n### 安装插件 hexo-generator-searchdb\n\n```sh\nnpm install hexo-generator-searchdb --save\n```\n\n### 修改 \\_config.yml 配置文件\n\n在末尾添加\n\n```yml\nsearch:\n  path: search.xml\n  field: post\n  format: html\n  limit: 10000\n```\n\n### 修改 \\_config.next.yml 配置文件\n\n```yml\nlocal_search:\n  enable: true\n```\n\n## 增加文章字数统计和阅读时长\n\n### 安装插件 hexo-word-counter\n\n```sh\nnpm install hexo-word-counter --save\n```\n\n### 修改 \\_config.yml 配置文件\n\n在末尾添加\n\n```yml\n# 增加文章字数统计及阅读时长功能\nsymbols_count_time:\n  symbols: true\n  time: true\n  total_symbols: true\n  total_time: true\n  exclude_codeblock: false\n  wpm: 275\n  suffix: \"mins.\"\n```\n\n## 修改语言为中文\n\n修改`_config.yml`文件\n\n```yml\nlanguage: zh-CN # zh-CN 对应 themes/next/languages/zh-CN.yml\n```\n\n## 添加分类\n\n### 生成分类页\n\n```sh\nhexo new page categories\n```\n\n创建完成后会在`source`目录下生成 `categories/index.md` 文件.\n\n```yml\n---\ntitle: categories\ndate: 2023-09-02 15:36:39\n---\n```\n\n### 添加 type 属性\n\n在`categories/index.md`文件中`date`下面添加`type`属性\n\n```yml\n---\ntitle: categories\ndate: 2023-09-02 15:36:39\ntype: \"categories\"\n---\n```\n\n### 将文章添加到分类\n\n打开想要分类的文章, 添加`categories`属性\n\n```yml\n---\ntitle: Hexo 使用\ndate: 2023-09-01 22:09:52\ncategories:\n  - 其它技术\n---\n```\n\n### 打开分类配置\n\n在`_config.next.yml`中打开分类配置\n\n```yml\nmenu:\n  home: / || fa fa-home\n  #about: /about/ || fa fa-user\n  # tags: /tags/ || fa fa-tags\n  categories: /categories/ || fa fa-th\n  archives: /archives/ || fa fa-archive\n  #schedule: /schedule/ || fa fa-calendar\n  #sitemap: /sitemap.xml || fa fa-sitemap\n  #commonweal: /404/ || fa fa-heartbeat\n```\n\n## 添加标签\n\n### 生成标签页\n\n```sh\nhexo new page tags\n```\n\n创建完成后会在`source`目录下生成 `tags/index.md`文件\n\n```yml\ntitle: tags\ndate: 2023-09-02 15:50:52\n```\n\n### 添加 type 属性\n\n在`tags/index.md`文件中`date`下面添加`type`属性\n\n```yml\ntitle: tags\ndate: 2023-09-02 15:50:52\ntype: \"tags\"\n```\n\n### 给文章设置标签\n\n打开想要设置标签的文章, 添加`tags`属性\n\n```yml\n---\ntitle: Hexo 使用\ndate: 2023-09-01 22:09:52\ncategories:\n  - 其它技术\ntags:\n  - hexo\n---\n```\n\n### 打开标签配置\n\n在`_config.next.yml`中打开标签配置\n\n```yml\nmenu:\n  home: / || fa fa-home\n  #about: /about/ || fa fa-user\n  tags: /tags/ || fa fa-tags\n  categories: /categories/ || fa fa-th\n  archives: /archives/ || fa fa-archive\n  #schedule: /schedule/ || fa fa-calendar\n  #sitemap: /sitemap.xml || fa fa-sitemap\n  #commonweal: /404/ || fa fa-heartbeat\n```\n\n## 添加关于\n\n### 生成关于页面\n\n```sh\nhexo new page about\n```\n\n创建完成后会在`source`目录下生成`about/index.md`文件\n\n```yml\n---\ntitle: about\ndate: 2023-09-02 16:04:00\n---\n```\n\n可以 index.md 文件里添加关于的内容信息.\n\n### 打开关于配置\n\n```yml\nmenu:\n  home: / || fa fa-home\n  about: /about/ || fa fa-user\n  tags: /tags/ || fa fa-tags\n  categories: /categories/ || fa fa-th\n  archives: /archives/ || fa fa-archive\n  #schedule: /schedule/ || fa fa-calendar\n  #sitemap: /sitemap.xml || fa fa-sitemap\n  #commonweal: /404/ || fa fa-heartbeat\n```\n\n## [创建新文章](https://hexo.io/zh-cn/docs/writing.html)\n\n```sh\nhexo new post <title>\n```\n\n执行以上指令后, 会在 `source/_posts/`文件夹下生成`<title>.md`文件, 支持使用`markdown`语法来书写文章.\n\n## 启动本地服务器预览\n\n```sh\nhexo server\n# 或者\nyarn server\n```\n\n默认情况下，访问网址为：`http://localhost:4000/`\n\n## 生成静态文件\n\n```sh\nhexo generate\n# 或者\nyarn build\n```\n\n执行以上指令后, 会在 `public`文件夹下生成静态文件.\n\n## 部署到个人服务器\n\n将生成后的文件部署到个人服务器. 我使用的是个人阿里云轻量服务器, 在个人服务器操作过程如下:\n\n### 安装 `Docker`\n\n```sh\n# 1. yum 包更新到最新\nyum update\n# 2. 安装需要的软件包, yum-util提供yum-config-manager功能, 另外两个是devicemapper驱动依赖的\nyum install -y yum-utils device-mapper-persistent-data lvm2\n# 3. 设置yum源\nyum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n# 4. 安装docker, 出现输入界面都按y\nyum install -y docker-ce\n# 5. 查看docker版本,\ndocker -v\n# 6. 开启docker服务\nservice docker start\n```\n\n第四步报错:\n\n```\n  - Status code: 404 for https://download.docker.com/linux/centos/3/x86_64/stable/repodata/repomd.xml (IP: 13.32.50.112)\n错误：为仓库 'docker-ce-stable' 下载元数据失败 : Cannot download repomd.xml: Cannot download repodata/repomd.xml: All mirrors were tried\n```\n\n[解决办法](https://forums.docker.com/t/docker-ce-stable-x86-64-repo-not-available-https-error-404-not-found-https-download-docker-com-linux-centos-7server-x86-64-stable-repodata-repomd-xml/98965/4):\n修改 /etc/yum.repos.d/docker-ce.repo\n\n```sh\nvi /etc/yum.repos.d/docker-ce.repo\n```\n\n把`docker-ce-stable`的`baseurl`改为:\n\n```\nhttps://download.docker.com/linux/centos/7/$basearch/stable\n```\n\n在执行安装 `docker` 命令\n\n```sh\nyum install -y docker-ce\n```\n\n#### 启动 docker 服务\n\n```sh\nsystemctl start docker\n```\n\n#### 开机启动 docker 服务\n\n```sh\nsystemctl enable docker\n```\n\n### 下载 `Nginx` 镜像\n\n```sh\ndocker pull nginx\n```\n\n### 创建 `Nginx` 容器, 设置端口映射, 并使用数据卷挂载目录\n\n```sh\n docker run -d --name mynginx \\\n -p 80:80 \\\n --mount type=bind,source=/root/mynginx/conf/nginx.conf,target=/etc/nginx/nginx.conf \\\n --mount type=bind,source=/root/mynginx/conf/http-8080.conf,target=/etc/nginx/conf.d/http-8080.conf \\\n --mount type=bind,source=/root/mynginx/logs,target=/var/log/nginx/logs \\\n --mount type=bind,source=/root/mynginx/html,target=/usr/share/nginx/html \\\n nginx\n```\n\n### 配置 `Nginx`\n\n### 重启 `Nginx`\n\n```sh\ndocker restart mynginx\n```\n\n---\n\n参考文档:\n[hexo 官方英文文档](https://hexo.io/docs/)\n[hexo 官方中文文档](https://hexo.io/zh-cn/docs/)\n[hexo-next 文档](https://theme-next.js.org/pisces/docs/getting-started/)\n","source":"_posts/hexo-use.md","raw":"---\ntitle: 记录使用Hexo搭建个人博客的过程\ndate: 2023-09-01 22:09:52\ncategories:\n  - 其它技术\ntags:\n  - hexo\n---\n\n## 安装 hexo\n\n### 全局安装\n\n```sh\nnpm install -g hexo-cli\n```\n\n### 局部安装\n\n```sh\nnpm install hexo\n```\n\n## 创建项目\n\n```sh\nhexo init <folder>\ncd <folder>\nnpm install\n```\n\n创建完项目后, 包括以下文件:\n\n```\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n```\n\n## 运行项目\n\n```sh\nnpx hexo server # 局部创建使用npx\n```\n\n<!-- more -->\n\n## 安装[hexo-next 主题](https://github.com/next-theme/hexo-theme-next)\n\n### 方式 1 使用 npm 安装\n\n```sh\nnpm install hexo-theme-next\n```\n\n### 方式 2 使用 git 安装\n\n```sh\ngit clone https://github.com/next-theme/hexo-theme-next themes/next\n```\n\n### 修改主题\n\n修改`_config.yml`文件中的:\n\n```yml\ntheme: next\n```\n\n### 使用[本地配置](https://theme-next.js.org/docs/getting-started/configuration)\n\n1. 在项目目录下创建文件`_config.next.yml`\n2. 把依赖配置内容拷贝到`_config.next.yml`:\n   ```sh\n   # 使用 npm 安装\n   cp node_modules/hexo-theme-next/_config.yml _config.next.yml\n   # 使用 Git 安装\n   cp themes/next/_config.yml _config.next.yml\n   ```\n\n### 清理缓存后重新运行调试\n\n注意: 修改`_config.yml`或者`_config.next.yml`配置文件后, 需要使用`hexo clean`清理一下再运行, 修改后的配置才会生效.\n\n```sh\nnpx hexo clean && npx hexo s\n```\n\n## 添加 Local Search 本地搜索\n\n### 安装插件 hexo-generator-searchdb\n\n```sh\nnpm install hexo-generator-searchdb --save\n```\n\n### 修改 \\_config.yml 配置文件\n\n在末尾添加\n\n```yml\nsearch:\n  path: search.xml\n  field: post\n  format: html\n  limit: 10000\n```\n\n### 修改 \\_config.next.yml 配置文件\n\n```yml\nlocal_search:\n  enable: true\n```\n\n## 增加文章字数统计和阅读时长\n\n### 安装插件 hexo-word-counter\n\n```sh\nnpm install hexo-word-counter --save\n```\n\n### 修改 \\_config.yml 配置文件\n\n在末尾添加\n\n```yml\n# 增加文章字数统计及阅读时长功能\nsymbols_count_time:\n  symbols: true\n  time: true\n  total_symbols: true\n  total_time: true\n  exclude_codeblock: false\n  wpm: 275\n  suffix: \"mins.\"\n```\n\n## 修改语言为中文\n\n修改`_config.yml`文件\n\n```yml\nlanguage: zh-CN # zh-CN 对应 themes/next/languages/zh-CN.yml\n```\n\n## 添加分类\n\n### 生成分类页\n\n```sh\nhexo new page categories\n```\n\n创建完成后会在`source`目录下生成 `categories/index.md` 文件.\n\n```yml\n---\ntitle: categories\ndate: 2023-09-02 15:36:39\n---\n```\n\n### 添加 type 属性\n\n在`categories/index.md`文件中`date`下面添加`type`属性\n\n```yml\n---\ntitle: categories\ndate: 2023-09-02 15:36:39\ntype: \"categories\"\n---\n```\n\n### 将文章添加到分类\n\n打开想要分类的文章, 添加`categories`属性\n\n```yml\n---\ntitle: Hexo 使用\ndate: 2023-09-01 22:09:52\ncategories:\n  - 其它技术\n---\n```\n\n### 打开分类配置\n\n在`_config.next.yml`中打开分类配置\n\n```yml\nmenu:\n  home: / || fa fa-home\n  #about: /about/ || fa fa-user\n  # tags: /tags/ || fa fa-tags\n  categories: /categories/ || fa fa-th\n  archives: /archives/ || fa fa-archive\n  #schedule: /schedule/ || fa fa-calendar\n  #sitemap: /sitemap.xml || fa fa-sitemap\n  #commonweal: /404/ || fa fa-heartbeat\n```\n\n## 添加标签\n\n### 生成标签页\n\n```sh\nhexo new page tags\n```\n\n创建完成后会在`source`目录下生成 `tags/index.md`文件\n\n```yml\ntitle: tags\ndate: 2023-09-02 15:50:52\n```\n\n### 添加 type 属性\n\n在`tags/index.md`文件中`date`下面添加`type`属性\n\n```yml\ntitle: tags\ndate: 2023-09-02 15:50:52\ntype: \"tags\"\n```\n\n### 给文章设置标签\n\n打开想要设置标签的文章, 添加`tags`属性\n\n```yml\n---\ntitle: Hexo 使用\ndate: 2023-09-01 22:09:52\ncategories:\n  - 其它技术\ntags:\n  - hexo\n---\n```\n\n### 打开标签配置\n\n在`_config.next.yml`中打开标签配置\n\n```yml\nmenu:\n  home: / || fa fa-home\n  #about: /about/ || fa fa-user\n  tags: /tags/ || fa fa-tags\n  categories: /categories/ || fa fa-th\n  archives: /archives/ || fa fa-archive\n  #schedule: /schedule/ || fa fa-calendar\n  #sitemap: /sitemap.xml || fa fa-sitemap\n  #commonweal: /404/ || fa fa-heartbeat\n```\n\n## 添加关于\n\n### 生成关于页面\n\n```sh\nhexo new page about\n```\n\n创建完成后会在`source`目录下生成`about/index.md`文件\n\n```yml\n---\ntitle: about\ndate: 2023-09-02 16:04:00\n---\n```\n\n可以 index.md 文件里添加关于的内容信息.\n\n### 打开关于配置\n\n```yml\nmenu:\n  home: / || fa fa-home\n  about: /about/ || fa fa-user\n  tags: /tags/ || fa fa-tags\n  categories: /categories/ || fa fa-th\n  archives: /archives/ || fa fa-archive\n  #schedule: /schedule/ || fa fa-calendar\n  #sitemap: /sitemap.xml || fa fa-sitemap\n  #commonweal: /404/ || fa fa-heartbeat\n```\n\n## [创建新文章](https://hexo.io/zh-cn/docs/writing.html)\n\n```sh\nhexo new post <title>\n```\n\n执行以上指令后, 会在 `source/_posts/`文件夹下生成`<title>.md`文件, 支持使用`markdown`语法来书写文章.\n\n## 启动本地服务器预览\n\n```sh\nhexo server\n# 或者\nyarn server\n```\n\n默认情况下，访问网址为：`http://localhost:4000/`\n\n## 生成静态文件\n\n```sh\nhexo generate\n# 或者\nyarn build\n```\n\n执行以上指令后, 会在 `public`文件夹下生成静态文件.\n\n## 部署到个人服务器\n\n将生成后的文件部署到个人服务器. 我使用的是个人阿里云轻量服务器, 在个人服务器操作过程如下:\n\n### 安装 `Docker`\n\n```sh\n# 1. yum 包更新到最新\nyum update\n# 2. 安装需要的软件包, yum-util提供yum-config-manager功能, 另外两个是devicemapper驱动依赖的\nyum install -y yum-utils device-mapper-persistent-data lvm2\n# 3. 设置yum源\nyum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n# 4. 安装docker, 出现输入界面都按y\nyum install -y docker-ce\n# 5. 查看docker版本,\ndocker -v\n# 6. 开启docker服务\nservice docker start\n```\n\n第四步报错:\n\n```\n  - Status code: 404 for https://download.docker.com/linux/centos/3/x86_64/stable/repodata/repomd.xml (IP: 13.32.50.112)\n错误：为仓库 'docker-ce-stable' 下载元数据失败 : Cannot download repomd.xml: Cannot download repodata/repomd.xml: All mirrors were tried\n```\n\n[解决办法](https://forums.docker.com/t/docker-ce-stable-x86-64-repo-not-available-https-error-404-not-found-https-download-docker-com-linux-centos-7server-x86-64-stable-repodata-repomd-xml/98965/4):\n修改 /etc/yum.repos.d/docker-ce.repo\n\n```sh\nvi /etc/yum.repos.d/docker-ce.repo\n```\n\n把`docker-ce-stable`的`baseurl`改为:\n\n```\nhttps://download.docker.com/linux/centos/7/$basearch/stable\n```\n\n在执行安装 `docker` 命令\n\n```sh\nyum install -y docker-ce\n```\n\n#### 启动 docker 服务\n\n```sh\nsystemctl start docker\n```\n\n#### 开机启动 docker 服务\n\n```sh\nsystemctl enable docker\n```\n\n### 下载 `Nginx` 镜像\n\n```sh\ndocker pull nginx\n```\n\n### 创建 `Nginx` 容器, 设置端口映射, 并使用数据卷挂载目录\n\n```sh\n docker run -d --name mynginx \\\n -p 80:80 \\\n --mount type=bind,source=/root/mynginx/conf/nginx.conf,target=/etc/nginx/nginx.conf \\\n --mount type=bind,source=/root/mynginx/conf/http-8080.conf,target=/etc/nginx/conf.d/http-8080.conf \\\n --mount type=bind,source=/root/mynginx/logs,target=/var/log/nginx/logs \\\n --mount type=bind,source=/root/mynginx/html,target=/usr/share/nginx/html \\\n nginx\n```\n\n### 配置 `Nginx`\n\n### 重启 `Nginx`\n\n```sh\ndocker restart mynginx\n```\n\n---\n\n参考文档:\n[hexo 官方英文文档](https://hexo.io/docs/)\n[hexo 官方中文文档](https://hexo.io/zh-cn/docs/)\n[hexo-next 文档](https://theme-next.js.org/pisces/docs/getting-started/)\n","slug":"hexo-use","published":1,"updated":"2023-09-03T12:50:29.010Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clq4xe1de0024tz2hepsvf1hf","content":"<h2 id=\"安装-hexo\"><a href=\"#安装-hexo\" class=\"headerlink\" title=\"安装 hexo\"></a>安装 hexo</h2><h3 id=\"全局安装\"><a href=\"#全局安装\" class=\"headerlink\" title=\"全局安装\"></a>全局安装</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"局部安装\"><a href=\"#局部安装\" class=\"headerlink\" title=\"局部安装\"></a>局部安装</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init &lt;folder&gt;</span><br><span class=\"line\"><span class=\"built_in\">cd</span> &lt;folder&gt;</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<p>创建完项目后, 包括以下文件:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── source</span><br><span class=\"line\">|   ├── _drafts</span><br><span class=\"line\">|   └── _posts</span><br><span class=\"line\">└── themes</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运行项目\"><a href=\"#运行项目\" class=\"headerlink\" title=\"运行项目\"></a>运行项目</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx hexo server <span class=\"comment\"># 局部创建使用npx</span></span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"安装hexo-next-主题\"><a href=\"#安装hexo-next-主题\" class=\"headerlink\" title=\"安装hexo-next 主题\"></a>安装<a href=\"https://github.com/next-theme/hexo-theme-next\">hexo-next 主题</a></h2><h3 id=\"方式-1-使用-npm-安装\"><a href=\"#方式-1-使用-npm-安装\" class=\"headerlink\" title=\"方式 1 使用 npm 安装\"></a>方式 1 使用 npm 安装</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-theme-next</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方式-2-使用-git-安装\"><a href=\"#方式-2-使用-git-安装\" class=\"headerlink\" title=\"方式 2 使用 git 安装\"></a>方式 2 使用 git 安装</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改主题\"><a href=\"#修改主题\" class=\"headerlink\" title=\"修改主题\"></a>修改主题</h3><p>修改<code>_config.yml</code>文件中的:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">next</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用本地配置\"><a href=\"#使用本地配置\" class=\"headerlink\" title=\"使用本地配置\"></a>使用<a href=\"https://theme-next.js.org/docs/getting-started/configuration\">本地配置</a></h3><ol>\n<li>在项目目录下创建文件<code>_config.next.yml</code></li>\n<li>把依赖配置内容拷贝到<code>_config.next.yml</code>:<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用 npm 安装</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> node_modules/hexo-theme-next/_config.yml _config.next.yml</span><br><span class=\"line\"><span class=\"comment\"># 使用 Git 安装</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> themes/next/_config.yml _config.next.yml</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"清理缓存后重新运行调试\"><a href=\"#清理缓存后重新运行调试\" class=\"headerlink\" title=\"清理缓存后重新运行调试\"></a>清理缓存后重新运行调试</h3><p>注意: 修改<code>_config.yml</code>或者<code>_config.next.yml</code>配置文件后, 需要使用<code>hexo clean</code>清理一下再运行, 修改后的配置才会生效.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx hexo clean &amp;&amp; npx hexo s</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加-Local-Search-本地搜索\"><a href=\"#添加-Local-Search-本地搜索\" class=\"headerlink\" title=\"添加 Local Search 本地搜索\"></a>添加 Local Search 本地搜索</h2><h3 id=\"安装插件-hexo-generator-searchdb\"><a href=\"#安装插件-hexo-generator-searchdb\" class=\"headerlink\" title=\"安装插件 hexo-generator-searchdb\"></a>安装插件 hexo-generator-searchdb</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改-config-yml-配置文件\"><a href=\"#修改-config-yml-配置文件\" class=\"headerlink\" title=\"修改 _config.yml 配置文件\"></a>修改 _config.yml 配置文件</h3><p>在末尾添加</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">search:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">search.xml</span></span><br><span class=\"line\">  <span class=\"attr\">field:</span> <span class=\"string\">post</span></span><br><span class=\"line\">  <span class=\"attr\">format:</span> <span class=\"string\">html</span></span><br><span class=\"line\">  <span class=\"attr\">limit:</span> <span class=\"number\">10000</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改-config-next-yml-配置文件\"><a href=\"#修改-config-next-yml-配置文件\" class=\"headerlink\" title=\"修改 _config.next.yml 配置文件\"></a>修改 _config.next.yml 配置文件</h3><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">local_search:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"增加文章字数统计和阅读时长\"><a href=\"#增加文章字数统计和阅读时长\" class=\"headerlink\" title=\"增加文章字数统计和阅读时长\"></a>增加文章字数统计和阅读时长</h2><h3 id=\"安装插件-hexo-word-counter\"><a href=\"#安装插件-hexo-word-counter\" class=\"headerlink\" title=\"安装插件 hexo-word-counter\"></a>安装插件 hexo-word-counter</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-word-counter --save</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改-config-yml-配置文件-1\"><a href=\"#修改-config-yml-配置文件-1\" class=\"headerlink\" title=\"修改 _config.yml 配置文件\"></a>修改 _config.yml 配置文件</h3><p>在末尾添加</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 增加文章字数统计及阅读时长功能</span></span><br><span class=\"line\"><span class=\"attr\">symbols_count_time:</span></span><br><span class=\"line\">  <span class=\"attr\">symbols:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">time:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">total_symbols:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">total_time:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">exclude_codeblock:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">wpm:</span> <span class=\"number\">275</span></span><br><span class=\"line\">  <span class=\"attr\">suffix:</span> <span class=\"string\">&quot;mins.&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改语言为中文\"><a href=\"#修改语言为中文\" class=\"headerlink\" title=\"修改语言为中文\"></a>修改语言为中文</h2><p>修改<code>_config.yml</code>文件</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">zh-CN</span> <span class=\"comment\"># zh-CN 对应 themes/next/languages/zh-CN.yml</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加分类\"><a href=\"#添加分类\" class=\"headerlink\" title=\"添加分类\"></a>添加分类</h2><h3 id=\"生成分类页\"><a href=\"#生成分类页\" class=\"headerlink\" title=\"生成分类页\"></a>生成分类页</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page categories</span><br></pre></td></tr></table></figure>\n\n<p>创建完成后会在<code>source</code>目录下生成 <code>categories/index.md</code> 文件.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">categories</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2023-09-02 15:36:39</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加-type-属性\"><a href=\"#添加-type-属性\" class=\"headerlink\" title=\"添加 type 属性\"></a>添加 type 属性</h3><p>在<code>categories/index.md</code>文件中<code>date</code>下面添加<code>type</code>属性</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">categories</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2023-09-02 15:36:39</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">&quot;categories&quot;</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"将文章添加到分类\"><a href=\"#将文章添加到分类\" class=\"headerlink\" title=\"将文章添加到分类\"></a>将文章添加到分类</h3><p>打开想要分类的文章, 添加<code>categories</code>属性</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">Hexo</span> <span class=\"string\">使用</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2023-09-01 22:09:52</span></span><br><span class=\"line\"><span class=\"attr\">categories:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">其它技术</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"打开分类配置\"><a href=\"#打开分类配置\" class=\"headerlink\" title=\"打开分类配置\"></a>打开分类配置</h3><p>在<code>_config.next.yml</code>中打开分类配置</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-home</span></span><br><span class=\"line\">  <span class=\"comment\">#about: /about/ || fa fa-user</span></span><br><span class=\"line\">  <span class=\"comment\"># tags: /tags/ || fa fa-tags</span></span><br><span class=\"line\">  <span class=\"attr\">categories:</span> <span class=\"string\">/categories/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-th</span></span><br><span class=\"line\">  <span class=\"attr\">archives:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-archive</span></span><br><span class=\"line\">  <span class=\"comment\">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class=\"line\">  <span class=\"comment\">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class=\"line\">  <span class=\"comment\">#commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加标签\"><a href=\"#添加标签\" class=\"headerlink\" title=\"添加标签\"></a>添加标签</h2><h3 id=\"生成标签页\"><a href=\"#生成标签页\" class=\"headerlink\" title=\"生成标签页\"></a>生成标签页</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page tags</span><br></pre></td></tr></table></figure>\n\n<p>创建完成后会在<code>source</code>目录下生成 <code>tags/index.md</code>文件</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">tags</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2023-09-02 15:50:52</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加-type-属性-1\"><a href=\"#添加-type-属性-1\" class=\"headerlink\" title=\"添加 type 属性\"></a>添加 type 属性</h3><p>在<code>tags/index.md</code>文件中<code>date</code>下面添加<code>type</code>属性</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">tags</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2023-09-02 15:50:52</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">&quot;tags&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"给文章设置标签\"><a href=\"#给文章设置标签\" class=\"headerlink\" title=\"给文章设置标签\"></a>给文章设置标签</h3><p>打开想要设置标签的文章, 添加<code>tags</code>属性</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">Hexo</span> <span class=\"string\">使用</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2023-09-01 22:09:52</span></span><br><span class=\"line\"><span class=\"attr\">categories:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">其它技术</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">hexo</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"打开标签配置\"><a href=\"#打开标签配置\" class=\"headerlink\" title=\"打开标签配置\"></a>打开标签配置</h3><p>在<code>_config.next.yml</code>中打开标签配置</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-home</span></span><br><span class=\"line\">  <span class=\"comment\">#about: /about/ || fa fa-user</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-tags</span></span><br><span class=\"line\">  <span class=\"attr\">categories:</span> <span class=\"string\">/categories/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-th</span></span><br><span class=\"line\">  <span class=\"attr\">archives:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-archive</span></span><br><span class=\"line\">  <span class=\"comment\">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class=\"line\">  <span class=\"comment\">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class=\"line\">  <span class=\"comment\">#commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加关于\"><a href=\"#添加关于\" class=\"headerlink\" title=\"添加关于\"></a>添加关于</h2><h3 id=\"生成关于页面\"><a href=\"#生成关于页面\" class=\"headerlink\" title=\"生成关于页面\"></a>生成关于页面</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page about</span><br></pre></td></tr></table></figure>\n\n<p>创建完成后会在<code>source</code>目录下生成<code>about/index.md</code>文件</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">about</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2023-09-02 16:04:00</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<p>可以 index.md 文件里添加关于的内容信息.</p>\n<h3 id=\"打开关于配置\"><a href=\"#打开关于配置\" class=\"headerlink\" title=\"打开关于配置\"></a>打开关于配置</h3><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-home</span></span><br><span class=\"line\">  <span class=\"attr\">about:</span> <span class=\"string\">/about/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-user</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-tags</span></span><br><span class=\"line\">  <span class=\"attr\">categories:</span> <span class=\"string\">/categories/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-th</span></span><br><span class=\"line\">  <span class=\"attr\">archives:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-archive</span></span><br><span class=\"line\">  <span class=\"comment\">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class=\"line\">  <span class=\"comment\">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class=\"line\">  <span class=\"comment\">#commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建新文章\"><a href=\"#创建新文章\" class=\"headerlink\" title=\"创建新文章\"></a><a href=\"https://hexo.io/zh-cn/docs/writing.html\">创建新文章</a></h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post &lt;title&gt;</span><br></pre></td></tr></table></figure>\n\n<p>执行以上指令后, 会在 <code>source/_posts/</code>文件夹下生成<code>&lt;title&gt;.md</code>文件, 支持使用<code>markdown</code>语法来书写文章.</p>\n<h2 id=\"启动本地服务器预览\"><a href=\"#启动本地服务器预览\" class=\"headerlink\" title=\"启动本地服务器预览\"></a>启动本地服务器预览</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">yarn server</span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，访问网址为：<code>http://localhost:4000/</code></p>\n<h2 id=\"生成静态文件\"><a href=\"#生成静态文件\" class=\"headerlink\" title=\"生成静态文件\"></a>生成静态文件</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">yarn build</span><br></pre></td></tr></table></figure>\n\n<p>执行以上指令后, 会在 <code>public</code>文件夹下生成静态文件.</p>\n<h2 id=\"部署到个人服务器\"><a href=\"#部署到个人服务器\" class=\"headerlink\" title=\"部署到个人服务器\"></a>部署到个人服务器</h2><p>将生成后的文件部署到个人服务器. 我使用的是个人阿里云轻量服务器, 在个人服务器操作过程如下:</p>\n<h3 id=\"安装-Docker\"><a href=\"#安装-Docker\" class=\"headerlink\" title=\"安装 Docker\"></a>安装 <code>Docker</code></h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. yum 包更新到最新</span></span><br><span class=\"line\">yum update</span><br><span class=\"line\"><span class=\"comment\"># 2. 安装需要的软件包, yum-util提供yum-config-manager功能, 另外两个是devicemapper驱动依赖的</span></span><br><span class=\"line\">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class=\"line\"><span class=\"comment\"># 3. 设置yum源</span></span><br><span class=\"line\">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class=\"line\"><span class=\"comment\"># 4. 安装docker, 出现输入界面都按y</span></span><br><span class=\"line\">yum install -y docker-ce</span><br><span class=\"line\"><span class=\"comment\"># 5. 查看docker版本,</span></span><br><span class=\"line\">docker -v</span><br><span class=\"line\"><span class=\"comment\"># 6. 开启docker服务</span></span><br><span class=\"line\">service docker start</span><br></pre></td></tr></table></figure>\n\n<p>第四步报错:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  - Status code: 404 for https://download.docker.com/linux/centos/3/x86_64/stable/repodata/repomd.xml (IP: 13.32.50.112)</span><br><span class=\"line\">错误：为仓库 &#x27;docker-ce-stable&#x27; 下载元数据失败 : Cannot download repomd.xml: Cannot download repodata/repomd.xml: All mirrors were tried</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://forums.docker.com/t/docker-ce-stable-x86-64-repo-not-available-https-error-404-not-found-https-download-docker-com-linux-centos-7server-x86-64-stable-repodata-repomd-xml/98965/4\">解决办法</a>:<br>修改 &#x2F;etc&#x2F;yum.repos.d&#x2F;docker-ce.repo</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/yum.repos.d/docker-ce.repo</span><br></pre></td></tr></table></figure>\n\n<p>把<code>docker-ce-stable</code>的<code>baseurl</code>改为:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://download.docker.com/linux/centos/7/$basearch/stable</span><br></pre></td></tr></table></figure>\n\n<p>在执行安装 <code>docker</code> 命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y docker-ce</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"启动-docker-服务\"><a href=\"#启动-docker-服务\" class=\"headerlink\" title=\"启动 docker 服务\"></a>启动 docker 服务</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start docker</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"开机启动-docker-服务\"><a href=\"#开机启动-docker-服务\" class=\"headerlink\" title=\"开机启动 docker 服务\"></a>开机启动 docker 服务</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> docker</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"下载-Nginx-镜像\"><a href=\"#下载-Nginx-镜像\" class=\"headerlink\" title=\"下载 Nginx 镜像\"></a>下载 <code>Nginx</code> 镜像</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull nginx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建-Nginx-容器-设置端口映射-并使用数据卷挂载目录\"><a href=\"#创建-Nginx-容器-设置端口映射-并使用数据卷挂载目录\" class=\"headerlink\" title=\"创建 Nginx 容器, 设置端口映射, 并使用数据卷挂载目录\"></a>创建 <code>Nginx</code> 容器, 设置端口映射, 并使用数据卷挂载目录</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name mynginx \\</span><br><span class=\"line\">-p 80:80 \\</span><br><span class=\"line\">--mount <span class=\"built_in\">type</span>=<span class=\"built_in\">bind</span>,<span class=\"built_in\">source</span>=/root/mynginx/conf/nginx.conf,target=/etc/nginx/nginx.conf \\</span><br><span class=\"line\">--mount <span class=\"built_in\">type</span>=<span class=\"built_in\">bind</span>,<span class=\"built_in\">source</span>=/root/mynginx/conf/http-8080.conf,target=/etc/nginx/conf.d/http-8080.conf \\</span><br><span class=\"line\">--mount <span class=\"built_in\">type</span>=<span class=\"built_in\">bind</span>,<span class=\"built_in\">source</span>=/root/mynginx/logs,target=/var/log/nginx/logs \\</span><br><span class=\"line\">--mount <span class=\"built_in\">type</span>=<span class=\"built_in\">bind</span>,<span class=\"built_in\">source</span>=/root/mynginx/html,target=/usr/share/nginx/html \\</span><br><span class=\"line\">nginx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置-Nginx\"><a href=\"#配置-Nginx\" class=\"headerlink\" title=\"配置 Nginx\"></a>配置 <code>Nginx</code></h3><h3 id=\"重启-Nginx\"><a href=\"#重启-Nginx\" class=\"headerlink\" title=\"重启 Nginx\"></a>重启 <code>Nginx</code></h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker restart mynginx</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>参考文档:<br><a href=\"https://hexo.io/docs/\">hexo 官方英文文档</a><br><a href=\"https://hexo.io/zh-cn/docs/\">hexo 官方中文文档</a><br><a href=\"https://theme-next.js.org/pisces/docs/getting-started/\">hexo-next 文档</a></p>\n","site":{"data":{}},"related_posts":["2023/09/18/express-docker/"],"length":1315,"excerpt":"<h2 id=\"安装-hexo\"><a href=\"#安装-hexo\" class=\"headerlink\" title=\"安装 hexo\"></a>安装 hexo</h2><h3 id=\"全局安装\"><a href=\"#全局安装\" class=\"headerlink\" title=\"全局安装\"></a>全局安装</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"局部安装\"><a href=\"#局部安装\" class=\"headerlink\" title=\"局部安装\"></a>局部安装</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init &lt;folder&gt;</span><br><span class=\"line\"><span class=\"built_in\">cd</span> &lt;folder&gt;</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<p>创建完项目后, 包括以下文件:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── source</span><br><span class=\"line\">|   ├── _drafts</span><br><span class=\"line\">|   └── _posts</span><br><span class=\"line\">└── themes</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运行项目\"><a href=\"#运行项目\" class=\"headerlink\" title=\"运行项目\"></a>运行项目</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx hexo server <span class=\"comment\"># 局部创建使用npx</span></span><br></pre></td></tr></table></figure>","more":"<h2 id=\"安装hexo-next-主题\"><a href=\"#安装hexo-next-主题\" class=\"headerlink\" title=\"安装hexo-next 主题\"></a>安装<a href=\"https://github.com/next-theme/hexo-theme-next\">hexo-next 主题</a></h2><h3 id=\"方式-1-使用-npm-安装\"><a href=\"#方式-1-使用-npm-安装\" class=\"headerlink\" title=\"方式 1 使用 npm 安装\"></a>方式 1 使用 npm 安装</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-theme-next</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方式-2-使用-git-安装\"><a href=\"#方式-2-使用-git-安装\" class=\"headerlink\" title=\"方式 2 使用 git 安装\"></a>方式 2 使用 git 安装</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改主题\"><a href=\"#修改主题\" class=\"headerlink\" title=\"修改主题\"></a>修改主题</h3><p>修改<code>_config.yml</code>文件中的:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">next</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用本地配置\"><a href=\"#使用本地配置\" class=\"headerlink\" title=\"使用本地配置\"></a>使用<a href=\"https://theme-next.js.org/docs/getting-started/configuration\">本地配置</a></h3><ol>\n<li>在项目目录下创建文件<code>_config.next.yml</code></li>\n<li>把依赖配置内容拷贝到<code>_config.next.yml</code>:<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用 npm 安装</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> node_modules/hexo-theme-next/_config.yml _config.next.yml</span><br><span class=\"line\"><span class=\"comment\"># 使用 Git 安装</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> themes/next/_config.yml _config.next.yml</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"清理缓存后重新运行调试\"><a href=\"#清理缓存后重新运行调试\" class=\"headerlink\" title=\"清理缓存后重新运行调试\"></a>清理缓存后重新运行调试</h3><p>注意: 修改<code>_config.yml</code>或者<code>_config.next.yml</code>配置文件后, 需要使用<code>hexo clean</code>清理一下再运行, 修改后的配置才会生效.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx hexo clean &amp;&amp; npx hexo s</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加-Local-Search-本地搜索\"><a href=\"#添加-Local-Search-本地搜索\" class=\"headerlink\" title=\"添加 Local Search 本地搜索\"></a>添加 Local Search 本地搜索</h2><h3 id=\"安装插件-hexo-generator-searchdb\"><a href=\"#安装插件-hexo-generator-searchdb\" class=\"headerlink\" title=\"安装插件 hexo-generator-searchdb\"></a>安装插件 hexo-generator-searchdb</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改-config-yml-配置文件\"><a href=\"#修改-config-yml-配置文件\" class=\"headerlink\" title=\"修改 _config.yml 配置文件\"></a>修改 _config.yml 配置文件</h3><p>在末尾添加</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">search:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">search.xml</span></span><br><span class=\"line\">  <span class=\"attr\">field:</span> <span class=\"string\">post</span></span><br><span class=\"line\">  <span class=\"attr\">format:</span> <span class=\"string\">html</span></span><br><span class=\"line\">  <span class=\"attr\">limit:</span> <span class=\"number\">10000</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改-config-next-yml-配置文件\"><a href=\"#修改-config-next-yml-配置文件\" class=\"headerlink\" title=\"修改 _config.next.yml 配置文件\"></a>修改 _config.next.yml 配置文件</h3><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">local_search:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"增加文章字数统计和阅读时长\"><a href=\"#增加文章字数统计和阅读时长\" class=\"headerlink\" title=\"增加文章字数统计和阅读时长\"></a>增加文章字数统计和阅读时长</h2><h3 id=\"安装插件-hexo-word-counter\"><a href=\"#安装插件-hexo-word-counter\" class=\"headerlink\" title=\"安装插件 hexo-word-counter\"></a>安装插件 hexo-word-counter</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-word-counter --save</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改-config-yml-配置文件-1\"><a href=\"#修改-config-yml-配置文件-1\" class=\"headerlink\" title=\"修改 _config.yml 配置文件\"></a>修改 _config.yml 配置文件</h3><p>在末尾添加</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 增加文章字数统计及阅读时长功能</span></span><br><span class=\"line\"><span class=\"attr\">symbols_count_time:</span></span><br><span class=\"line\">  <span class=\"attr\">symbols:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">time:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">total_symbols:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">total_time:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">exclude_codeblock:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">wpm:</span> <span class=\"number\">275</span></span><br><span class=\"line\">  <span class=\"attr\">suffix:</span> <span class=\"string\">&quot;mins.&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改语言为中文\"><a href=\"#修改语言为中文\" class=\"headerlink\" title=\"修改语言为中文\"></a>修改语言为中文</h2><p>修改<code>_config.yml</code>文件</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">zh-CN</span> <span class=\"comment\"># zh-CN 对应 themes/next/languages/zh-CN.yml</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加分类\"><a href=\"#添加分类\" class=\"headerlink\" title=\"添加分类\"></a>添加分类</h2><h3 id=\"生成分类页\"><a href=\"#生成分类页\" class=\"headerlink\" title=\"生成分类页\"></a>生成分类页</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page categories</span><br></pre></td></tr></table></figure>\n\n<p>创建完成后会在<code>source</code>目录下生成 <code>categories/index.md</code> 文件.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">categories</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2023-09-02 15:36:39</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加-type-属性\"><a href=\"#添加-type-属性\" class=\"headerlink\" title=\"添加 type 属性\"></a>添加 type 属性</h3><p>在<code>categories/index.md</code>文件中<code>date</code>下面添加<code>type</code>属性</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">categories</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2023-09-02 15:36:39</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">&quot;categories&quot;</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"将文章添加到分类\"><a href=\"#将文章添加到分类\" class=\"headerlink\" title=\"将文章添加到分类\"></a>将文章添加到分类</h3><p>打开想要分类的文章, 添加<code>categories</code>属性</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">Hexo</span> <span class=\"string\">使用</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2023-09-01 22:09:52</span></span><br><span class=\"line\"><span class=\"attr\">categories:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">其它技术</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"打开分类配置\"><a href=\"#打开分类配置\" class=\"headerlink\" title=\"打开分类配置\"></a>打开分类配置</h3><p>在<code>_config.next.yml</code>中打开分类配置</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-home</span></span><br><span class=\"line\">  <span class=\"comment\">#about: /about/ || fa fa-user</span></span><br><span class=\"line\">  <span class=\"comment\"># tags: /tags/ || fa fa-tags</span></span><br><span class=\"line\">  <span class=\"attr\">categories:</span> <span class=\"string\">/categories/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-th</span></span><br><span class=\"line\">  <span class=\"attr\">archives:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-archive</span></span><br><span class=\"line\">  <span class=\"comment\">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class=\"line\">  <span class=\"comment\">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class=\"line\">  <span class=\"comment\">#commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加标签\"><a href=\"#添加标签\" class=\"headerlink\" title=\"添加标签\"></a>添加标签</h2><h3 id=\"生成标签页\"><a href=\"#生成标签页\" class=\"headerlink\" title=\"生成标签页\"></a>生成标签页</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page tags</span><br></pre></td></tr></table></figure>\n\n<p>创建完成后会在<code>source</code>目录下生成 <code>tags/index.md</code>文件</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">tags</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2023-09-02 15:50:52</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加-type-属性-1\"><a href=\"#添加-type-属性-1\" class=\"headerlink\" title=\"添加 type 属性\"></a>添加 type 属性</h3><p>在<code>tags/index.md</code>文件中<code>date</code>下面添加<code>type</code>属性</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">tags</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2023-09-02 15:50:52</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">&quot;tags&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"给文章设置标签\"><a href=\"#给文章设置标签\" class=\"headerlink\" title=\"给文章设置标签\"></a>给文章设置标签</h3><p>打开想要设置标签的文章, 添加<code>tags</code>属性</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">Hexo</span> <span class=\"string\">使用</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2023-09-01 22:09:52</span></span><br><span class=\"line\"><span class=\"attr\">categories:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">其它技术</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">hexo</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"打开标签配置\"><a href=\"#打开标签配置\" class=\"headerlink\" title=\"打开标签配置\"></a>打开标签配置</h3><p>在<code>_config.next.yml</code>中打开标签配置</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-home</span></span><br><span class=\"line\">  <span class=\"comment\">#about: /about/ || fa fa-user</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-tags</span></span><br><span class=\"line\">  <span class=\"attr\">categories:</span> <span class=\"string\">/categories/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-th</span></span><br><span class=\"line\">  <span class=\"attr\">archives:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-archive</span></span><br><span class=\"line\">  <span class=\"comment\">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class=\"line\">  <span class=\"comment\">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class=\"line\">  <span class=\"comment\">#commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加关于\"><a href=\"#添加关于\" class=\"headerlink\" title=\"添加关于\"></a>添加关于</h2><h3 id=\"生成关于页面\"><a href=\"#生成关于页面\" class=\"headerlink\" title=\"生成关于页面\"></a>生成关于页面</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page about</span><br></pre></td></tr></table></figure>\n\n<p>创建完成后会在<code>source</code>目录下生成<code>about/index.md</code>文件</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">about</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2023-09-02 16:04:00</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<p>可以 index.md 文件里添加关于的内容信息.</p>\n<h3 id=\"打开关于配置\"><a href=\"#打开关于配置\" class=\"headerlink\" title=\"打开关于配置\"></a>打开关于配置</h3><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-home</span></span><br><span class=\"line\">  <span class=\"attr\">about:</span> <span class=\"string\">/about/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-user</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-tags</span></span><br><span class=\"line\">  <span class=\"attr\">categories:</span> <span class=\"string\">/categories/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-th</span></span><br><span class=\"line\">  <span class=\"attr\">archives:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-archive</span></span><br><span class=\"line\">  <span class=\"comment\">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class=\"line\">  <span class=\"comment\">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class=\"line\">  <span class=\"comment\">#commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建新文章\"><a href=\"#创建新文章\" class=\"headerlink\" title=\"创建新文章\"></a><a href=\"https://hexo.io/zh-cn/docs/writing.html\">创建新文章</a></h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post &lt;title&gt;</span><br></pre></td></tr></table></figure>\n\n<p>执行以上指令后, 会在 <code>source/_posts/</code>文件夹下生成<code>&lt;title&gt;.md</code>文件, 支持使用<code>markdown</code>语法来书写文章.</p>\n<h2 id=\"启动本地服务器预览\"><a href=\"#启动本地服务器预览\" class=\"headerlink\" title=\"启动本地服务器预览\"></a>启动本地服务器预览</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">yarn server</span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，访问网址为：<code>http://localhost:4000/</code></p>\n<h2 id=\"生成静态文件\"><a href=\"#生成静态文件\" class=\"headerlink\" title=\"生成静态文件\"></a>生成静态文件</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">yarn build</span><br></pre></td></tr></table></figure>\n\n<p>执行以上指令后, 会在 <code>public</code>文件夹下生成静态文件.</p>\n<h2 id=\"部署到个人服务器\"><a href=\"#部署到个人服务器\" class=\"headerlink\" title=\"部署到个人服务器\"></a>部署到个人服务器</h2><p>将生成后的文件部署到个人服务器. 我使用的是个人阿里云轻量服务器, 在个人服务器操作过程如下:</p>\n<h3 id=\"安装-Docker\"><a href=\"#安装-Docker\" class=\"headerlink\" title=\"安装 Docker\"></a>安装 <code>Docker</code></h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. yum 包更新到最新</span></span><br><span class=\"line\">yum update</span><br><span class=\"line\"><span class=\"comment\"># 2. 安装需要的软件包, yum-util提供yum-config-manager功能, 另外两个是devicemapper驱动依赖的</span></span><br><span class=\"line\">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class=\"line\"><span class=\"comment\"># 3. 设置yum源</span></span><br><span class=\"line\">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class=\"line\"><span class=\"comment\"># 4. 安装docker, 出现输入界面都按y</span></span><br><span class=\"line\">yum install -y docker-ce</span><br><span class=\"line\"><span class=\"comment\"># 5. 查看docker版本,</span></span><br><span class=\"line\">docker -v</span><br><span class=\"line\"><span class=\"comment\"># 6. 开启docker服务</span></span><br><span class=\"line\">service docker start</span><br></pre></td></tr></table></figure>\n\n<p>第四步报错:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  - Status code: 404 for https://download.docker.com/linux/centos/3/x86_64/stable/repodata/repomd.xml (IP: 13.32.50.112)</span><br><span class=\"line\">错误：为仓库 &#x27;docker-ce-stable&#x27; 下载元数据失败 : Cannot download repomd.xml: Cannot download repodata/repomd.xml: All mirrors were tried</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://forums.docker.com/t/docker-ce-stable-x86-64-repo-not-available-https-error-404-not-found-https-download-docker-com-linux-centos-7server-x86-64-stable-repodata-repomd-xml/98965/4\">解决办法</a>:<br>修改 &#x2F;etc&#x2F;yum.repos.d&#x2F;docker-ce.repo</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/yum.repos.d/docker-ce.repo</span><br></pre></td></tr></table></figure>\n\n<p>把<code>docker-ce-stable</code>的<code>baseurl</code>改为:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://download.docker.com/linux/centos/7/$basearch/stable</span><br></pre></td></tr></table></figure>\n\n<p>在执行安装 <code>docker</code> 命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y docker-ce</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"启动-docker-服务\"><a href=\"#启动-docker-服务\" class=\"headerlink\" title=\"启动 docker 服务\"></a>启动 docker 服务</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start docker</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"开机启动-docker-服务\"><a href=\"#开机启动-docker-服务\" class=\"headerlink\" title=\"开机启动 docker 服务\"></a>开机启动 docker 服务</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> docker</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"下载-Nginx-镜像\"><a href=\"#下载-Nginx-镜像\" class=\"headerlink\" title=\"下载 Nginx 镜像\"></a>下载 <code>Nginx</code> 镜像</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull nginx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建-Nginx-容器-设置端口映射-并使用数据卷挂载目录\"><a href=\"#创建-Nginx-容器-设置端口映射-并使用数据卷挂载目录\" class=\"headerlink\" title=\"创建 Nginx 容器, 设置端口映射, 并使用数据卷挂载目录\"></a>创建 <code>Nginx</code> 容器, 设置端口映射, 并使用数据卷挂载目录</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name mynginx \\</span><br><span class=\"line\">-p 80:80 \\</span><br><span class=\"line\">--mount <span class=\"built_in\">type</span>=<span class=\"built_in\">bind</span>,<span class=\"built_in\">source</span>=/root/mynginx/conf/nginx.conf,target=/etc/nginx/nginx.conf \\</span><br><span class=\"line\">--mount <span class=\"built_in\">type</span>=<span class=\"built_in\">bind</span>,<span class=\"built_in\">source</span>=/root/mynginx/conf/http-8080.conf,target=/etc/nginx/conf.d/http-8080.conf \\</span><br><span class=\"line\">--mount <span class=\"built_in\">type</span>=<span class=\"built_in\">bind</span>,<span class=\"built_in\">source</span>=/root/mynginx/logs,target=/var/log/nginx/logs \\</span><br><span class=\"line\">--mount <span class=\"built_in\">type</span>=<span class=\"built_in\">bind</span>,<span class=\"built_in\">source</span>=/root/mynginx/html,target=/usr/share/nginx/html \\</span><br><span class=\"line\">nginx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置-Nginx\"><a href=\"#配置-Nginx\" class=\"headerlink\" title=\"配置 Nginx\"></a>配置 <code>Nginx</code></h3><h3 id=\"重启-Nginx\"><a href=\"#重启-Nginx\" class=\"headerlink\" title=\"重启 Nginx\"></a>重启 <code>Nginx</code></h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker restart mynginx</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>参考文档:<br><a href=\"https://hexo.io/docs/\">hexo 官方英文文档</a><br><a href=\"https://hexo.io/zh-cn/docs/\">hexo 官方中文文档</a><br><a href=\"https://theme-next.js.org/pisces/docs/getting-started/\">hexo-next 文档</a></p>"},{"title":"给WKWebView页面添加侧滑返回功能","date":"2023-09-05T10:37:21.000Z","_content":"\n> 背景需求:\n> 从原生页面跳转到 h5 页面后, 有的 h5 页面没有返回按钮, 需要原生 app 添加侧滑返回功能.\n\n最开始的想法是用`WKWebView`的`allowsBackForwardNavigationGestures`属性, 该属性默认值为 NO, 表示禁用 webView 的左滑右滑, 设置为 YES 后, 允许左右滑手势操作网页的后退前进.\n\n```objective-c\n_wkWebView.allowsBackForwardNavigationGestures = YES;\n```\n\n然后使用 KVO 监听`canGoBack`属性变化:\n\n```objective-c\n[_wkWebView addObserver:self forKeyPath:@\"canGoBack\" options:NSKeyValueObservingOptionNew context:nil];\n```\n\n处理属性变化回调:\n\n```objective-c\n- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary<NSKeyValueChangeKey, id> *)change context:(void *)context {\n    if ([keyPath isEqualToString:@\"canGoBack\"]) {\n        BOOL canGoBack = [self.wkWebView canGoBack];\n        if (!canGoBack) {\n            // 已经是第一个页面, 关闭页面\n        }\n    }\n}\n```\n\n<!-- more -->\n\n但是这样处理的时候, 遇到有的 h5 页面进去的时候会跳转多个链接, 最终显示最后一个链接, 这样一开始进去就会有多个页面栈, 左滑回退的时候会回退到页面的上一栈, 实际上需要的效果是关闭当前 h5 页面.\n\n想到的另外一个方案是: 给 h5 页面添加一个侧滑手势, 在侧滑时, app 把侧滑事件给 h5, h5 那边监听侧滑事件, 处理 h5 内部 goBack 和关闭页面返回到原生 app 的逻辑.\n\n首先添加侧滑事件\n\n```objective-c\nUIScreenEdgePanGestureRecognizer *edgePanGesture = [[UIScreenEdgePanGestureRecognizer alloc] initWithTarget:self action:@selector(swipe_handle:)];\nedgePanGesture.edges = UIRectEdgeLeft;\nedgePanGesture.delegate = self;\n[self.webView addGestureRecognizer:edgePanGesture];\n```\n\n并实现协议`UIGestureRecognizerDelegate`:\n\n```objective-c\n- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer {\n    return YES;\n}\n```\n\n为了防止和导航控制器手势冲突, 在进入 web 页面时,禁用导航侧滑手势, 退出 web 页面后, 启用导航侧滑手势\n\n```objective-c\n- (void)viewDidAppear:(BOOL)animated {\n    [super viewDidAppear:animated];\n    self.navigationController.interactivePopGestureRecognizer.enabled = NO;\n}\n\n- (void)viewWillDisappear:(BOOL)animated {\n    [super viewWillDisappear:animated];\n    self.navigationController.interactivePopGestureRecognizer.enabled = YES;\n}\n```\n\n处理侧滑事件:\n\n```objective-c\n- (void)swipe_handle:(UIGestureRecognizer *)recognizer {\n\n    if (recognizer.state == UIGestureRecognizerStateEnded) {\n        // 把侧滑事件交给h5来处理\n        [self bridgeCallHandler:@\"onBackPressed\" data:nil responseCallback:nil];\n    }\n}\n```\n","source":"_posts/wkwebview-back.md","raw":"---\ntitle: 给WKWebView页面添加侧滑返回功能\ndate: 2023-09-05 18:37:21\ntags:\n  - WKWebView\ncategories:\n  - iOS\n---\n\n> 背景需求:\n> 从原生页面跳转到 h5 页面后, 有的 h5 页面没有返回按钮, 需要原生 app 添加侧滑返回功能.\n\n最开始的想法是用`WKWebView`的`allowsBackForwardNavigationGestures`属性, 该属性默认值为 NO, 表示禁用 webView 的左滑右滑, 设置为 YES 后, 允许左右滑手势操作网页的后退前进.\n\n```objective-c\n_wkWebView.allowsBackForwardNavigationGestures = YES;\n```\n\n然后使用 KVO 监听`canGoBack`属性变化:\n\n```objective-c\n[_wkWebView addObserver:self forKeyPath:@\"canGoBack\" options:NSKeyValueObservingOptionNew context:nil];\n```\n\n处理属性变化回调:\n\n```objective-c\n- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary<NSKeyValueChangeKey, id> *)change context:(void *)context {\n    if ([keyPath isEqualToString:@\"canGoBack\"]) {\n        BOOL canGoBack = [self.wkWebView canGoBack];\n        if (!canGoBack) {\n            // 已经是第一个页面, 关闭页面\n        }\n    }\n}\n```\n\n<!-- more -->\n\n但是这样处理的时候, 遇到有的 h5 页面进去的时候会跳转多个链接, 最终显示最后一个链接, 这样一开始进去就会有多个页面栈, 左滑回退的时候会回退到页面的上一栈, 实际上需要的效果是关闭当前 h5 页面.\n\n想到的另外一个方案是: 给 h5 页面添加一个侧滑手势, 在侧滑时, app 把侧滑事件给 h5, h5 那边监听侧滑事件, 处理 h5 内部 goBack 和关闭页面返回到原生 app 的逻辑.\n\n首先添加侧滑事件\n\n```objective-c\nUIScreenEdgePanGestureRecognizer *edgePanGesture = [[UIScreenEdgePanGestureRecognizer alloc] initWithTarget:self action:@selector(swipe_handle:)];\nedgePanGesture.edges = UIRectEdgeLeft;\nedgePanGesture.delegate = self;\n[self.webView addGestureRecognizer:edgePanGesture];\n```\n\n并实现协议`UIGestureRecognizerDelegate`:\n\n```objective-c\n- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer {\n    return YES;\n}\n```\n\n为了防止和导航控制器手势冲突, 在进入 web 页面时,禁用导航侧滑手势, 退出 web 页面后, 启用导航侧滑手势\n\n```objective-c\n- (void)viewDidAppear:(BOOL)animated {\n    [super viewDidAppear:animated];\n    self.navigationController.interactivePopGestureRecognizer.enabled = NO;\n}\n\n- (void)viewWillDisappear:(BOOL)animated {\n    [super viewWillDisappear:animated];\n    self.navigationController.interactivePopGestureRecognizer.enabled = YES;\n}\n```\n\n处理侧滑事件:\n\n```objective-c\n- (void)swipe_handle:(UIGestureRecognizer *)recognizer {\n\n    if (recognizer.state == UIGestureRecognizerStateEnded) {\n        // 把侧滑事件交给h5来处理\n        [self bridgeCallHandler:@\"onBackPressed\" data:nil responseCallback:nil];\n    }\n}\n```\n","slug":"wkwebview-back","published":1,"updated":"2023-09-05T10:44:35.394Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clq4xe1df0027tz2h80msge6w","content":"<blockquote>\n<p>背景需求:<br>从原生页面跳转到 h5 页面后, 有的 h5 页面没有返回按钮, 需要原生 app 添加侧滑返回功能.</p>\n</blockquote>\n<p>最开始的想法是用<code>WKWebView</code>的<code>allowsBackForwardNavigationGestures</code>属性, 该属性默认值为 NO, 表示禁用 webView 的左滑右滑, 设置为 YES 后, 允许左右滑手势操作网页的后退前进.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_wkWebView.allowsBackForwardNavigationGestures = YES;</span><br></pre></td></tr></table></figure>\n\n<p>然后使用 KVO 监听<code>canGoBack</code>属性变化:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[_wkWebView addObserver:self forKeyPath:@&quot;canGoBack&quot; options:NSKeyValueObservingOptionNew context:nil];</span><br></pre></td></tr></table></figure>\n\n<p>处理属性变化回调:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary&lt;NSKeyValueChangeKey, id&gt; *)change context:(void *)context &#123;</span><br><span class=\"line\">    if ([keyPath isEqualToString:@&quot;canGoBack&quot;]) &#123;</span><br><span class=\"line\">        BOOL canGoBack = [self.wkWebView canGoBack];</span><br><span class=\"line\">        if (!canGoBack) &#123;</span><br><span class=\"line\">            // 已经是第一个页面, 关闭页面</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p>但是这样处理的时候, 遇到有的 h5 页面进去的时候会跳转多个链接, 最终显示最后一个链接, 这样一开始进去就会有多个页面栈, 左滑回退的时候会回退到页面的上一栈, 实际上需要的效果是关闭当前 h5 页面.</p>\n<p>想到的另外一个方案是: 给 h5 页面添加一个侧滑手势, 在侧滑时, app 把侧滑事件给 h5, h5 那边监听侧滑事件, 处理 h5 内部 goBack 和关闭页面返回到原生 app 的逻辑.</p>\n<p>首先添加侧滑事件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UIScreenEdgePanGestureRecognizer *edgePanGesture = [[UIScreenEdgePanGestureRecognizer alloc] initWithTarget:self action:@selector(swipe_handle:)];</span><br><span class=\"line\">edgePanGesture.edges = UIRectEdgeLeft;</span><br><span class=\"line\">edgePanGesture.delegate = self;</span><br><span class=\"line\">[self.webView addGestureRecognizer:edgePanGesture];</span><br></pre></td></tr></table></figure>\n\n<p>并实现协议<code>UIGestureRecognizerDelegate</code>:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer &#123;</span><br><span class=\"line\">    return YES;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>为了防止和导航控制器手势冲突, 在进入 web 页面时,禁用导航侧滑手势, 退出 web 页面后, 启用导航侧滑手势</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)viewDidAppear:(BOOL)animated &#123;</span><br><span class=\"line\">    [super viewDidAppear:animated];</span><br><span class=\"line\">    self.navigationController.interactivePopGestureRecognizer.enabled = NO;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)viewWillDisappear:(BOOL)animated &#123;</span><br><span class=\"line\">    [super viewWillDisappear:animated];</span><br><span class=\"line\">    self.navigationController.interactivePopGestureRecognizer.enabled = YES;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>处理侧滑事件:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)swipe_handle:(UIGestureRecognizer *)recognizer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (recognizer.state == UIGestureRecognizerStateEnded) &#123;</span><br><span class=\"line\">        // 把侧滑事件交给h5来处理</span><br><span class=\"line\">        [self bridgeCallHandler:@&quot;onBackPressed&quot; data:nil responseCallback:nil];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"related_posts":[],"length":446,"excerpt":"<blockquote>\n<p>背景需求:<br>从原生页面跳转到 h5 页面后, 有的 h5 页面没有返回按钮, 需要原生 app 添加侧滑返回功能.</p>\n</blockquote>\n<p>最开始的想法是用<code>WKWebView</code>的<code>allowsBackForwardNavigationGestures</code>属性, 该属性默认值为 NO, 表示禁用 webView 的左滑右滑, 设置为 YES 后, 允许左右滑手势操作网页的后退前进.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_wkWebView.allowsBackForwardNavigationGestures = YES;</span><br></pre></td></tr></table></figure>\n\n<p>然后使用 KVO 监听<code>canGoBack</code>属性变化:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[_wkWebView addObserver:self forKeyPath:@&quot;canGoBack&quot; options:NSKeyValueObservingOptionNew context:nil];</span><br></pre></td></tr></table></figure>\n\n<p>处理属性变化回调:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary&lt;NSKeyValueChangeKey, id&gt; *)change context:(void *)context &#123;</span><br><span class=\"line\">    if ([keyPath isEqualToString:@&quot;canGoBack&quot;]) &#123;</span><br><span class=\"line\">        BOOL canGoBack = [self.wkWebView canGoBack];</span><br><span class=\"line\">        if (!canGoBack) &#123;</span><br><span class=\"line\">            // 已经是第一个页面, 关闭页面</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<p>但是这样处理的时候, 遇到有的 h5 页面进去的时候会跳转多个链接, 最终显示最后一个链接, 这样一开始进去就会有多个页面栈, 左滑回退的时候会回退到页面的上一栈, 实际上需要的效果是关闭当前 h5 页面.</p>\n<p>想到的另外一个方案是: 给 h5 页面添加一个侧滑手势, 在侧滑时, app 把侧滑事件给 h5, h5 那边监听侧滑事件, 处理 h5 内部 goBack 和关闭页面返回到原生 app 的逻辑.</p>\n<p>首先添加侧滑事件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UIScreenEdgePanGestureRecognizer *edgePanGesture = [[UIScreenEdgePanGestureRecognizer alloc] initWithTarget:self action:@selector(swipe_handle:)];</span><br><span class=\"line\">edgePanGesture.edges = UIRectEdgeLeft;</span><br><span class=\"line\">edgePanGesture.delegate = self;</span><br><span class=\"line\">[self.webView addGestureRecognizer:edgePanGesture];</span><br></pre></td></tr></table></figure>\n\n<p>并实现协议<code>UIGestureRecognizerDelegate</code>:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer &#123;</span><br><span class=\"line\">    return YES;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>为了防止和导航控制器手势冲突, 在进入 web 页面时,禁用导航侧滑手势, 退出 web 页面后, 启用导航侧滑手势</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)viewDidAppear:(BOOL)animated &#123;</span><br><span class=\"line\">    [super viewDidAppear:animated];</span><br><span class=\"line\">    self.navigationController.interactivePopGestureRecognizer.enabled = NO;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)viewWillDisappear:(BOOL)animated &#123;</span><br><span class=\"line\">    [super viewWillDisappear:animated];</span><br><span class=\"line\">    self.navigationController.interactivePopGestureRecognizer.enabled = YES;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>处理侧滑事件:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)swipe_handle:(UIGestureRecognizer *)recognizer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (recognizer.state == UIGestureRecognizerStateEnded) &#123;</span><br><span class=\"line\">        // 把侧滑事件交给h5来处理</span><br><span class=\"line\">        [self bridgeCallHandler:@&quot;onBackPressed&quot; data:nil responseCallback:nil];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"把Express项目Docker化","date":"2023-09-18T08:39:37.000Z","_content":"\n## 创建 Dockerfile 文件\n\n在 `express` 项目的目录下, 新建 `dockerfile` 文件, 命名为 `Dockerfile`\n\n```sh\ntouch Dockerfile\n```\n\n编辑`Dockerfile`文件:\n\n<!-- more -->\n\n```dockerfile\n# 从哪个镜像进行构建, 由于我的服务器上docker拉取的node镜像是latest版本的, 这里指定node:latest\nFROM node:latest\n# 在镜像中创建一个文件夹存放应用程序代码, 这里是应用程序的工作目录\nWORKDIR /usr/src/app\n# 拷贝package.json文件\nCOPY package*.json ./\n# 安装依赖\nRUN npm install\n# 绑定应用程序\nCOPY . .\n# 应用程序绑定的端口是3001, 使用EXPOSE命令使它与docker镜像做映射\nEXPOSE 3001\n# 启动服务器\nCMD [\"node\", \"app.js\"]\n```\n\n## 创建.dockerignore 文件\n\n在`Dockerfile`的同一个文件夹中创建一个`.dockerignore`文件, 添加以下内容:\n\n```\nnode_modules\nnpm-debug.log\n```\n\n## 构建镜像\n\n进入`Dockerfile`所在的目录, 运行以下命令构建`Docker`镜像.\n\n```sh\ndocker build . -t <your username>/node-web-app\n```\n\n## 运行镜像\n\n用以下命令运行镜像\n\n```sh\ndocker run -p 3001:3001 -d <your username>/node-web-app\n```\n\n> `-d`: 指容器在后台自助运行\n> `-p`: 指容器的端口映射\n\n查看应用程序是否运行成功\n\n```sh\n# 查看容器id\ndocker ps\n# 查看容器日志\ndocker logs <container id>\n```\n\n## 使用 Nginx 反向代理\n\n### 查看服务容器对应的 ip\n\n输入以下指令查看:\n\n```sh\ndocker inspect <container id> | grep IPAddress\n```\n\n查看到结果:\n\n```json\n \"IPAddress\": \"172.17.0.3\",\n```\n\n### 修改 nginx 的配置.\n\n增加一条规则将 `/api/{path}`转到目标服务的`/{path}`:\n\n```\n  location /api/ {\n      proxy_pass http://172.17.0.3:3001/;\n  }\n```\n\n### 重启 nginx\n\n```sh\ndocker restart <nginx id>\n```\n\n---\n\n参考文档:\n\n- [把一个 Node.js web 应用程序给 Docker 化](https://nodejs.org/zh-cn/docs/guides/nodejs-docker-webapp)\n","source":"_posts/express-docker.md","raw":"---\ntitle: 把Express项目Docker化\ndate: 2023-09-18 16:39:37\ntags:\n  - docker\n  - express\n---\n\n## 创建 Dockerfile 文件\n\n在 `express` 项目的目录下, 新建 `dockerfile` 文件, 命名为 `Dockerfile`\n\n```sh\ntouch Dockerfile\n```\n\n编辑`Dockerfile`文件:\n\n<!-- more -->\n\n```dockerfile\n# 从哪个镜像进行构建, 由于我的服务器上docker拉取的node镜像是latest版本的, 这里指定node:latest\nFROM node:latest\n# 在镜像中创建一个文件夹存放应用程序代码, 这里是应用程序的工作目录\nWORKDIR /usr/src/app\n# 拷贝package.json文件\nCOPY package*.json ./\n# 安装依赖\nRUN npm install\n# 绑定应用程序\nCOPY . .\n# 应用程序绑定的端口是3001, 使用EXPOSE命令使它与docker镜像做映射\nEXPOSE 3001\n# 启动服务器\nCMD [\"node\", \"app.js\"]\n```\n\n## 创建.dockerignore 文件\n\n在`Dockerfile`的同一个文件夹中创建一个`.dockerignore`文件, 添加以下内容:\n\n```\nnode_modules\nnpm-debug.log\n```\n\n## 构建镜像\n\n进入`Dockerfile`所在的目录, 运行以下命令构建`Docker`镜像.\n\n```sh\ndocker build . -t <your username>/node-web-app\n```\n\n## 运行镜像\n\n用以下命令运行镜像\n\n```sh\ndocker run -p 3001:3001 -d <your username>/node-web-app\n```\n\n> `-d`: 指容器在后台自助运行\n> `-p`: 指容器的端口映射\n\n查看应用程序是否运行成功\n\n```sh\n# 查看容器id\ndocker ps\n# 查看容器日志\ndocker logs <container id>\n```\n\n## 使用 Nginx 反向代理\n\n### 查看服务容器对应的 ip\n\n输入以下指令查看:\n\n```sh\ndocker inspect <container id> | grep IPAddress\n```\n\n查看到结果:\n\n```json\n \"IPAddress\": \"172.17.0.3\",\n```\n\n### 修改 nginx 的配置.\n\n增加一条规则将 `/api/{path}`转到目标服务的`/{path}`:\n\n```\n  location /api/ {\n      proxy_pass http://172.17.0.3:3001/;\n  }\n```\n\n### 重启 nginx\n\n```sh\ndocker restart <nginx id>\n```\n\n---\n\n参考文档:\n\n- [把一个 Node.js web 应用程序给 Docker 化](https://nodejs.org/zh-cn/docs/guides/nodejs-docker-webapp)\n","slug":"express-docker","published":1,"updated":"2023-09-18T08:42:41.438Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clq4xe1df002btz2h8hwb8xca","content":"<h2 id=\"创建-Dockerfile-文件\"><a href=\"#创建-Dockerfile-文件\" class=\"headerlink\" title=\"创建 Dockerfile 文件\"></a>创建 Dockerfile 文件</h2><p>在 <code>express</code> 项目的目录下, 新建 <code>dockerfile</code> 文件, 命名为 <code>Dockerfile</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">touch</span> Dockerfile</span><br></pre></td></tr></table></figure>\n\n<p>编辑<code>Dockerfile</code>文件:</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 从哪个镜像进行构建, 由于我的服务器上docker拉取的node镜像是latest版本的, 这里指定node:latest</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> node:latest</span><br><span class=\"line\"><span class=\"comment\"># 在镜像中创建一个文件夹存放应用程序代码, 这里是应用程序的工作目录</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /usr/src/app</span></span><br><span class=\"line\"><span class=\"comment\"># 拷贝package.json文件</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> package*.json ./</span></span><br><span class=\"line\"><span class=\"comment\"># 安装依赖</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> npm install</span></span><br><span class=\"line\"><span class=\"comment\"># 绑定应用程序</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> . .</span></span><br><span class=\"line\"><span class=\"comment\"># 应用程序绑定的端口是3001, 使用EXPOSE命令使它与docker镜像做映射</span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">3001</span></span><br><span class=\"line\"><span class=\"comment\"># 启动服务器</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"string\">&quot;node&quot;</span>, <span class=\"string\">&quot;app.js&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建-dockerignore-文件\"><a href=\"#创建-dockerignore-文件\" class=\"headerlink\" title=\"创建.dockerignore 文件\"></a>创建.dockerignore 文件</h2><p>在<code>Dockerfile</code>的同一个文件夹中创建一个<code>.dockerignore</code>文件, 添加以下内容:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node_modules</span><br><span class=\"line\">npm-debug.log</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"构建镜像\"><a href=\"#构建镜像\" class=\"headerlink\" title=\"构建镜像\"></a>构建镜像</h2><p>进入<code>Dockerfile</code>所在的目录, 运行以下命令构建<code>Docker</code>镜像.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build . -t &lt;your username&gt;/node-web-app</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运行镜像\"><a href=\"#运行镜像\" class=\"headerlink\" title=\"运行镜像\"></a>运行镜像</h2><p>用以下命令运行镜像</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p 3001:3001 -d &lt;your username&gt;/node-web-app</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>-d</code>: 指容器在后台自助运行<br><code>-p</code>: 指容器的端口映射</p>\n</blockquote>\n<p>查看应用程序是否运行成功</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看容器id</span></span><br><span class=\"line\">docker ps</span><br><span class=\"line\"><span class=\"comment\"># 查看容器日志</span></span><br><span class=\"line\">docker logs &lt;container <span class=\"built_in\">id</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用-Nginx-反向代理\"><a href=\"#使用-Nginx-反向代理\" class=\"headerlink\" title=\"使用 Nginx 反向代理\"></a>使用 Nginx 反向代理</h2><h3 id=\"查看服务容器对应的-ip\"><a href=\"#查看服务容器对应的-ip\" class=\"headerlink\" title=\"查看服务容器对应的 ip\"></a>查看服务容器对应的 ip</h3><p>输入以下指令查看:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect &lt;container <span class=\"built_in\">id</span>&gt; | grep IPAddress</span><br></pre></td></tr></table></figure>\n\n<p>查看到结果:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;IPAddress&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;172.17.0.3&quot;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改-nginx-的配置\"><a href=\"#修改-nginx-的配置\" class=\"headerlink\" title=\"修改 nginx 的配置.\"></a>修改 nginx 的配置.</h3><p>增加一条规则将 <code>/api/&#123;path&#125;</code>转到目标服务的<code>/&#123;path&#125;</code>:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /api/ &#123;</span><br><span class=\"line\">    proxy_pass http://172.17.0.3:3001/;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"重启-nginx\"><a href=\"#重启-nginx\" class=\"headerlink\" title=\"重启 nginx\"></a>重启 nginx</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker restart &lt;nginx <span class=\"built_in\">id</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>参考文档:</p>\n<ul>\n<li><a href=\"https://nodejs.org/zh-cn/docs/guides/nodejs-docker-webapp\">把一个 Node.js web 应用程序给 Docker 化</a></li>\n</ul>\n","site":{"data":{}},"related_posts":["2023/09/01/hexo-use/"],"length":391,"excerpt":"<h2 id=\"创建-Dockerfile-文件\"><a href=\"#创建-Dockerfile-文件\" class=\"headerlink\" title=\"创建 Dockerfile 文件\"></a>创建 Dockerfile 文件</h2><p>在 <code>express</code> 项目的目录下, 新建 <code>dockerfile</code> 文件, 命名为 <code>Dockerfile</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">touch</span> Dockerfile</span><br></pre></td></tr></table></figure>\n\n<p>编辑<code>Dockerfile</code>文件:</p>","more":"<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 从哪个镜像进行构建, 由于我的服务器上docker拉取的node镜像是latest版本的, 这里指定node:latest</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> node:latest</span><br><span class=\"line\"><span class=\"comment\"># 在镜像中创建一个文件夹存放应用程序代码, 这里是应用程序的工作目录</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /usr/src/app</span></span><br><span class=\"line\"><span class=\"comment\"># 拷贝package.json文件</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> package*.json ./</span></span><br><span class=\"line\"><span class=\"comment\"># 安装依赖</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> npm install</span></span><br><span class=\"line\"><span class=\"comment\"># 绑定应用程序</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> . .</span></span><br><span class=\"line\"><span class=\"comment\"># 应用程序绑定的端口是3001, 使用EXPOSE命令使它与docker镜像做映射</span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">3001</span></span><br><span class=\"line\"><span class=\"comment\"># 启动服务器</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"string\">&quot;node&quot;</span>, <span class=\"string\">&quot;app.js&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建-dockerignore-文件\"><a href=\"#创建-dockerignore-文件\" class=\"headerlink\" title=\"创建.dockerignore 文件\"></a>创建.dockerignore 文件</h2><p>在<code>Dockerfile</code>的同一个文件夹中创建一个<code>.dockerignore</code>文件, 添加以下内容:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node_modules</span><br><span class=\"line\">npm-debug.log</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"构建镜像\"><a href=\"#构建镜像\" class=\"headerlink\" title=\"构建镜像\"></a>构建镜像</h2><p>进入<code>Dockerfile</code>所在的目录, 运行以下命令构建<code>Docker</code>镜像.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build . -t &lt;your username&gt;/node-web-app</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运行镜像\"><a href=\"#运行镜像\" class=\"headerlink\" title=\"运行镜像\"></a>运行镜像</h2><p>用以下命令运行镜像</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p 3001:3001 -d &lt;your username&gt;/node-web-app</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>-d</code>: 指容器在后台自助运行<br><code>-p</code>: 指容器的端口映射</p>\n</blockquote>\n<p>查看应用程序是否运行成功</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看容器id</span></span><br><span class=\"line\">docker ps</span><br><span class=\"line\"><span class=\"comment\"># 查看容器日志</span></span><br><span class=\"line\">docker logs &lt;container <span class=\"built_in\">id</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用-Nginx-反向代理\"><a href=\"#使用-Nginx-反向代理\" class=\"headerlink\" title=\"使用 Nginx 反向代理\"></a>使用 Nginx 反向代理</h2><h3 id=\"查看服务容器对应的-ip\"><a href=\"#查看服务容器对应的-ip\" class=\"headerlink\" title=\"查看服务容器对应的 ip\"></a>查看服务容器对应的 ip</h3><p>输入以下指令查看:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect &lt;container <span class=\"built_in\">id</span>&gt; | grep IPAddress</span><br></pre></td></tr></table></figure>\n\n<p>查看到结果:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;IPAddress&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;172.17.0.3&quot;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改-nginx-的配置\"><a href=\"#修改-nginx-的配置\" class=\"headerlink\" title=\"修改 nginx 的配置.\"></a>修改 nginx 的配置.</h3><p>增加一条规则将 <code>/api/&#123;path&#125;</code>转到目标服务的<code>/&#123;path&#125;</code>:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /api/ &#123;</span><br><span class=\"line\">    proxy_pass http://172.17.0.3:3001/;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"重启-nginx\"><a href=\"#重启-nginx\" class=\"headerlink\" title=\"重启 nginx\"></a>重启 nginx</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker restart &lt;nginx <span class=\"built_in\">id</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>参考文档:</p>\n<ul>\n<li><a href=\"https://nodejs.org/zh-cn/docs/guides/nodejs-docker-webapp\">把一个 Node.js web 应用程序给 Docker 化</a></li>\n</ul>"},{"title":"JavaScript Algorithms and Data Structures 源码分析(15) -- 芬威克树/Fenwick Tree","date":"2023-12-14T06:30:08.000Z","_content":"\n## Fenwick 树\n\nFenwick 树（也称为二进制索引树）是一种数据结构，它可以高效地更新元素和计算数字表中的前缀和。\n\n与一个平面数组相比，Fenwick 树在两个操作之间实现了更好的平衡：元素更新和前缀和计算。在一个平面数组中，你可以存储元素或前缀和。在第一种情况下，计算前缀和需要线性时间；在第二种情况下，更新数组元素需要线性时间（在这两种情况下，另一个操作可以在常量时间内完成）。Fenwick 树允许这两个操作在 O(log n)时间内完成。这是通过将数字表示为一棵树来实现的，其中每个节点的值是该子树中数字的总和。树结构允许只使用 O(log n)的节点访问来执行操作。\n\n<!-- more -->\n\n## 实现注意事项\n\n二进制索引树是用数组表示的。二进制索引树的每个节点存储了给定数组的一些元素的和。二进制索引树的大小等于输入数组的大小 n。在当前的实现中，我们使用 n+1 作为大小以便于实现。所有的索引都是从 1 开始的。\n\n![Binary Indexed Tree](https://www.geeksforgeeks.org/wp-content/uploads/BITSum.png)\n\n下面的图片是一个动画示例，展示了逐个插入元素 [1, 2, 3, 4, 5] 来创建二进制索引树的过程。\n\n![Fenwick Tree](https://upload.wikimedia.org/wikipedia/commons/d/dc/BITDemo.gif)\n\n## FenwickTree\n\n```js\nexport default class FenwickTree {\n  /**\n   * 构造函数创建一个空的树状数组，大小为'arraySize'\n   * 但是，数组大小为size + 1，因为索引是基于1的。\n   * 使用给定的数组大小创建树状数组对象。\n   *\n   * @param  {number} arraySize - 数组的大小。\n   */\n  constructor(arraySize) {\n    // 存储数组的大小。\n    this.arraySize = arraySize;\n\n    // 创建大小为 arraySize + 1 的树状数组. 将树状数组的所有元素初始化为0。\n    this.treeArray = Array(this.arraySize + 1).fill(0);\n  }\n\n  /**\n   * 在 FenwickTree 的指定位置增加指定的值。\n   *\n   * @param  {number} position - FenwickTree 的位置。\n   * @param  {number} value - 要增加的值。\n   * @return {FenwickTree} - 更新后的 FenwickTree 对象。\n   */\n  increase(position, value) {\n    // 检查位置是否在允许的范围内\n    if (position < 1 || position > this.arraySize) {\n      throw new Error(\"Position is out of allowed range\");\n    }\n\n    // 从给定位置开始，通过增加当前索引的最低有效位来遍历 FenwickTree 数组\n    for (let i = position; i <= this.arraySize; i += i & -i) {\n      // 通过添加指定的值来更新当前索引处的值\n      this.treeArray[i] += value;\n    }\n\n    // 返回更新后的 FenwickTree 对象\n    return this;\n  }\n\n  /**\n   * 查询从索引1到指定位置的和。\n   *\n   * @param  {number} position\n   * @return {number}\n   */\n  query(position) {\n    // 检查位置是否在允许的范围内\n    if (position < 1 || position > this.arraySize) {\n      throw new Error(\"Position is out of allowed range\");\n    }\n\n    let sum = 0;\n    // 遍历树数组以计算和\n    for (let i = position; i > 0; i -= i & -i) {\n      // 将当前索引处的值添加到和中\n      sum += this.treeArray[i];\n    }\n\n    return sum;\n  }\n\n  /**\n   * 查询从左索引到右索引的和。\n   *\n   * @param  {number} leftIndex - 左索引\n   * @param  {number} rightIndex - 右索引\n   * @return {number} - 和\n   */\n  queryRange(leftIndex, rightIndex) {\n    // 检查左索引是否大于右索引。\n    if (leftIndex > rightIndex) {\n      // 如果左索引大于右索引，抛出错误。\n      throw new Error(\"Left index can not be greater than right one\");\n    }\n\n    // 如果左索引等于1，返回从索引0到右索引的和。\n    if (leftIndex === 1) {\n      return this.query(rightIndex);\n    }\n\n    // 返回从索引0到右索引的和减去从索引0到左索引减1的和。\n    return this.query(rightIndex) - this.query(leftIndex - 1);\n  }\n}\n```\n","source":"_posts/data-structures-015-FenwickTree.md","raw":"---\ntitle: JavaScript Algorithms and Data Structures 源码分析(15) -- 芬威克树/Fenwick Tree\ndate: 2023-12-14 14:30:08\ntags:\n  - data structures\ncategories:\n  - 数据结构与算法\n---\n\n## Fenwick 树\n\nFenwick 树（也称为二进制索引树）是一种数据结构，它可以高效地更新元素和计算数字表中的前缀和。\n\n与一个平面数组相比，Fenwick 树在两个操作之间实现了更好的平衡：元素更新和前缀和计算。在一个平面数组中，你可以存储元素或前缀和。在第一种情况下，计算前缀和需要线性时间；在第二种情况下，更新数组元素需要线性时间（在这两种情况下，另一个操作可以在常量时间内完成）。Fenwick 树允许这两个操作在 O(log n)时间内完成。这是通过将数字表示为一棵树来实现的，其中每个节点的值是该子树中数字的总和。树结构允许只使用 O(log n)的节点访问来执行操作。\n\n<!-- more -->\n\n## 实现注意事项\n\n二进制索引树是用数组表示的。二进制索引树的每个节点存储了给定数组的一些元素的和。二进制索引树的大小等于输入数组的大小 n。在当前的实现中，我们使用 n+1 作为大小以便于实现。所有的索引都是从 1 开始的。\n\n![Binary Indexed Tree](https://www.geeksforgeeks.org/wp-content/uploads/BITSum.png)\n\n下面的图片是一个动画示例，展示了逐个插入元素 [1, 2, 3, 4, 5] 来创建二进制索引树的过程。\n\n![Fenwick Tree](https://upload.wikimedia.org/wikipedia/commons/d/dc/BITDemo.gif)\n\n## FenwickTree\n\n```js\nexport default class FenwickTree {\n  /**\n   * 构造函数创建一个空的树状数组，大小为'arraySize'\n   * 但是，数组大小为size + 1，因为索引是基于1的。\n   * 使用给定的数组大小创建树状数组对象。\n   *\n   * @param  {number} arraySize - 数组的大小。\n   */\n  constructor(arraySize) {\n    // 存储数组的大小。\n    this.arraySize = arraySize;\n\n    // 创建大小为 arraySize + 1 的树状数组. 将树状数组的所有元素初始化为0。\n    this.treeArray = Array(this.arraySize + 1).fill(0);\n  }\n\n  /**\n   * 在 FenwickTree 的指定位置增加指定的值。\n   *\n   * @param  {number} position - FenwickTree 的位置。\n   * @param  {number} value - 要增加的值。\n   * @return {FenwickTree} - 更新后的 FenwickTree 对象。\n   */\n  increase(position, value) {\n    // 检查位置是否在允许的范围内\n    if (position < 1 || position > this.arraySize) {\n      throw new Error(\"Position is out of allowed range\");\n    }\n\n    // 从给定位置开始，通过增加当前索引的最低有效位来遍历 FenwickTree 数组\n    for (let i = position; i <= this.arraySize; i += i & -i) {\n      // 通过添加指定的值来更新当前索引处的值\n      this.treeArray[i] += value;\n    }\n\n    // 返回更新后的 FenwickTree 对象\n    return this;\n  }\n\n  /**\n   * 查询从索引1到指定位置的和。\n   *\n   * @param  {number} position\n   * @return {number}\n   */\n  query(position) {\n    // 检查位置是否在允许的范围内\n    if (position < 1 || position > this.arraySize) {\n      throw new Error(\"Position is out of allowed range\");\n    }\n\n    let sum = 0;\n    // 遍历树数组以计算和\n    for (let i = position; i > 0; i -= i & -i) {\n      // 将当前索引处的值添加到和中\n      sum += this.treeArray[i];\n    }\n\n    return sum;\n  }\n\n  /**\n   * 查询从左索引到右索引的和。\n   *\n   * @param  {number} leftIndex - 左索引\n   * @param  {number} rightIndex - 右索引\n   * @return {number} - 和\n   */\n  queryRange(leftIndex, rightIndex) {\n    // 检查左索引是否大于右索引。\n    if (leftIndex > rightIndex) {\n      // 如果左索引大于右索引，抛出错误。\n      throw new Error(\"Left index can not be greater than right one\");\n    }\n\n    // 如果左索引等于1，返回从索引0到右索引的和。\n    if (leftIndex === 1) {\n      return this.query(rightIndex);\n    }\n\n    // 返回从索引0到右索引的和减去从索引0到左索引减1的和。\n    return this.query(rightIndex) - this.query(leftIndex - 1);\n  }\n}\n```\n","slug":"data-structures-015-FenwickTree","published":1,"updated":"2023-12-14T06:51:37.690Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clq4xe1df002etz2h8vuyfsmn","content":"<h2 id=\"Fenwick-树\"><a href=\"#Fenwick-树\" class=\"headerlink\" title=\"Fenwick 树\"></a>Fenwick 树</h2><p>Fenwick 树（也称为二进制索引树）是一种数据结构，它可以高效地更新元素和计算数字表中的前缀和。</p>\n<p>与一个平面数组相比，Fenwick 树在两个操作之间实现了更好的平衡：元素更新和前缀和计算。在一个平面数组中，你可以存储元素或前缀和。在第一种情况下，计算前缀和需要线性时间；在第二种情况下，更新数组元素需要线性时间（在这两种情况下，另一个操作可以在常量时间内完成）。Fenwick 树允许这两个操作在 O(log n)时间内完成。这是通过将数字表示为一棵树来实现的，其中每个节点的值是该子树中数字的总和。树结构允许只使用 O(log n)的节点访问来执行操作。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"实现注意事项\"><a href=\"#实现注意事项\" class=\"headerlink\" title=\"实现注意事项\"></a>实现注意事项</h2><p>二进制索引树是用数组表示的。二进制索引树的每个节点存储了给定数组的一些元素的和。二进制索引树的大小等于输入数组的大小 n。在当前的实现中，我们使用 n+1 作为大小以便于实现。所有的索引都是从 1 开始的。</p>\n<p><img src=\"https://www.geeksforgeeks.org/wp-content/uploads/BITSum.png\" alt=\"Binary Indexed Tree\"></p>\n<p>下面的图片是一个动画示例，展示了逐个插入元素 [1, 2, 3, 4, 5] 来创建二进制索引树的过程。</p>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/d/dc/BITDemo.gif\" alt=\"Fenwick Tree\"></p>\n<h2 id=\"FenwickTree\"><a href=\"#FenwickTree\" class=\"headerlink\" title=\"FenwickTree\"></a>FenwickTree</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FenwickTree</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 构造函数创建一个空的树状数组，大小为&#x27;arraySize&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">   * 但是，数组大小为size + 1，因为索引是基于1的。</span></span><br><span class=\"line\"><span class=\"comment\">   * 使用给定的数组大小创建树状数组对象。</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span>  &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">arraySize</span> - 数组的大小。</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">arraySize</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 存储数组的大小。</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">arraySize</span> = arraySize;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建大小为 arraySize + 1 的树状数组. 将树状数组的所有元素初始化为0。</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">treeArray</span> = <span class=\"title class_\">Array</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">arraySize</span> + <span class=\"number\">1</span>).<span class=\"title function_\">fill</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 在 FenwickTree 的指定位置增加指定的值。</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span>  &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">position</span> - FenwickTree 的位置。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span>  &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">value</span> - 要增加的值。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">FenwickTree</span>&#125; - 更新后的 FenwickTree 对象。</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">increase</span>(<span class=\"params\">position, value</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 检查位置是否在允许的范围内</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (position &lt; <span class=\"number\">1</span> || position &gt; <span class=\"variable language_\">this</span>.<span class=\"property\">arraySize</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;Position is out of allowed range&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从给定位置开始，通过增加当前索引的最低有效位来遍历 FenwickTree 数组</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = position; i &lt;= <span class=\"variable language_\">this</span>.<span class=\"property\">arraySize</span>; i += i &amp; -i) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 通过添加指定的值来更新当前索引处的值</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">treeArray</span>[i] += value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回更新后的 FenwickTree 对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 查询从索引1到指定位置的和。</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span>  &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">position</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">query</span>(<span class=\"params\">position</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 检查位置是否在允许的范围内</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (position &lt; <span class=\"number\">1</span> || position &gt; <span class=\"variable language_\">this</span>.<span class=\"property\">arraySize</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;Position is out of allowed range&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历树数组以计算和</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = position; i &gt; <span class=\"number\">0</span>; i -= i &amp; -i) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 将当前索引处的值添加到和中</span></span><br><span class=\"line\">      sum += <span class=\"variable language_\">this</span>.<span class=\"property\">treeArray</span>[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 查询从左索引到右索引的和。</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span>  &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">leftIndex</span> - 左索引</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span>  &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">rightIndex</span> - 右索引</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125; - 和</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">queryRange</span>(<span class=\"params\">leftIndex, rightIndex</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 检查左索引是否大于右索引。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (leftIndex &gt; rightIndex) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果左索引大于右索引，抛出错误。</span></span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;Left index can not be greater than right one&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果左索引等于1，返回从索引0到右索引的和。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (leftIndex === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">query</span>(rightIndex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回从索引0到右索引的和减去从索引0到左索引减1的和。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">query</span>(rightIndex) - <span class=\"variable language_\">this</span>.<span class=\"title function_\">query</span>(leftIndex - <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"related_posts":["2023/12/14/data-structures-011-BinarySearchTree/"],"length":831,"excerpt":"<h2 id=\"Fenwick-树\"><a href=\"#Fenwick-树\" class=\"headerlink\" title=\"Fenwick 树\"></a>Fenwick 树</h2><p>Fenwick 树（也称为二进制索引树）是一种数据结构，它可以高效地更新元素和计算数字表中的前缀和。</p>\n<p>与一个平面数组相比，Fenwick 树在两个操作之间实现了更好的平衡：元素更新和前缀和计算。在一个平面数组中，你可以存储元素或前缀和。在第一种情况下，计算前缀和需要线性时间；在第二种情况下，更新数组元素需要线性时间（在这两种情况下，另一个操作可以在常量时间内完成）。Fenwick 树允许这两个操作在 O(log n)时间内完成。这是通过将数字表示为一棵树来实现的，其中每个节点的值是该子树中数字的总和。树结构允许只使用 O(log n)的节点访问来执行操作。</p>","more":"<h2 id=\"实现注意事项\"><a href=\"#实现注意事项\" class=\"headerlink\" title=\"实现注意事项\"></a>实现注意事项</h2><p>二进制索引树是用数组表示的。二进制索引树的每个节点存储了给定数组的一些元素的和。二进制索引树的大小等于输入数组的大小 n。在当前的实现中，我们使用 n+1 作为大小以便于实现。所有的索引都是从 1 开始的。</p>\n<p><img src=\"https://www.geeksforgeeks.org/wp-content/uploads/BITSum.png\" alt=\"Binary Indexed Tree\"></p>\n<p>下面的图片是一个动画示例，展示了逐个插入元素 [1, 2, 3, 4, 5] 来创建二进制索引树的过程。</p>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/d/dc/BITDemo.gif\" alt=\"Fenwick Tree\"></p>\n<h2 id=\"FenwickTree\"><a href=\"#FenwickTree\" class=\"headerlink\" title=\"FenwickTree\"></a>FenwickTree</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FenwickTree</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 构造函数创建一个空的树状数组，大小为&#x27;arraySize&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">   * 但是，数组大小为size + 1，因为索引是基于1的。</span></span><br><span class=\"line\"><span class=\"comment\">   * 使用给定的数组大小创建树状数组对象。</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span>  &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">arraySize</span> - 数组的大小。</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">arraySize</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 存储数组的大小。</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">arraySize</span> = arraySize;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建大小为 arraySize + 1 的树状数组. 将树状数组的所有元素初始化为0。</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">treeArray</span> = <span class=\"title class_\">Array</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">arraySize</span> + <span class=\"number\">1</span>).<span class=\"title function_\">fill</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 在 FenwickTree 的指定位置增加指定的值。</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span>  &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">position</span> - FenwickTree 的位置。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span>  &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">value</span> - 要增加的值。</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">FenwickTree</span>&#125; - 更新后的 FenwickTree 对象。</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">increase</span>(<span class=\"params\">position, value</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 检查位置是否在允许的范围内</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (position &lt; <span class=\"number\">1</span> || position &gt; <span class=\"variable language_\">this</span>.<span class=\"property\">arraySize</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;Position is out of allowed range&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从给定位置开始，通过增加当前索引的最低有效位来遍历 FenwickTree 数组</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = position; i &lt;= <span class=\"variable language_\">this</span>.<span class=\"property\">arraySize</span>; i += i &amp; -i) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 通过添加指定的值来更新当前索引处的值</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">treeArray</span>[i] += value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回更新后的 FenwickTree 对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 查询从索引1到指定位置的和。</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span>  &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">position</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">query</span>(<span class=\"params\">position</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 检查位置是否在允许的范围内</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (position &lt; <span class=\"number\">1</span> || position &gt; <span class=\"variable language_\">this</span>.<span class=\"property\">arraySize</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;Position is out of allowed range&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历树数组以计算和</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = position; i &gt; <span class=\"number\">0</span>; i -= i &amp; -i) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 将当前索引处的值添加到和中</span></span><br><span class=\"line\">      sum += <span class=\"variable language_\">this</span>.<span class=\"property\">treeArray</span>[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 查询从左索引到右索引的和。</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span>  &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">leftIndex</span> - 左索引</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span>  &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">rightIndex</span> - 右索引</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125; - 和</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">queryRange</span>(<span class=\"params\">leftIndex, rightIndex</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 检查左索引是否大于右索引。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (leftIndex &gt; rightIndex) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果左索引大于右索引，抛出错误。</span></span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;Left index can not be greater than right one&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果左索引等于1，返回从索引0到右索引的和。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (leftIndex === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">query</span>(rightIndex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回从索引0到右索引的和减去从索引0到左索引减1的和。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">query</span>(rightIndex) - <span class=\"variable language_\">this</span>.<span class=\"title function_\">query</span>(leftIndex - <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"clq4xe1d30003tz2h7s6oghwk","category_id":"clq4xe1d50007tz2h9ad0dcd6","_id":"clq4xe1d8000mtz2hhgo4alx2"},{"post_id":"clq4xe1d40006tz2hgcoidwm9","category_id":"clq4xe1d6000gtz2h0rshftt5","_id":"clq4xe1da000wtz2h9hepgvi6"},{"post_id":"clq4xe1d7000ltz2h6ridexu4","category_id":"clq4xe1d6000gtz2h0rshftt5","_id":"clq4xe1da0010tz2hg4k82rhr"},{"post_id":"clq4xe1d8000qtz2h894ngk0f","category_id":"clq4xe1d6000gtz2h0rshftt5","_id":"clq4xe1db0015tz2hfw53gb21"},{"post_id":"clq4xe1d50009tz2hb5s938j5","category_id":"clq4xe1d6000gtz2h0rshftt5","_id":"clq4xe1db001atz2h2pn96jn5"},{"post_id":"clq4xe1d9000utz2hatlg1s3f","category_id":"clq4xe1d6000gtz2h0rshftt5","_id":"clq4xe1db001etz2hcixd9mkl"},{"post_id":"clq4xe1da000ztz2h3ic538s3","category_id":"clq4xe1d6000gtz2h0rshftt5","_id":"clq4xe1db001htz2h1xj04prl"},{"post_id":"clq4xe1d6000btz2hag7hhckg","category_id":"clq4xe1d9000vtz2hc2deh1p9","_id":"clq4xe1dc001ltz2hfz2mdvfh"},{"post_id":"clq4xe1da0014tz2hcexggs6z","category_id":"clq4xe1d6000gtz2h0rshftt5","_id":"clq4xe1dd001otz2h72jj7esp"},{"post_id":"clq4xe1db0019tz2hf3bf58t2","category_id":"clq4xe1d6000gtz2h0rshftt5","_id":"clq4xe1dd001rtz2h6a802qbi"},{"post_id":"clq4xe1d6000ftz2h93y32ywt","category_id":"clq4xe1d6000gtz2h0rshftt5","_id":"clq4xe1dd001utz2h5jxh2jie"},{"post_id":"clq4xe1de001wtz2h0a010ld9","category_id":"clq4xe1d6000gtz2h0rshftt5","_id":"clq4xe1de0022tz2h9tl32xrf"},{"post_id":"clq4xe1de001xtz2h9i1a8k9p","category_id":"clq4xe1d6000gtz2h0rshftt5","_id":"clq4xe1de0025tz2h3ulzbx0y"},{"post_id":"clq4xe1de001ztz2hhco44mkv","category_id":"clq4xe1d6000gtz2h0rshftt5","_id":"clq4xe1df0028tz2h8irrf4xy"},{"post_id":"clq4xe1de0021tz2hdt38gqmo","category_id":"clq4xe1d6000gtz2h0rshftt5","_id":"clq4xe1df002ctz2h2siwcpho"},{"post_id":"clq4xe1df0027tz2h80msge6w","category_id":"clq4xe1d9000vtz2hc2deh1p9","_id":"clq4xe1df002ftz2hg9xg0wk2"},{"post_id":"clq4xe1df002etz2h8vuyfsmn","category_id":"clq4xe1d6000gtz2h0rshftt5","_id":"clq4xe1df002jtz2h032g99cr"},{"post_id":"clq4xe1de0024tz2hepsvf1hf","category_id":"clq4xe1df0029tz2hatr20u73","_id":"clq4xe1dg002ltz2havjy0iew"}],"PostTag":[{"post_id":"clq4xe1d20001tz2h6enbef3h","tag_id":"clq4xe1d40004tz2hfvid0z99","_id":"clq4xe1d6000dtz2hfe8j67vu"},{"post_id":"clq4xe1d30003tz2h7s6oghwk","tag_id":"clq4xe1d6000ctz2h19nj6n5q","_id":"clq4xe1d8000ntz2hgktu13la"},{"post_id":"clq4xe1d7000ltz2h6ridexu4","tag_id":"clq4xe1d7000jtz2hg8d3h9p7","_id":"clq4xe1d9000stz2h1qolffss"},{"post_id":"clq4xe1d40006tz2hgcoidwm9","tag_id":"clq4xe1d7000jtz2hg8d3h9p7","_id":"clq4xe1da000xtz2h56y18wy9"},{"post_id":"clq4xe1d8000qtz2h894ngk0f","tag_id":"clq4xe1d7000jtz2hg8d3h9p7","_id":"clq4xe1da0012tz2hfd7bams5"},{"post_id":"clq4xe1d9000utz2hatlg1s3f","tag_id":"clq4xe1d7000jtz2hg8d3h9p7","_id":"clq4xe1db0017tz2hfke70b7i"},{"post_id":"clq4xe1d50009tz2hb5s938j5","tag_id":"clq4xe1d7000jtz2hg8d3h9p7","_id":"clq4xe1db001btz2h5ouhcoda"},{"post_id":"clq4xe1da000ztz2h3ic538s3","tag_id":"clq4xe1d7000jtz2hg8d3h9p7","_id":"clq4xe1db001ftz2hh1xjh6dy"},{"post_id":"clq4xe1da0014tz2hcexggs6z","tag_id":"clq4xe1d7000jtz2hg8d3h9p7","_id":"clq4xe1db001itz2h8djobhxd"},{"post_id":"clq4xe1db0019tz2hf3bf58t2","tag_id":"clq4xe1d7000jtz2hg8d3h9p7","_id":"clq4xe1dc001mtz2hgwfwfe3h"},{"post_id":"clq4xe1d6000btz2hag7hhckg","tag_id":"clq4xe1da0011tz2h53qq57ai","_id":"clq4xe1dd001ptz2hdn8d18so"},{"post_id":"clq4xe1d6000btz2hag7hhckg","tag_id":"clq4xe1db001ctz2hbky309j5","_id":"clq4xe1dd001stz2hceg1d9vg"},{"post_id":"clq4xe1d6000ftz2h93y32ywt","tag_id":"clq4xe1d7000jtz2hg8d3h9p7","_id":"clq4xe1dd001vtz2h2u0q9wn0"},{"post_id":"clq4xe1de001wtz2h0a010ld9","tag_id":"clq4xe1d7000jtz2hg8d3h9p7","_id":"clq4xe1de001ytz2hcjoc7mva"},{"post_id":"clq4xe1de001xtz2h9i1a8k9p","tag_id":"clq4xe1d7000jtz2hg8d3h9p7","_id":"clq4xe1de0020tz2h9joqbv7s"},{"post_id":"clq4xe1de001ztz2hhco44mkv","tag_id":"clq4xe1d7000jtz2hg8d3h9p7","_id":"clq4xe1de0023tz2h046vgzqb"},{"post_id":"clq4xe1de0021tz2hdt38gqmo","tag_id":"clq4xe1d7000jtz2hg8d3h9p7","_id":"clq4xe1de0026tz2h7zn095xy"},{"post_id":"clq4xe1df0027tz2h80msge6w","tag_id":"clq4xe1da0011tz2h53qq57ai","_id":"clq4xe1df002dtz2h70ni1z86"},{"post_id":"clq4xe1df002etz2h8vuyfsmn","tag_id":"clq4xe1d7000jtz2hg8d3h9p7","_id":"clq4xe1df002htz2h8mu29nhr"},{"post_id":"clq4xe1de0024tz2hepsvf1hf","tag_id":"clq4xe1df002atz2hajs11m6b","_id":"clq4xe1df002itz2h1741clmx"},{"post_id":"clq4xe1df002btz2h8hwb8xca","tag_id":"clq4xe1df002gtz2h42g66qnb","_id":"clq4xe1dg002mtz2h9vvg5wa1"},{"post_id":"clq4xe1df002btz2h8hwb8xca","tag_id":"clq4xe1df002ktz2h0h0h7oqd","_id":"clq4xe1dg002ntz2h2214hw89"}],"Tag":[{"name":"server","_id":"clq4xe1d40004tz2hfvid0z99"},{"name":"css","_id":"clq4xe1d6000ctz2h19nj6n5q"},{"name":"data structures","_id":"clq4xe1d7000jtz2hg8d3h9p7"},{"name":"WKWebView","_id":"clq4xe1da0011tz2h53qq57ai"},{"name":"javascript","_id":"clq4xe1db001ctz2hbky309j5"},{"name":"hexo","_id":"clq4xe1df002atz2hajs11m6b"},{"name":"docker","_id":"clq4xe1df002gtz2h42g66qnb"},{"name":"express","_id":"clq4xe1df002ktz2h0h0h7oqd"}]}}